<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Jason&#39;Blog</title>
  <subtitle>热爱诗和远方的逗逼青年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meiminjun.github.io/"/>
  <updated>2019-03-23T08:47:27.008Z</updated>
  <id>http://meiminjun.github.io/</id>
  
  <author>
    <name>Mr.Jason</name>
    <email>251222845@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web性能极致优化策略清单</title>
    <link href="http://meiminjun.github.io/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://meiminjun.github.io/web性能优化/</id>
    <published>2018-06-01T20:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、避免使用重定向"><a href="#1、避免使用重定向" class="headerlink" title="1、避免使用重定向"></a>1、避免使用重定向</h2><p>在最好的情况下，每个重定向都会添加一次往返（HTTP 请求-响应）；而在最坏的情况下，除了额外的 HTTP 请求-响应周期外，它还可能会让更多次的往返执行 DNS 查找、TCP 握手和 TLS 协商</p>
<ul>
<li>example.com 使用自适应网页设计，无需任何重定向 - 快速且理想！</li>
<li>example.com → m.example.com/home - 会导致移动设备用户遭遇多次往返。</li>
<li>example.com → www.example.com → m.example.com - 移动浏览体验非常缓慢</li>
</ul>
<h2 id="2、启用压缩功能-gzip"><a href="#2、启用压缩功能-gzip" class="headerlink" title="2、启用压缩功能-gzip"></a>2、启用压缩功能-gzip</h2><h2 id="3、缩短服务器响应时间"><a href="#3、缩短服务器响应时间" class="headerlink" title="3、缩短服务器响应时间"></a>3、缩短服务器响应时间</h2><ul>
<li>将服务器的接口响应时间控制在200ms以内</li>
<li>剔除掉无用的响应数据</li>
</ul>
<h2 id="4、使用浏览器缓存策略"><a href="#4、使用浏览器缓存策略" class="headerlink" title="4、使用浏览器缓存策略"></a>4、使用浏览器缓存策略</h2><ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#cache-control" target="_blank" rel="external">Cache-Control</a> 指定了浏览器和其他中间缓存可如何缓存单项响应以及可缓存多长时间</li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#validating-cached-responses-with-etags" target="_blank" rel="external">ETag</a> 提供了一个重新验证令牌，该令牌是由浏览器自动发送的，用于检查自上次请求相应资源后该资源是否发生了变化</li>
</ul>
<h2 id="5、缩减资源大小-html、js、css"><a href="#5、缩减资源大小-html、js、css" class="headerlink" title="5、缩减资源大小(html、js、css)"></a>5、缩减资源大小(html、js、css)</h2><h2 id="6、优化图片大小"><a href="#6、优化图片大小" class="headerlink" title="6、优化图片大小"></a>6、优化图片大小</h2><h2 id="7、优化css发送过程"><a href="#7、优化css发送过程" class="headerlink" title="7、优化css发送过程"></a>7、优化css发送过程</h2><ul>
<li>内嵌较小 CSS 文件</li>
<li>请勿内嵌较大数据 URl</li>
<li>请勿内嵌 CSS 属性(<code>导致代码重复</code>)</li>
</ul>
<h2 id="8、优先加载可见内容"><a href="#8、优先加载可见内容" class="headerlink" title="8、优先加载可见内容"></a>8、优先加载可见内容</h2><h2 id="9、移除会阻止内容展示的javascript"><a href="#9、移除会阻止内容展示的javascript" class="headerlink" title="9、移除会阻止内容展示的javascript"></a>9、移除会阻止内容展示的javascript</h2><ul>
<li>尽量不在头部添加外部脚本,可少量内嵌脚本</li>
<li>将javascript设为异步加载</li>
<li>按需加载javascript</li>
</ul>
<h2 id="10、使用http2"><a href="#10、使用http2" class="headerlink" title="10、使用http2"></a>10、使用<a href="https://developers.google.com/web/fundamentals/performance/http2/" target="_blank" rel="external">http2</a></h2><p>参考:</p>
<ul>
<li><a href="https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fb.pingan.com.cn%2Faum%2Fmobile%2Findex.html" target="_blank" rel="external">web性能检测工具</a></li>
<li><a href="https://developers.google.com/speed/docs/insights/LeverageBrowserCaching" target="_blank" rel="external">google优化参考</a></li>
<li><a href="https://juejin.im/post/5b0b7d74518825158e173a0c" target="_blank" rel="external">web优化</a></li>
<li><a href="https://lz5z.com/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E9%A6%96%E5%B1%8F%E5%92%8C%E7%99%BD%E5%B1%8F%E6%97%B6%E9%97%B4/" target="_blank" rel="external">Web性能优化-首屏和白屏时间</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、避免使用重定向&quot;&gt;&lt;a href=&quot;#1、避免使用重定向&quot; class=&quot;headerlink&quot; title=&quot;1、避免使用重定向&quot;&gt;&lt;/a&gt;1、避免使用重定向&lt;/h2&gt;&lt;p&gt;在最好的情况下，每个重定向都会添加一次往返（HTTP 请求-响应）；而在最坏的情况下
    
    </summary>
    
    
      <category term="web" scheme="http://meiminjun.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2018年的认知升级</title>
    <link href="http://meiminjun.github.io/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7-%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E8%A7%82/"/>
    <id>http://meiminjun.github.io/认知升级-我的世界观/</id>
    <published>2018-01-01T21:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fo39s8tm8tj30ex08cq3d.jpg" alt=""></p>
<p>最近，在上班的地铁上，两个小故事引发的人生思考</p>
<h2 id="高晓松老师对于生死的一段描述"><a href="#高晓松老师对于生死的一段描述" class="headerlink" title="高晓松老师对于生死的一段描述"></a>高晓松老师对于生死的一段描述</h2><p>原文：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">你是那颗星星</div><div class="line"></div><div class="line">我是你旁边的这颗星</div><div class="line"></div><div class="line">我的整个轨迹是被你影响</div><div class="line"></div><div class="line">即使有一天这颗星星熄灭了</div><div class="line"></div><div class="line">它变成了暗物质</div><div class="line"></div><div class="line">它变成了看不见的东西</div><div class="line"></div><div class="line">它依然在影响着我的轨迹</div><div class="line"></div><div class="line">你的出现永远改变着我的星轨</div><div class="line"></div><div class="line">无论，你在哪里……</div></pre></td></tr></table></figure>
<h2 id="罗永浩的小故事"><a href="#罗永浩的小故事" class="headerlink" title="罗永浩的小故事"></a>罗永浩的小故事</h2><p>原文：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">乔布斯在去世前的一个星期，</div><div class="line">每天昏迷的时间比清醒的时间多，</div><div class="line">挣扎着醒过来的时候，</div><div class="line">他会和陪在他身边的家人说，</div><div class="line">那个输液的架子设计得如何不科学.</div><div class="line">我很喜欢这个故事,</div><div class="line">如果没什么意外，</div><div class="line">我将来也会把病房里的东西全都研究个遍，</div><div class="line">还要改变它，</div><div class="line">弥留之际也要睁眼看看是不是每个设备都改对了</div></pre></td></tr></table></figure>
<p>于是引发了自己对于接下来的生活的重新整理：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">以产品的思想为中心来思考本身与世界万物</div><div class="line"></div><div class="line">以诗和远方来面对生活</div><div class="line"></div><div class="line">以人性弱点来理财</div><div class="line"></div><div class="line">以结果为目标来工作</div><div class="line"></div><div class="line">以严格的作息制度和运动来保护身体</div><div class="line"></div><div class="line">以更好的组织语言与沟通方式来改变他人，哪怕影响只有一点点</div><div class="line"></div><div class="line">以终生学习来不断对自己进行认知升级</div><div class="line"></div><div class="line">以认识世界，为人类社会文明创造价值为目标不屑努力</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fo39s8tm8tj30ex08cq3d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近，在上班的地铁上，两个小故事引发的人生思考&lt;/p&gt;
&lt;h2 id=&quot;高晓松老师对于生死
    
    </summary>
    
    
      <category term="认知升级" scheme="http://meiminjun.github.io/tags/%E8%AE%A4%E7%9F%A5%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>开始开发我的投资量化产品</title>
    <link href="http://meiminjun.github.io/%E6%88%91%E7%9A%84%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF%E7%B3%BB%E5%88%97/"/>
    <id>http://meiminjun.github.io/我的财富自由之路系列/</id>
    <published>2018-01-01T21:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p>从今天起，用一年的时间，来开发一个属于自己的量化投资软件产品</p>
<p>什么是量化投资？<br>量化就是把“定义”指标化数据化。举个例子，你说你喜欢身材好的美女，我没办法给你介绍，因为身材好没有统一的标准。但是你说你想要身高170cm以上，体重50kg以内，胸围超过90cm，腰围小于70cm的。那我就懂了。这就是量化。</p>
<p>那么量化投资，就是把你的投资想法通过数据和计算模型来验证和落实。比如，你可以设定将你选定的几支波动中股票在下跌5%的时候买入，在上涨10%的时候抛出，观察这一方法如果在过去2年中贯彻，你的结果是涨还是跌，以此来调整你的策略。<br>量化投资的最大好处在于，可以在决策过程中避免主观臆断和情绪影响，而且能够发现复杂的数据规律，快速抓住交易机会。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今天起，用一年的时间，来开发一个属于自己的量化投资软件产品&lt;/p&gt;
&lt;p&gt;什么是量化投资？&lt;br&gt;量化就是把“定义”指标化数据化。举个例子，你说你喜欢身材好的美女，我没办法给你介绍，因为身材好没有统一的标准。但是你说你想要身高170cm以上，体重50kg以内，胸围超过90
    
    </summary>
    
    
      <category term="量化投资" scheme="http://meiminjun.github.io/tags/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>教你如何免费拥有vip权限观看视频</title>
    <link href="http://meiminjun.github.io/vip%E8%A7%86%E9%A2%91%E7%A0%B4%E8%A7%A3/"/>
    <id>http://meiminjun.github.io/vip视频破解/</id>
    <published>2017-08-31T13:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>支持大部分视频网站的vip权限<ul>
<li>爱奇艺</li>
<li>腾讯</li>
<li>乐视</li>
<li>优酷</li>
<li>土豆</li>
<li>等等…</li>
</ul>
</li>
</ul>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li>能够翻墙，因为需要安装chrome插件，国内屏蔽了google（这个最重要）,可以查看我之前<a href="http://meiminjun.github.io/chrome-%E7%BF%BB%E5%A2%99/">查看翻墙教程</a>,只需几步即可</li>
<li>只支持桌面chrome观看</li>
</ul>
<h2 id="破解教程"><a href="#破解教程" class="headerlink" title="破解教程"></a>破解教程</h2><p>第一步，先打开chrome,安装<strong>Tampermonke</strong>,点击<strong>“添加至chrome”</strong>，<a href="https://chrome.google.com/webstore/search/Tampermonkey" target="_blank" rel="external">跳转安装地址</a></p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fj2rch6qv7j31kw0e8k26.jpg" alt=""></p>
<p>浏览器导航栏会出现一个按钮，说明安装成功<br><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fj2wi58phrj31kw028myl.jpg" alt=""></p>
<p>第二步，安装<a href="https://greasyfork.org/zh-CN/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88" target="_blank" rel="external">破解脚本</a>，点击<strong>“安装此脚本”</strong><br><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fj2w0goj5wj31gu0p4n58.jpg" alt=""></p>
<p>返回管理面板，里面就会显示已安装的脚本</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fj2w37cnc8j31kw0hntfp.jpg" alt=""></p>
<p>最后，大功告成，然后就可以去各大视频网站happy咯！</p>
<p><img src="https://ooo.0o0.ooo/2017/06/13/593f33ca1bf5e.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持大部分视频网站的vip权限&lt;ul&gt;
&lt;li&gt;爱奇艺&lt;/li&gt;
&lt;li&gt;腾讯&lt;/li&gt;
&lt;li&gt;乐视&lt;/li&gt;
&lt;li&gt;优酷&lt;
    
    </summary>
    
    
      <category term="chrome" scheme="http://meiminjun.github.io/tags/chrome/"/>
    
      <category term="黑科技" scheme="http://meiminjun.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>git常用笔记-思维导图</title>
    <link href="http://meiminjun.github.io/xmind-git/"/>
    <id>http://meiminjun.github.io/xmind-git/</id>
    <published>2017-08-23T20:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p>以下是日常开发中，经常使用到的git命令，以思维导图的方式帮助记忆</p>
<p><img src="../images/blogImg/git.svg" width="100%" height="100%"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是日常开发中，经常使用到的git命令，以思维导图的方式帮助记忆&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/blogImg/git.svg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞清楚javascript中的require、import和export</title>
    <link href="http://meiminjun.github.io/import%E5%92%8Cexport%E7%AC%94%E8%AE%B0/"/>
    <id>http://meiminjun.github.io/import和export笔记/</id>
    <published>2017-07-04T20:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u9d2ixbj308c08bdfs.jpg" alt=""></p>
<h2 id="为什么有模块概念"><a href="#为什么有模块概念" class="headerlink" title="为什么有模块概念"></a>为什么有模块概念</h2><p>理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>
<p>但是，Javascript不是一种模块化编程语言，在es6以前，它是不支持”类”（class），所以也就没有”模块”（module）了。</p>
<a id="more"></a>
<h2 id="require时代"><a href="#require时代" class="headerlink" title="require时代"></a>require时代</h2><p>Javascript社区做了很多努力，在现有的运行环境中，实现”模块”的效果。</p>
<h3 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h3><p>模块就是实现特定功能的一组方法。<br>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　<span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　<span class="comment">//...　　</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的函数m1()和m2()，组成一个模块。使用的时候，直接调用就行了。</p>
<p>这种做法的缺点很明显：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p>
<h3 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h3><p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</div><div class="line">  _count : <span class="number">0</span>,</div><div class="line">　m1 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="comment">//...</span></div><div class="line">　&#125;,</div><div class="line">　m2 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="comment">//...</span></div><div class="line">　&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的函数m1()和m2(），都封装在module1对象里。使用的时候，就是调用这个对象的属性</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module<span class="number">1.</span><span class="name">m1</span><span class="comment">()</span>;</div></pre></td></tr></table></figure>
<p>这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module._<span class="built_in">count</span> = <span class="number">1</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="立即执行函数写法"><a href="#立即执行函数写法" class="headerlink" title="立即执行函数写法"></a>立即执行函数写法</h3><p>使用”立即执行函数”（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(_count)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(_count + <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        m1: m1,</div><div class="line">        m2: m2</div><div class="line">    &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>使用上面的写法，外部代码无法读取内部的_count变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　<span class="built_in">console</span>.info(<span class="built_in">module</span>._count); <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
<p>module就是Javascript模块的基本写法。</p>
<h2 id="主流模块规范"><a href="#主流模块规范" class="headerlink" title="主流模块规范"></a>主流模块规范</h2><p>在es6以前，还没有提出一套官方的规范,从社区和框架推广程度而言,目前通行的javascript模块规范有两种：CommonJS 和 AMD</p>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fh7n4us7v0j30dw043aa0.jpg" alt=""></p>
<p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。</p>
<p>这标志”Javascript模块化编程”正式诞生。前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p>
<p>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p>
<p>在CommonJS中,暴露模块使用module.exports和exports，很多人不明白暴露对象为什么会有两个,后面会介绍区别</p>
<p>在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</div></pre></td></tr></table></figure>
<p>然后，就可以调用模块提供的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　<span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</div><div class="line">　math.add(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>正是由于CommonJS 使用的require方式的推动，才有了后面的AMD、CMD 也采用的require方式来引用模块的风格</p>
<h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fh7u7byz4xj30dh06e75d.jpg" alt=""></p>
<p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。</p>
<p>但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">math</span> = <span class="built_in">require</span>(<span class="string">'math'</span>);</div><div class="line"><span class="built_in">math</span>.add(<span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>
<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>
<p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
<p>模块必须采用特定的define()函数来定义。</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">define</span>(<span class="section">id</span>?, dependencies?, factory)</div></pre></td></tr></table></figure>
<ul>
<li>id:字符串，模块名称(可选)</li>
<li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li>
<li>factory: 工厂方法，返回一个模块函数</li>
</ul>
<p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// math.js</span></div><div class="line">　　define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> x+y;</div><div class="line">　　　　&#125;;</div><div class="line">　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　add: add</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;);</div></pre></td></tr></table></figure>
<p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'Lib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">Lib</span>)</span>&#123;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　Lib.doSomething();</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　foo : foo</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;);</div></pre></td></tr></table></figure>
<p>当require()函数加载上面这个模块的时候，就会先加载Lib.js文件。</p>
<p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span>([<span class="class"><span class="keyword">module</span>], <span class="title">callback</span>);</span></div></pre></td></tr></table></figure>
<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(math)</span></span> &#123;</div><div class="line">　<span class="built_in">math</span>.add(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>
<p>目前，主要有两个Javascript库实现了AMD规范：<a href="http://requirejs.org/" target="_blank" rel="external">require.js</a>和<a href="http://cujojs.com/" target="_blank" rel="external">curl.js</a>。</p>
<h3 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h3><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u5xcnw7j305k046wed.jpg" alt=""></p>
<p>CMD (Common Module Definition), 是seajs推崇的规范，CMD则是依赖就近，用的时候再require。它写起来是这样的：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(<span class="name">function</span>(<span class="name">require</span>, exports, module) &#123;</div><div class="line">   var clock = require('clock')<span class="comment">;</span></div><div class="line">   clock.start()<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>CMD与AMD一样，也是采用特定的define()函数来定义,用require方式来引用模块</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">define</span>(<span class="section">id</span>?, dependencies?, factory)</div></pre></td></tr></table></figure>
<ul>
<li>id:字符串，模块名称(可选)</li>
<li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li>
<li>factory: 工厂方法，返回一个模块函数</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'hello'</span>, [<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">require</span>, exports, <span class="keyword">module</span>)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment"></span></span></div><div class="line"><span class="function"><span class="comment">  // 模块代码</span></span></div><div class="line"><span class="function"><span class="comment"></span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span>);</span></div></pre></td></tr></table></figure>
<p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">require</span>, exports, <span class="keyword">module</span>)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">  // 模块代码</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span>);</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：带 id 和 dependencies 参数的 define 用法不属于 CMD 规范，而属于 Modules/Transport 规范。</p>
</blockquote>
<h2 id="CMD与AMD区别"><a href="#CMD与AMD区别" class="headerlink" title="CMD与AMD区别"></a>CMD与AMD区别</h2><p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p>
<p>AMD依赖前置，js可以方便知道依赖模块是谁，立即加载；</p>
<p>而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p>
<h2 id="现阶段的标准"><a href="#现阶段的标准" class="headerlink" title="现阶段的标准"></a>现阶段的标准</h2><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fh7uc992vaj30go0a074e.jpg" alt=""></p>
<p>ES6标准发布后，module成为标准，标准使用是以export指令导出接口，以import引入模块，但是在我们一贯的node模块中，我们依然采用的是CommonJS规范，使用require引入模块，使用module.exports导出接口。</p>
<h2 id="export导出模块"><a href="#export导出模块" class="headerlink" title="export导出模块"></a>export导出模块</h2><p>export语法声明用于导出函数、对象、指定文件（或模块）的原始值。</p>
<blockquote>
<p>注意：在node中使用的是exports,不要混淆了</p>
</blockquote>
<p>export有两种模块导出方式：<strong>命名式导出（名称导出）</strong>和<strong>默认导出（定义式导出）</strong>，命名式导出每个模块可以多个，而默认导出每个模块仅一个。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125;;</div><div class="line"><span class="keyword">export</span> &#123; variable1 <span class="keyword">as</span> name1, variable2 <span class="keyword">as</span> name2, …, nameN &#125;;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1, name2, …, nameN; <span class="comment">// also var</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="comment">// also var, const</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> expression;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">name1</span>(<span class="params">…</span>) </span>&#123; … &#125; <span class="comment">// also class, function*</span></div><div class="line"><span class="keyword">export</span> &#123; name1 <span class="keyword">as</span> <span class="keyword">default</span>, … &#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> …;</div><div class="line"><span class="keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="keyword">from</span> …;</div><div class="line"><span class="keyword">export</span> &#123; import1 <span class="keyword">as</span> name1, import2 <span class="keyword">as</span> name2, …, nameN &#125; <span class="keyword">from</span> …;</div></pre></td></tr></table></figure>
<ul>
<li>name1… nameN－导出的“标识符”。导出后，可以通过这个“标识符”在另一个模块中使用import引用</li>
<li>default－设置模块的默认导出。设置后import不通过“标识符”而直接引用默认导入</li>
<li>－继承模块并导出继承模块所有的方法和属性</li>
<li>as－重命名导出“标识符”</li>
<li>from－从已经存在的模块、脚本文件…导出</li>
</ul>
<h3 id="命名式导出"><a href="#命名式导出" class="headerlink" title="命名式导出"></a>命名式导出</h3><p>模块可以通过export前缀关键词声明导出对象，导出对象可以是多个。这些导出对象用名称进行区分，称之为命名式导出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> &#123; myFunction &#125;; <span class="comment">// 导出一个已定义的函数</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="built_in">Math</span>.sqrt(<span class="number">2</span>); <span class="comment">// 导出一个常量</span></div></pre></td></tr></table></figure>
<p>我们可以使用*和from关键字来实现的模块的继承：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'article'</span>;</div></pre></td></tr></table></figure>
<p>模块导出时，可以指定模块的导出成员。导出成员可以认为是类中的公有对象，而非导出成员可以认为是类中的私有对象：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'IT笔录'</span>;</div><div class="line"><span class="keyword">var</span> domain = <span class="string">'http://itbilu.com'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="comment">&#123;name, domain&#125;</span>; <span class="comment">// 相当于导出</span></div><div class="line"><span class="comment">&#123;name:name,domain:domain&#125;</span></div></pre></td></tr></table></figure>
<p>模块导出时，我们可以使用as关键字对导出成员进行重命名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'IT笔录'</span>;</div><div class="line"><span class="keyword">var</span> domain = <span class="string">'http://itbilu.com'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;name <span class="keyword">as</span> siteName, domain&#125;;</div></pre></td></tr></table></figure>
<p>注意，下面的语法有严重错误的情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误演示</span></div><div class="line"><span class="keyword">export</span> <span class="number">1</span>; <span class="comment">// 绝对不可以</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line"><span class="keyword">export</span> a;</div></pre></td></tr></table></figure></p>
<p>export在导出接口的时候，必须与模块内部的变量具有一一对应的关系。直接导出1没有任何意义，也不可能在import的时候有一个变量与之对应</p>
<p><code>export a</code>虽然看上去成立，但是a的值是一个数字，根本无法完成解构，因此必须写成<code>export {a}</code>的形式。<strong>即使a被赋值为一个function，也是不允许的</strong>。而且，大部分风格都建议，模块中最好在末尾用一个export导出所有的接口，例如：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export &#123;<span class="function"><span class="keyword">fun</span> <span class="keyword">as</span> <span class="keyword">default</span>,a,b,c&#125;;</span></div></pre></td></tr></table></figure>
<h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><p>默认导出也被称做定义式导出。命名式导出可以导出多个值，但在在import引用时，也要使用相同的名称来引用相应的值。而默认导出每个导出只有一个单一值，这个输出可以是一个函数、类或其它类型的值，这样在模块import导入时也会很容易引用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 可以导出一个函数</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span>()</span>&#123;&#125;; <span class="comment">// 也可以出一个类</span></div></pre></td></tr></table></figure>
<h3 id="命名式导出与默认导出"><a href="#命名式导出与默认导出" class="headerlink" title="命名式导出与默认导出"></a>命名式导出与默认导出</h3><p>默认导出可以理解为另一种形式的命名导出，默认导出可以认为是使用了default名称的命名导出。</p>
<p>下面两种导出方式是等价的：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const D = 123;</div><div class="line"></div><div class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>D;</div><div class="line"><span class="builtin-name">export</span> &#123; D as<span class="built_in"> default </span>&#125;;</div></pre></td></tr></table></figure>
<h3 id="export使用示例"><a href="#export使用示例" class="headerlink" title="export使用示例"></a>export使用示例</h3><p>使用名称导出一个模块时：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "my-module.js" 模块</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x * x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> foo = <span class="built_in">Math</span>.PI + <span class="built_in">Math</span>.SQRT2;</div><div class="line"><span class="keyword">export</span> &#123; foo &#125;;</div></pre></td></tr></table></figure>
<p>在另一个模块（脚本文件）中，我们可以像下面这样引用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; cube, foo &#125; <span class="keyword">from</span> <span class="string">'my-module'</span>;</div><div class="line"><span class="built_in">console</span>.log(cube(<span class="number">3</span>)); <span class="comment">// 27</span></div><div class="line"><span class="built_in">console</span>.log(foo);    <span class="comment">// 4.555806215962888</span></div></pre></td></tr></table></figure>
<p>使用默认导出一个模块时：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "my-module.js"模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x * x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在另一个模块（脚本文件）中，我们可以像下面这样引用，相对名称导出来说使用更为简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引用 "my-module.js"模块</span></div><div class="line"><span class="keyword">import</span> cube <span class="keyword">from</span> <span class="string">'my-module'</span>;</div><div class="line"><span class="built_in">console</span>.log(cube(<span class="number">3</span>)); <span class="comment">// 27</span></div></pre></td></tr></table></figure>
<h2 id="import引入模块"><a href="#import引入模块" class="headerlink" title="import引入模块"></a>import引入模块</h2><p>import语法声明用于从已导出的模块、脚本中导入函数、对象、指定文件（或模块）的原始值。</p>
<p>import模块导入与export模块导出功能相对应，也存在两种模块导入方式：命名式导入（名称导入）和默认导入（定义式导入）。</p>
<blockquote>
<p>import的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> defaultMember from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="keyword">name</span> from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> &#123; member &#125; from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> &#123; member <span class="keyword">as</span> alias &#125; from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> &#123; member1 , member2 &#125; from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> &#123; member1 , member2 <span class="keyword">as</span> alias2 , [...] &#125; from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> defaultMember, &#123; member [ , [...] ] &#125; from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> defaultMember, * <span class="keyword">as</span> <span class="keyword">name</span> from <span class="string">"module-name"</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">"module-name"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>name－从将要导入模块中收到的导出值的名称</li>
<li>member, memberN－从导出模块，导入指定名称的多个成员</li>
<li>defaultMember－从导出模块，导入默认导出成员</li>
<li>alias, aliasN－别名，对指定导入成员进行的重命名</li>
<li>module-name－要导入的模块。是一个文件名</li>
<li>as－重命名导入成员名称（“标识符”）</li>
<li>from－从已经存在的模块、脚本文件等导入</li>
</ul>
<h3 id="命名式导入"><a href="#命名式导入" class="headerlink" title="命名式导入"></a>命名式导入</h3><p>我们可以通过指定名称，就是将这些成员插入到当作用域中。导出时，可以导入单个成员或多个成员：</p>
<p><strong>注意，花括号里面的变量与export后面的变量一一对应</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;myMember&#125; <span class="keyword">from</span> <span class="string">"my-module"</span>;</div><div class="line"><span class="keyword">import</span> &#123;foo, bar&#125; <span class="keyword">from</span> <span class="string">"my-module"</span>;</div></pre></td></tr></table></figure>
<p>通过*符号，我们可以导入模块中的全部属性和方法。当导入模块全部导出内容时，就是将导出模块（’my-module.js’）所有的导出绑定内容，插入到当前模块（’myModule’）的作用域中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">"my-module"</span>;</div></pre></td></tr></table></figure>
<p>导入模块对象时，也可以使用as对导入成员重命名，以方便在当前模块内使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;reallyReallyLongModuleMemberName <span class="keyword">as</span> shortName&#125; <span class="keyword">from</span> <span class="string">"my-module"</span>;</div></pre></td></tr></table></figure>
<p>导入多个成员时，同样可以使用别名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;reallyReallyLongModuleMemberName <span class="keyword">as</span> shortName, anotherLongModuleName <span class="keyword">as</span> short&#125; <span class="keyword">from</span> <span class="string">"my-module"</span>;</div></pre></td></tr></table></figure>
<p>导入一个模块，但不进行任何绑定：</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"my-module"</span>;</div></pre></td></tr></table></figure>
<h3 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h3><p>在模块导出时，可能会存在默认导出。同样的，在导入时可以使用import指令导出这些默认值。</p>
<p>直接导入默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> myDefault <span class="keyword">from</span> <span class="string">"my-module"</span>;</div></pre></td></tr></table></figure>
<p>也可以在命名空间导入和名称导入中，同时使用默认导入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> myDefault, * <span class="keyword">as</span> myModule <span class="keyword">from</span> <span class="string">"my-module"</span>; <span class="comment">// myModule 做为命名空间使用</span></div><div class="line">或</div><div class="line"></div><div class="line"><span class="keyword">import</span> myDefault, &#123;foo, bar&#125; <span class="keyword">from</span> <span class="string">"my-module"</span>; <span class="comment">// 指定成员导入</span></div></pre></td></tr></table></figure>
<h3 id="import使用示例"><a href="#import使用示例" class="headerlink" title="import使用示例"></a>import使用示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// --file.js--</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    callback(<span class="keyword">this</span>.responseText) </div><div class="line">  &#125;;</div><div class="line">  xhr.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</div><div class="line">  xhr.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsefulContents</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">  getJSON(url, <span class="function"><span class="params">data</span> =&gt;</span> callback(<span class="built_in">JSON</span>.parse(data)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// --main.js--</span></div><div class="line"><span class="keyword">import</span> &#123; getUsefulContents &#125; <span class="keyword">from</span> <span class="string">"file"</span>;</div><div class="line">getUsefulContents(<span class="string">"http://itbilu.com"</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</div><div class="line">  doSomethingUseful(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="default关键字"><a href="#default关键字" class="headerlink" title="default关键字"></a>default关键字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// d.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等效于：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">export</span> &#123;a <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</div></pre></td></tr></table></figure>
<p>在import的时候，可以这样用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./d'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span></div><div class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> a&#125; <span class="keyword">from</span> <span class="string">'./d'</span>;</div></pre></td></tr></table></figure>
<p>这个语法糖的好处就是import的时候，可以省去花括号{}。</p>
<p>简单的说，如果import的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的as语法。</p>
<p>所以，下面这种写法你也应该理解了吧：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $,&#123;<span class="keyword">each</span>,map&#125; <span class="keyword">from</span> <span class="string">'jquery'</span>;</div></pre></td></tr></table></figure>
<p>import后面第一个$是{defalut as $}的替代写法。</p>
<h2 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h2><p>as简单的说就是取一个别名,export中可以用，import中其实可以用：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">var</span> a = function() &#123;&#125;;</div><div class="line">export &#123;a <span class="keyword">as</span> <span class="function"><span class="keyword">fun</span>&#125;;</span></div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">import</span> &#123;<span class="function"><span class="keyword">fun</span> <span class="keyword">as</span> a&#125; from './a';</span></div><div class="line">a();</div></pre></td></tr></table></figure>
<p>上面这段代码，export的时候，对外提供的接口是fun，它是a.js内部a这个函数的别名，但是在模块外面，认不到a，只能认到fun。</p>
<p>import中的as就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了fun这个接口：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// c.js</span></div><div class="line">export function <span class="function"><span class="title">fun</span><span class="params">()</span></span> &#123;&#125;;</div></pre></td></tr></table></figure>
<p>如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。</p>
<h2 id="CommonJS中module-exports-与-exports的区别"><a href="#CommonJS中module-exports-与-exports的区别" class="headerlink" title="CommonJS中module.exports 与 exports的区别"></a>CommonJS中module.exports 与 exports的区别</h2><p><strong>Module.exports</strong> </p>
<blockquote>
<p>The module.exports object is created by the Module system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to module.exports. Note that assigning the desired object to exports will simply rebind the local exports variable, which is probably not what you want to do.</p>
<p>译文：module.exports对象是由模块系统创建的。 有时这是难以接受的；许多人希望他们的模块成为某个类的实例。 为了实现这个，需要将期望导出的对象赋值给module.exports。 注意，将期望的对象赋值给exports会简单地重新绑定到本地exports变量上，这可能不是你想要的。</p>
</blockquote>
<p><strong>Module.exports</strong></p>
<blockquote>
<p>The exports variable is available within a module’s file-level scope, and is assigned the value of module.exports before the module is evaluated. It allows a shortcut, so that module.exports.f = … can be written more succinctly as exports.f = …. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to module.exports:</p>
<p>译文：exports变量是在模块的文件级别作用域内有效的，它在模块被执行前被赋于 module.exports 的值。它有一个快捷方式，以便 module.exports.f = … 可以被更简洁地写成exports.f = …。 注意，就像任何变量，如果一个新的值被赋值给exports，它就不再绑定到module.exports(其实是exports.属性会自动挂载到没有命名冲突的module.exports.属性)</p>
</blockquote>
<p>从<a href="http://nodejs.cn/api/modules.html#modules_module_exports" target="_blank" rel="external">Api文档</a>上面的可以看出，从require导入方式去理解，关键有两个变量(全局变量module.exports，局部变量exports)、一个返回值(module.exports)</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">...</span>) </span>&#123;  </div><div class="line">  <span class="keyword">var</span> <span class="keyword">module</span> = &#123; exports: &#123;&#125; &#125;;</div><div class="line">  (<span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 你的被引入代码 Start</span></div><div class="line">    <span class="comment">// var exports = module.exports = &#123;&#125;; (默认都有的)</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">some_func</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    exports = some_func;</div><div class="line">    <span class="comment">// 此时，exports不再挂载到module.exports，</span></div><div class="line">    <span class="comment">// export将导出&#123;&#125;默认对象</span></div><div class="line">    <span class="built_in">module</span>.exports = some_func;</div><div class="line">    <span class="comment">// 此时，这个模块将导出some_func对象，覆盖exports上的some_func    </span></div><div class="line">     <span class="comment">// 你的被引入代码 End</span></div><div class="line">  &#125;)(<span class="keyword">module</span>, <span class="keyword">module</span>.exports);</div><div class="line"> // 不管是exports还是<span class="keyword">module</span>.exports，最后返回的还是<span class="keyword">module</span>.exports </div><div class="line">  return <span class="keyword">module</span>.exports;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>demo.js:</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(exports); <span class="comment">// &#123;&#125;  </span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.exports);  <span class="comment">// &#123;&#125;  </span></div><div class="line"><span class="built_in">console</span>.log(exports === <span class="built_in">module</span>.exports);    <span class="comment">// true  </span></div><div class="line"><span class="built_in">console</span>.log(exports == <span class="built_in">module</span>.exports);        <span class="comment">// true  </span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">module</span>);</div><div class="line">/**</div><div class="line"> Module &#123;</div><div class="line">  id: <span class="string">'.'</span>,</div><div class="line">  exports: &#123;&#125;,</div><div class="line">  parent: <span class="literal">null</span>,</div><div class="line">  filename: <span class="string">'/Users/larben/Desktop/demo.js'</span>,</div><div class="line">  loaded: <span class="literal">false</span>,</div><div class="line">  children: [],</div><div class="line">  paths:</div><div class="line">   [ <span class="string">'/Users/larben/Desktop/node_modules'</span>,</div><div class="line">     <span class="string">'/Users/larben/node_modules'</span>,</div><div class="line">     <span class="string">'/Users/node_modules'</span>,</div><div class="line">     <span class="string">'/node_modules'</span> ] &#125;</div><div class="line"> *<span class="regexp">/</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ol>
<li>每个js文件一创建，都有一个var exports = module.exports = {},使exports和module.exports都指向一个空对象。</li>
<li>module.exports和exports所指向的内存地址相同</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u9d2ixbj308c08bdfs.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么有模块概念&quot;&gt;&lt;a href=&quot;#为什么有模块概念&quot; class=&quot;headerlink&quot; title=&quot;为什么有模块概念&quot;&gt;&lt;/a&gt;为什么有模块概念&lt;/h2&gt;&lt;p&gt;理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。&lt;/p&gt;
&lt;p&gt;但是，Javascript不是一种模块化编程语言，在es6以前，它是不支持”类”（class），所以也就没有”模块”（module）了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
      <category term="es-2015" scheme="http://meiminjun.github.io/tags/es-2015/"/>
    
      <category term="require" scheme="http://meiminjun.github.io/tags/require/"/>
    
      <category term="import" scheme="http://meiminjun.github.io/tags/import/"/>
    
      <category term="export" scheme="http://meiminjun.github.io/tags/export/"/>
    
  </entry>
  
  <entry>
    <title>javascript深入浅出系列-Array 之 实例方法汇总</title>
    <link href="http://meiminjun.github.io/javascript-array-%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>http://meiminjun.github.io/javascript-array-实例方法汇总/</id>
    <published>2017-06-23T21:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h1><p><strong>valueOf()</strong>返回数组本身</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</div><div class="line">arr.valueOf();  // (<span class="number">3</span>) [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]</div></pre></td></tr></table></figure>
<h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h1><p><strong>toString()</strong>返回数组的字符串形式,<strong>注意，该方法不改变原数组</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>]</div><div class="line">arr.<span class="keyword">toString</span>(); <span class="comment">// 1,2,3</span></div></pre></td></tr></table></figure>
<h1 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h1><p>join方法以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默认用逗号分隔,注意，该方法不改变原数组</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line">a.<span class="keyword">join</span>(<span class="string">' '</span>) <span class="comment">// '1 2 3 4'</span></div><div class="line">a.<span class="keyword">join</span>(<span class="string">' | '</span>) <span class="comment">// "1 | 2 | 3 | 4"</span></div><div class="line">a.<span class="keyword">join</span>() <span class="comment">// "1,2,3,4"</span></div></pre></td></tr></table></figure>
<p>与之对应的字符串转换成数组的方法是<code>split</code></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"1|2|3|4"</span>.<span class="built_in">split</span>(<span class="string">"|"</span>)<span class="comment"> // [1,2,3,4]</span></div></pre></td></tr></table></figure>
<p>如果数组成员是undefined或null或空位，会被转成空字符串</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[undefined, <span class="keyword">null</span>].<span class="keyword">join</span>(<span class="string">'#'</span>)</div><div class="line"><span class="comment">// '#'</span></div><div class="line"></div><div class="line">[<span class="string">'a'</span>,, <span class="string">'b'</span>].<span class="keyword">join</span>(<span class="string">'-'</span>)</div><div class="line"><span class="comment">// 'a--b'</span></div></pre></td></tr></table></figure>
<p>通过call方法，这个方法也可以用于字符串</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array<span class="selector-class">.prototype</span><span class="selector-class">.join</span><span class="selector-class">.call</span>(<span class="string">'hello'</span>, <span class="string">'-'</span>)</div><div class="line"><span class="comment">// "h-e-l-l-o"</span></div></pre></td></tr></table></figure>
<p>join方法也可以用于类似数组的对象</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, length: <span class="number">2</span> &#125;;</div><div class="line"><span class="built_in">Array</span>.prototype.<span class="keyword">join</span>.call(obj, <span class="string">'-'</span>)</div><div class="line"><span class="comment">// 'a-b'</span></div></pre></td></tr></table></figure>
<h1 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h1><p>concat方法用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一个新数组，原数组不变</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'hello'</span>].concat([<span class="string">'world'</span>])</div><div class="line">// [<span class="string">"hello"</span>, <span class="string">"world"</span>]</div><div class="line"></div><div class="line">[<span class="string">'hello'</span>].concat([<span class="string">'world'</span>], [<span class="string">'!'</span>])</div><div class="line">// [<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"!"</span>]</div></pre></td></tr></table></figure>
<p>除了接受数组作为参数，concat也可以接受其他类型的值作为参数。它们会作为新的元素，添加数组尾部</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat(<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>])</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat([<span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>])</div></pre></td></tr></table></figure>
<p>如果不提供参数，concat方法返回当前数组的一个浅拷贝。所谓“浅拷贝”，指的是如果数组成员包括复合类型的值（比如对象），则新数组拷贝的是该值的引用</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; a:<span class="type">1 </span>&#125;;</div><div class="line"><span class="keyword">var</span> oldArray = [obj];</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Array</span> = oldArray.concat();</div><div class="line"></div><div class="line">obj.a = <span class="number">2</span>;</div><div class="line"><span class="keyword">new</span><span class="type">Array</span>[<span class="number">0</span>].a <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>上面代码中，原数组包含一个对象，concat方法生成的新数组包含这个对象的引用。所以，改变原对象以后，新数组跟着改变。事实上，只要原数组的成员中包含对象，concat方法不管有没有参数，总是返回该对象的引用</p>
<p>concat方法也可以用于将对象合并为数组，但是必须借助call方法</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[]<span class="selector-class">.concat</span><span class="selector-class">.call</span>(&#123;<span class="selector-tag">a</span>: <span class="number">1</span>&#125;, &#123;<span class="selector-tag">b</span>: <span class="number">2</span>&#125;)</div><div class="line"><span class="comment">// [&#123; a: 1 &#125;, &#123; b: 2 &#125;]</span></div><div class="line"></div><div class="line">[]<span class="selector-class">.concat</span><span class="selector-class">.call</span>(&#123;<span class="selector-tag">a</span>: <span class="number">1</span>&#125;, [<span class="number">2</span>])</div><div class="line"><span class="comment">// [&#123;a: 1&#125;, 2]</span></div><div class="line"></div><div class="line">[<span class="number">2</span>].concat(&#123;<span class="selector-tag">a</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="comment">// [2, &#123;a: 1&#125;]</span></div></pre></td></tr></table></figure>
<h1 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h1><p><strong>push</strong>方法用于在数组的末端添加一个或多个元素，<strong>并返回添加新元素后的数组长度。注意，该方法会改变原数组</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> arr = []</div><div class="line"><span class="selector-tag">a</span>.push(<span class="number">1</span>) <span class="comment">// 返回的是数组长度:1，  arr:[1]</span></div><div class="line"><span class="selector-tag">a</span>.push(<span class="string">'a'</span>) <span class="comment">// 返回的是数组长度:2，  arr:[1, 'a']</span></div></pre></td></tr></table></figure>
<p>上面代码使用push方法，先后往数组中添加了2个成员。</p>
<p>如果需要合并两个数组，可以这样写</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">var b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"></div><div class="line">Array.prototype.push.apply(a, b) <span class="comment">// 返回：6， a: [1,2,3,4,5,6]</span></div><div class="line"><span class="comment">// 或者</span></div><div class="line">a.push.apply(a, b)  <span class="comment">// 返回：6， a: [1,2,3,4,5,6]</span></div><div class="line"><span class="comment">// 或者使用</span></div><div class="line">a.concat(b) <span class="comment">// 注意concat直接返回合并之后的数组，不改变原有数组</span></div><div class="line"></div><div class="line"><span class="comment">// 上面两种写法等同于</span></div><div class="line">a.push(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line"></div><div class="line">a <span class="comment">// [1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure>
<h1 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h1><p><strong>pop</strong>方法用于删除数组的最后一个元素，<strong>并返回该元素。注意，该方法会改变原数组</strong></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>];</div><div class="line"></div><div class="line">a.pop() <span class="regexp">//</span> <span class="string">'3'</span></div><div class="line">a <span class="regexp">//</span> [<span class="string">'1'</span>, <span class="string">'2'</span>]</div></pre></td></tr></table></figure>
<p>对空数组使用pop方法，不会报错，而是返回undefined</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[]</span><span class="selector-class">.pop</span>() <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<blockquote>
<p>push和pop结合使用，就构成了“后进先出”的栈结构（stack）</p>
</blockquote>
<h1 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h1><p><strong>shift</strong>方法用于删除数组的第一个元素，<strong>并返回该元素。注意，该方法会改变原数组</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"></div><div class="line">arr.shift() <span class="comment">// 返回删除的数组：1</span></div><div class="line">console.log(arr) <span class="comment">// [2,3]</span></div><div class="line"></div><div class="line">var <span class="type">list</span> = []</div><div class="line"><span class="type">list</span>.shift() <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>对空数组使用shift方法，不会报错，而是返回undefined</p>
<p>shift方法可以清空一个数组</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">var item;</div><div class="line"></div><div class="line">while (item = arr.shift()) &#123;</div><div class="line">  console.log(item);</div><div class="line">&#125;</div><div class="line"></div><div class="line">arr <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p><strong>push</strong> 和 <strong>shift</strong>结合使用，就构成了“先进先出”的队列结构（queue）。</p>
<h1 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h1><p><strong>unshift</strong>方法用于在数组的第一个位置添加元素，<strong>并返回添加新元素后的数组长度。注意，该方法会改变原数组</strong></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"></div><div class="line">a.unshift(<span class="string">'x'</span>); <span class="regexp">//</span> <span class="number">4</span></div><div class="line">a <span class="regexp">//</span> [<span class="string">'x'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div></pre></td></tr></table></figure>
<p>unshift方法可以在数组头部添加多个元素</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [ <span class="string">'c'</span>, <span class="string">'d'</span> ];</div><div class="line">arr.unshift(<span class="string">'a'</span>, <span class="string">'b'</span>) <span class="regexp">//</span> <span class="number">4</span></div><div class="line">arr <span class="regexp">//</span> [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span> ]</div></pre></td></tr></table></figure>
<p>如果合并数组可以这么写</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"></div><div class="line">Array<span class="selector-class">.prototype</span><span class="selector-class">.unshift</span><span class="selector-class">.apply</span>(arr,[<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 返回数组长度：4 , arr: [1,2,3,4]</span></div><div class="line">或者</div><div class="line">Array<span class="selector-class">.prototype</span><span class="selector-class">.unshift</span><span class="selector-class">.call</span>(arr,<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回数组长度：4 , arr: [1,2,3,4]</span></div><div class="line">或者</div><div class="line">arr.unshift(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">或者</div><div class="line">arr<span class="selector-class">.unshift</span><span class="selector-class">.apply</span>(arr,[<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 返回数组长度：4 , arr: [1,2,3,4]</span></div><div class="line">或者</div><div class="line">arr<span class="selector-class">.unshift</span><span class="selector-class">.call</span>(arr,<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回数组长度：4 , arr: [1,2,3,4]</span></div></pre></td></tr></table></figure>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h1><p><strong>reverse</strong>方法用于颠倒数组中元素的顺序，<strong>返回改变后的数组。注意，该方法将改变原数组</strong></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">a.reverse() // [<span class="string">"c"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>]</div><div class="line">a // [<span class="string">"c"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>]</div></pre></td></tr></table></figure>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h1><p><strong>slice</strong>方法用于提取原数组的一部分，<strong>注意：返回一个新数组，原数组不变</strong></p>
<p>它的第一个参数为起始位置（从0开始），第二个参数为终止位置（<strong>但该位置的元素本身不包括在内</strong>）。如果省略第二个参数，则一直返回到原数组的最后一个成员</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>.slice(<span class="number">0</span>) <span class="comment">// ["a", "b", "c"]</span></div><div class="line"><span class="selector-tag">a</span>.slice(<span class="number">1</span>) <span class="comment">// ["b", "c"]</span></div><div class="line"><span class="selector-tag">a</span>.slice(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// ["b"]</span></div><div class="line"><span class="selector-tag">a</span>.slice(<span class="number">2</span>, <span class="number">6</span>) <span class="comment">// ["c"]</span></div><div class="line"><span class="selector-tag">a</span>.slice() <span class="comment">// ["a", "b", "c"]</span></div></pre></td></tr></table></figure>
<p><strong>上面代码中，最后一个例子slice没有参数，实际上等于返回一个原数组的拷贝。</strong></p>
<p>如果slice方法的参数是负数，则表示倒数计算的位置</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>];</div><div class="line">a.slice(<span class="number">-2</span>) // [<span class="string">"2"</span>, <span class="string">"3"</span>]</div><div class="line">a.slice(<span class="number">-2</span>, <span class="number">-1</span>) // [<span class="string">"2"</span>]</div></pre></td></tr></table></figure>
<p><strong>上面代码中，-2表示倒数计算的第二个位置，-1表示倒数计算的第一个位置。</strong></p>
<p>如果参数值大于数组成员的个数，或者第二个参数小于第一个参数，则返回空数组。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">a.slice<span class="comment">(4)</span> <span class="comment">// []</span></div><div class="line">a.slice<span class="comment">(2, 1)</span> <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p>slice方法的一个重要应用，是将类似数组的对象转为真正的数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.slice.call(&#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="attr">length</span>: <span class="number">2</span> &#125;)</div><div class="line"><span class="comment">// ['a', 'b']</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">"div"</span>));</div><div class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将方法参数转换成数组</span></div></pre></td></tr></table></figure>
<p>上面代码的参数都不是数组，但是通过call方法，在它们上面调用slice方法，就可以把它们转为真正的数组</p>
<h1 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h1><p><strong>splice</strong>方法对原数组进行增删改操作，用于删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组</p>
<p><strong>splice</strong>的第一个参数是删除的起始位置(包含此删除位置)，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入数组的新元素</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</div><div class="line">a.splice(<span class="number">4</span>, <span class="number">2</span>) // [<span class="string">"e"</span>, <span class="string">"f"</span>]</div><div class="line">a // [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</div></pre></td></tr></table></figure>
<p>上面代码从原数组4号位置，删除了两个数组成员</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</div><div class="line">a.splice(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>) // [<span class="string">"e"</span>, <span class="string">"f"</span>]</div><div class="line">a // [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="number">1</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure>
<p>上面代码除了删除成员，还插入了两个新成员</p>
<p>起始位置如果是负数(负几就是倒数第几)，就表示从倒数位置开始删除</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</div><div class="line">a.splice(<span class="number">-4</span>,<span class="number">2</span>) // [<span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">a // [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</div></pre></td></tr></table></figure>
<p>上面代码表示，从倒数第四个位置c开始删除两个成员</p>
<p>如果只是单纯地插入元素，splice方法的第二个参数可以设为0</p>
<blockquote>
<p>第一个参数就是要插入的索引位置</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];</div><div class="line"></div><div class="line">a.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">// []</span></div><div class="line">a <span class="comment">// [1, 2, 1, 1] // 插入到索引1的位置</span></div><div class="line"></div><div class="line"></div><div class="line">var a = ['a', 'b', 'c']</div><div class="line"></div><div class="line">a.splice(a.length,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">// []</span></div><div class="line">a <span class="comment">// ["a", "b", "c", 2, 3, 4, 5]</span></div><div class="line"></div><div class="line">相当于</div><div class="line">a.push(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">a <span class="comment">// ["a", "b", "c", 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<p>如果只提供第一个参数，等同于将原数组在指定位置拆分成两个数组</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">a.splice(<span class="number">2</span>) <span class="comment">// [3, 4]</span></div><div class="line">a <span class="comment">// [1, 2]</span></div></pre></td></tr></table></figure>
<p>更多<a href="https://meiminjun.github.io/javascript-arr-splice">请参考</a></p>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h1><p>sort方法对数组成员进行排序，默认是按照字典顺序排序。<strong>注意，排序后，原数组将被改变</strong></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>].sort()</div><div class="line">// [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line"></div><div class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].sort()</div><div class="line">// [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line">[<span class="number">11</span>, <span class="number">101</span>].sort()</div><div class="line">// [<span class="number">101</span>, <span class="number">11</span>]</div><div class="line"></div><div class="line">[<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort()</div><div class="line">// [<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>]</div></pre></td></tr></table></figure>
<p>上面代码的最后两个例子，需要特殊注意。sort方法不是按照大小排序，而是按照对应字符串的字典顺序排序。也就是说，数值会被先转成字符串，再按照字典顺序进行比较，所以101排在11的前面。</p>
<p>如果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元素后面；其他情况下，都是第一个元素排在第二个元素前面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[<span class="number">10111</span>, <span class="number">1101</span>, <span class="number">111</span>].sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// [111, 1101, 10111]</span></div><div class="line"></div><div class="line">[</div><div class="line">  &#123; <span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</div><div class="line">  &#123; <span class="attr">name</span>: <span class="string">"李四"</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;,</div><div class="line">  &#123; <span class="attr">name</span>: <span class="string">"王五"</span>, <span class="attr">age</span>: <span class="number">28</span>  &#125;</div><div class="line">].sort(<span class="function"><span class="keyword">function</span> (<span class="params">o1, o2</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> o1.age - o2.age;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// [</span></div><div class="line"><span class="comment">//   &#123; name: "李四", age: 24 &#125;,</span></div><div class="line"><span class="comment">//   &#123; name: "王五", age: 28  &#125;,</span></div><div class="line"><span class="comment">//   &#123; name: "张三", age: 30 &#125;</span></div><div class="line"><span class="comment">// ]</span></div></pre></td></tr></table></figure>
<h1 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h1><p><strong>map</strong>方法对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组,<strong>注意，原数组不发生改变</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line">numbers.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [2, 3, 4]</span></div><div class="line"></div><div class="line">numbers</div><div class="line"><span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>上面代码中，numbers数组的所有成员都加上1，组成一个新数组返回</p>
<p>map方法接受一个函数作为参数。该函数调用时，map方法会将其传入三个参数，分别是<strong>当前成员、当前位置索引和数组本身</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> elem * index;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [0, 2, 6]</span></div></pre></td></tr></table></figure>
<p>上面代码中，map方法的回调函数的三个参数之中，elem为当前成员的值，index为当前成员的位置，arr为原数组（[1, 2, 3]）</p>
<p>map方法不仅可以用于数组，还可以用于字符串，用来遍历字符串的每个字符。但是，不能直接使用，而要通过函数的call方法间接使用，或者先将字符串转为数组，然后使用</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">upper</span> = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> x.toUpperCase();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[].map.call(<span class="string">'abc'</span>, <span class="built_in">upper</span>)</div><div class="line">// [ <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span> ]</div><div class="line"></div><div class="line">// 或者</div><div class="line"><span class="string">'abc'</span>.split(<span class="string">''</span>).map(<span class="built_in">upper</span>)</div><div class="line">// [ <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span> ]</div></pre></td></tr></table></figure>
<p>其他类似数组的对象（比如document.querySelectorAll方法返回DOM节点集合），也可以用上面的方法遍历。</p>
<p>map方法还可以接受第二个参数，表示回调函数执行时this所指向的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[e];</div><div class="line">&#125;, arr)</div><div class="line"><span class="comment">// ['b', 'c']</span></div></pre></td></tr></table></figure>
<p>上面代码通过map方法的第二个参数，将回调函数内部的this对象，指向arr数组</p>
<p>如果数组有空位，map方法的回调函数在这个位置不会执行，会跳过数组的空位</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123; <span class="keyword">return</span> n + <span class="number">1</span> &#125;;</div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>].map(f) <span class="comment">// [2, NaN, 3]</span></div><div class="line">[<span class="number">1</span>, <span class="literal">null</span>, <span class="number">2</span>].map(f) <span class="comment">// [2, 1, 3]</span></div><div class="line">[<span class="number">1</span>, , <span class="number">2</span>].map(f) <span class="comment">// [2, , 3]</span></div></pre></td></tr></table></figure>
<p>上面代码中，map方法不会跳过undefined和null，但是会跳过空位。</p>
<p>下面的例子会更清楚地说明这一点</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>(<span class="number">2</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'enter...'</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// [, ,]</span></div></pre></td></tr></table></figure>
<p>上面代码中，map方法根本没有执行，直接返回了Array(2)生成的空数组</p>
<h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h1><p>forEach方法与map方法很相似，也是遍历数组的所有成员，执行某种操作，但是forEach方法一般不返回值，只用来操作数据。如果需要有返回值，一般使用map方法</p>
<p>forEach方法的参数与map方法一致，也是一个函数，数组的所有成员会依次执行该函数。它接受三个参数，分别是当前位置的值、当前位置的编号和整个数组</p>
<p>上面代码中，forEach遍历数组不是为了得到返回值，而是为了在屏幕输出内容，所以应该使用forEach方法，而不是map方法，虽然后者也可以实现同样目的。</p>
<p>forEach方法也可以接受第二个参数，用来绑定回调函数的this关键字</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">out</span> = [];</div><div class="line"></div><div class="line">[<span class="meta">1, 2, 3</span>].forEach(function(elem) &#123;</div><div class="line">  <span class="keyword">this</span>.push(elem * elem);</div><div class="line">&#125;, <span class="keyword">out</span>);</div><div class="line"></div><div class="line"><span class="keyword">out</span> <span class="comment">// [1, 4, 9]</span></div></pre></td></tr></table></figure>
<p>上面代码中，空数组out是forEach方法的第二个参数，结果，回调函数内部的this关键字就指向out。这个参数对于多层this非常有用，因为多层this通常指向是不一致的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">'张三'</span>,</div><div class="line">  times: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">  print: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.print()</div><div class="line"><span class="comment">// 没有任何输出</span></div></pre></td></tr></table></figure>
<p>上面代码中，obj.print方法有两层this，它们的指向是不一致的。外层的this.times指向obj对象，内层的this.name指向顶层对象window（详细解释参见《面向对象编程》一章）。这显然是违背原意的，解决方法就是使用forEach方法的第二个参数固定this</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  name: <span class="string">'张三'</span>,</div><div class="line">  times: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">  print: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.times.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;, <span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.print()</div><div class="line"><span class="comment">// 张三</span></div><div class="line"><span class="comment">// 张三</span></div><div class="line"><span class="comment">// 张三</span></div></pre></td></tr></table></figure>
<p>注意，forEach方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用for循环</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">length</span>; i++) &#123;</div><div class="line">  <span class="keyword">if</span> (arr[i] === <span class="number">2</span>) <span class="built_in">break</span>;</div><div class="line">  console.<span class="built_in">log</span>(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，执行到数组的第二个成员时，就会中断执行。forEach方法做不到这一点</p>
<p>forEach方法与map方法一样会跳过数组的空位，forEach方法不会跳过undefined和null，代码如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">log</span> = function (<span class="keyword">n</span>) &#123;</div><div class="line"> console.<span class="built_in">log</span>(<span class="keyword">n</span> + 1);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[1, undefined, 2].<span class="keyword">forEach</span>(<span class="keyword">log</span>)</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// NaN</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line">[1, null, 2].<span class="keyword">forEach</span>(<span class="keyword">log</span>)</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line">[1, , 2].<span class="keyword">forEach</span>(<span class="keyword">log</span>)</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>forEach方法也可以用于类似数组的对象和字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="number">0</span>: <span class="number">1</span>,</div><div class="line">  a: <span class="string">'hello'</span>,</div><div class="line">  length: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.forEach.call(obj, <span class="function"><span class="keyword">function</span> (<span class="params">elem, i</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( i + <span class="string">':'</span> + elem);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0:1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">Array</span>.prototype.forEach.call(str, <span class="function"><span class="keyword">function</span> (<span class="params">elem, i</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( i + <span class="string">':'</span> + elem);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0:h</span></div><div class="line"><span class="comment">// 1:e</span></div><div class="line"><span class="comment">// 2:l</span></div><div class="line"><span class="comment">// 3:l</span></div><div class="line"><span class="comment">// 4:o</span></div></pre></td></tr></table></figure>
<p>上面代码中，obj是一个类似数组的对象，forEach方法可以遍历它的数字键。forEach方法也可以遍历字符串</p>
<h1 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h1><p>filter方法的参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成一个新数组返回。<strong>注意，该方法不会改变原数组</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(function (elem) &#123;</div><div class="line">  return (elem &gt; <span class="number">3</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// [4, 5]</span></div></pre></td></tr></table></figure>
<p>上面代码将大于3的原数组成员，作为一个新数组返回</p>
<p>filter方法的参数函数可以接受三个参数，第一个参数是当前数组成员的值，这是必需的，后两个参数是可选的，分别是当前数组成员的位置和整个数组</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].filter(function (elem, index, arr) &#123;</div><div class="line">  return index % <span class="number">2</span> === <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [1, 3, 5]</span></div></pre></td></tr></table></figure>
<p>上面代码返回偶数位置的成员组成的新数组</p>
<p>filter方法还可以接受第二个参数，指定测试函数所在的上下文对象（即this对象）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Obj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.MAX = <span class="number">3</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (item &gt; <span class="keyword">this</span>.MAX) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>];</div><div class="line">arr.filter(myFilter, <span class="keyword">new</span> Obj())</div><div class="line"><span class="comment">// [8, 4, 9]</span></div></pre></td></tr></table></figure>
<p>上面代码中，测试函数myFilter内部有this对象，它可以被filter方法的第二个参数绑定。上例中，myFilter的this绑定了Obj对象的实例，返回大于3的成员</p>
<h1 id="some-，every"><a href="#some-，every" class="headerlink" title="some()，every()"></a>some()，every()</h1><p>它们接受一个函数作为参数，所有数组成员依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和整个数组</p>
<p>some方法是只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr.<span class="keyword">some</span>(<span class="keyword">function</span> <span class="title"></span>(elem, index, arr) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">elem</span> &gt;= <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line">// <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>上面代码表示，如果存在大于等于3的数组成员，就返回true</p>
<p>every方法则是所有数组成员的返回值都是true，才返回true，否则false</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr.every(function (elem, index, arr) &#123;</div><div class="line">  return elem &gt;= <span class="number">3</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>上面代码表示，只有所有数组成员大于等于3，才返回true</p>
<p>注意，对于空数组，some方法返回false，every方法返回true，回调函数都不会执行</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">isEven</span>(x) &#123; <span class="keyword">return</span> <span class="type">x</span> % <span class="number">2</span> === <span class="number">0</span> &#125;</div><div class="line"></div><div class="line">[].<span class="keyword">some</span>(isEven) // <span class="literal">false</span></div><div class="line">[].every(isEven) // <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>some和every方法还可以接受第二个参数，用来绑定函数中的this关键字</p>
<h1 id="reduce-，reduceRight"><a href="#reduce-，reduceRight" class="headerlink" title="reduce()，reduceRight()"></a><a href="https://meiminjun.github.io/javascript-array-reduce">reduce()，reduceRight()</a></h1><p>reduce方法和reduceRight方法依次处理数组的每个成员，最终累计为一个值</p>
<p>它们的差别是，reduce是从左到右处理（从第一个成员到最后一个成员），reduceRight则是从右到左（从最后一个成员到第一个成员），其他完全一样</p>
<p>这两个方法的第一个参数都是一个函数。该函数接受以下四个参数</p>
<ol>
<li>累积变量，默认为数组的第一个成员</li>
<li>当前变量，默认为数组的第二个成员</li>
<li>当前位置（从0开始）</li>
<li>原数组</li>
</ol>
<p>这四个参数之中，只有前两个是必须的，后两个则是可选的</p>
<p>下面的例子求数组成员之和</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x, y)</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 1 2</span></div><div class="line"><span class="comment">// 3 3</span></div><div class="line"><span class="comment">// 6 4</span></div><div class="line"><span class="comment">// 10 5</span></div><div class="line"><span class="comment">//最后结果：15</span></div></pre></td></tr></table></figure>
<p>上面代码中，第一轮执行，x是数组的第一个成员，y是数组的第二个成员。从第二轮开始，x为上一轮的返回值，y为当前数组成员，直到遍历完所有成员，返回最后一轮计算后的x</p>
<p>利用reduce方法，可以写一个数组求和的sum方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">partial, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> partial + value;</div><div class="line">  &#125;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>].sum()</div><div class="line"><span class="comment">// 28</span></div></pre></td></tr></table></figure>
<p>如果要对累积变量指定初值，可以把它放在reduce方法和reduceRight方法的第二个参数</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].reduce(function(x, y)&#123;</div><div class="line">  return x + y;</div><div class="line">&#125;, <span class="number">10</span>);</div><div class="line"><span class="comment">// 25</span></div></pre></td></tr></table></figure>
<p>上面代码指定参数x的初值为10，所以数组从10开始累加，最终结果为25。注意，这时y是从数组的第一个成员开始遍历</p>
<p>第二个参数相当于设定了默认值，处理空数组时尤其有用</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(prev, cur)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">  return prev + cur;</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">[].<span class="title">reduce</span><span class="params">(<span class="keyword">add</span>)</span></span></div><div class="line"><span class="function">// <span class="title">TypeError</span>:</span> Reduce <span class="keyword">of</span> <span class="keyword">empty</span> <span class="keyword">array</span> <span class="keyword">with</span> no initial value</div><div class="line">[].reduce(<span class="keyword">add</span>, <span class="number">1</span>)</div><div class="line"><span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>上面代码中，由于空数组取不到初始值，reduce方法会报错。这时，加上第二个参数，就能保证总是会返回一个值</p>
<p>下面是一个reduceRight方法的例子</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function substract(prev, cur) &#123;</div><div class="line">  return prev - cur;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].reduce(substract) <span class="comment">// 0</span></div><div class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>].reduceRight(substract) <span class="comment">// -4</span></div></pre></td></tr></table></figure>
<p>上面代码中，reduce方法相当于3减去2再减去1，reduceRight方法相当于1减去2再减去3</p>
<p>由于reduce方法依次处理每个元素，所以实际上还可以用它来搜索某个元素。比如，下面代码是找出长度最长的数组元素</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongest</span><span class="params">(entries)</span> &#123;</span></div><div class="line">  <span class="keyword">return</span> entries.reduce(<span class="function"><span class="keyword">function</span> <span class="params">(longest, entry)</span> &#123;</span></div><div class="line">    <span class="keyword">return</span> entry.<span class="built_in">length</span> &gt; longest.<span class="built_in">length</span> ? entry : longest;</div><div class="line">  &#125;, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">findLongest([<span class="string">'aaa'</span>, <span class="string">'bb'</span>, <span class="string">'c'</span>]) <span class="comment">// "aaa"</span></div></pre></td></tr></table></figure>
<h1 id="indexOf-lastIndexOf"><a href="#indexOf-lastIndexOf" class="headerlink" title="indexOf(),lastIndexOf()"></a>indexOf(),lastIndexOf()</h1><p>indexOf 方法返回给定元素在数组中第一次出现的位置索引，如果没有返回则返回-1,<strong>注意，包含索引位置</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">12</span>]</div><div class="line">a.indexOf(<span class="number">32</span>) <span class="comment">// 5</span></div><div class="line">a.indexOf(<span class="number">11</span>) <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>indexOf 方法可以接受第二个参数，表示开始搜索的位置（<strong>返回的值还是相对于原来数组的索引位置,不是从开始搜索位置的索引</strong>）</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">12</span>]</div><div class="line">a.indexOf(<span class="number">2</span>,<span class="number">2</span>) <span class="comment">// -1</span></div><div class="line">a.indexOf(<span class="number">32</span>,<span class="number">2</span>) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>上面代码从1号位置开始搜索字符a，结果为-1，表示没有搜索到</p>
<p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</div><div class="line">a.lastIndexOf(<span class="number">3</span>) <span class="comment">// 6</span></div><div class="line">a.lastIndexOf(<span class="number">33</span>) <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>注意，如果数组中包含NaN，这两个方法不适用，即无法确定数组成员是否包含NaN</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></div><div class="line">[<span class="literal">NaN</span>].lastIndexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></div></pre></td></tr></table></figure>
<p>这是因为这两个方法内部，使用严格相等运算符（===）进行比较，而NaN是唯一一个不等于自身的值</p>
<h1 id="from"><a href="#from" class="headerlink" title="from()"></a>from()</h1><p>Array.from() 方法从一个类似数组或可迭代的对象中重新创建一个新的数组实例，<strong>注意：返回一个新数组，原数组不变</strong></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bar = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="keyword">var</span> i = <span class="type">Array</span>.<span class="keyword">from</span>(bar); // [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</div><div class="line">bar === i // <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="type">Array</span>.<span class="keyword">from</span>('foo');</div><div class="line">// [<span class="string">"f"</span>, <span class="string">"o"</span>, <span class="string">"o"</span>]</div></pre></td></tr></table></figure>
<p>将NodeList 转化成 Array</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> divs = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>));</div><div class="line"></div><div class="line"><span class="comment">// Array[232] (every DIV on the page)</span></div></pre></td></tr></table></figure>
<p>将 arguments 转化成 Array</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">something</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Array['yes', 1, &#123;&#125;]</span></div><div class="line">&#125;</div><div class="line">something(<span class="string">'yes'</span>, <span class="number">1</span>, &#123;&#125;);</div></pre></td></tr></table></figure>
<p>将 String 转化成 Array</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Array.from(<span class="string">'JavaScript'</span>); <span class="regexp">//</span> 很像<span class="string">'JavaScript'</span>.split(<span class="string">''</span>)</div><div class="line"></div><div class="line"><span class="regexp">//</span> [<span class="string">"J"</span>, <span class="string">"a"</span>, <span class="string">"v"</span>, <span class="string">"a"</span>, <span class="string">"S"</span>, <span class="string">"c"</span>, <span class="string">"r"</span>, <span class="string">"i"</span>, <span class="string">"p"</span>, <span class="string">"t"</span>]</div></pre></td></tr></table></figure>
<p>与箭头函数搭配使用</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x);      </div><div class="line"><span class="comment">// [2, 4, 6]</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.from(&#123;length: <span class="number">5</span>&#125;, <span class="function">(<span class="params">v, i</span>) =&gt;</span> i);</div><div class="line"><span class="comment">// [0, 1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<p>from 方法的第二个参数为可选参数，如果指定了该参数，则最后生成的数组会经过该函数的加工处理后再返回</p>
<p>如果传入第三个参数，执行第二个参数时，改变this 的指向</p>
<h1 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h1><p>上面这些数组方法之中，有不少返回的还是数组，所以可以链式使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> users = [</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">'tom'</span>, <span class="attr">email</span>: <span class="string">'tom@example.com'</span>&#125;,</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">'peter'</span>, <span class="attr">email</span>: <span class="string">'peter@example.com'</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line">users</div><div class="line">.map(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> user.email;</div><div class="line">&#125;)</div><div class="line">.filter(<span class="function"><span class="keyword">function</span> (<span class="params">email</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/^t/</span>.test(email);</div><div class="line">&#125;)</div><div class="line">.forEach(alert);</div><div class="line"><span class="comment">// 弹出tom@example.com</span></div></pre></td></tr></table></figure>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>改变的原数组的几个方法，除此之外都不是：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>reverse()</li>
<li>splice()</li>
<li>sort()</li>
</ul>
<p>不改变原数组：</p>
<ul>
<li>join()</li>
<li>toString()</li>
<li>concat()</li>
<li>slice()</li>
<li>map()</li>
<li>forEach()</li>
<li>filter()</li>
<li>some()</li>
<li>every()</li>
<li>reduce()</li>
<li>reduceRight()</li>
<li>indexOf()</li>
<li>lastIndexOf()</li>
<li>from()</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;valueOf-NaN&quot;&gt;&lt;a href=&quot;#valueOf-NaN&quot; class=&quot;headerlink&quot; title=&quot;valueOf()&quot;&gt;&lt;/a&gt;valueOf()&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;valueOf()&lt;/strong&gt;返回数组本身&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript深入浅出系列-es6-编写现代Javascript代码</title>
    <link href="http://meiminjun.github.io/javascript-%E7%BC%96%E5%86%99%E7%8E%B0%E4%BB%A3Javascript%E4%BB%A3%E7%A0%81/"/>
    <id>http://meiminjun.github.io/javascript-编写现代Javascript代码/</id>
    <published>2017-06-01T19:20:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p>原文： <a href="https://dev.to/scastiel/writing-modern-javascript-code" target="_blank" rel="external">https://dev.to/scastiel/writing-modern-javascript-code</a></p>
<h1 id="编写现代Javascript代码"><a href="#编写现代Javascript代码" class="headerlink" title="编写现代Javascript代码"></a>编写现代Javascript代码</h1><p>记得以前Javascript还处于是一种改变页面元素的语言？这些日子已经过去了，每种语言随着时间的推移而发展，我们使用它们也是如此，看看你一两年前写的代码：你不感到羞愧吗？如果是，这篇帖子就是写给你的<br>🙂</p>
<p>在这篇文章里，我会尝试这里列出一些很好的做法，使您的JavaScript代码更容易编写，阅读和维护</p>
<h1 id="使用可以格式化代码的linter"><a href="#使用可以格式化代码的linter" class="headerlink" title="使用可以格式化代码的linter"></a>使用可以格式化代码的linter</h1><p>第一个建议是使用一个代码linter,他会检查你的每一行代码是否遵守统一规则，特别是几个开发人员协同开发一个项目的时候：缩减，括号中的空格，将==替换为===…</p>
<p>但更重要的是，尽可能让您的linter自动修复您的代码。 ESLint非常好（使用–fix选项），它与所有主要的IDE集成，可以在保存时自动修复文件。</p>
<p>您也可以使用更为专注于格式化的“漂亮”，而不是检查，但结果基本相同😉</p>
<p>下一点将帮助你选择你的linter使用的规则:</p>
<h1 id="为你的linter使用现代规则"><a href="#为你的linter使用现代规则" class="headerlink" title="为你的linter使用现代规则"></a>为你的linter使用现代规则</h1><p>如果您想知道您的代码需要什么规则，这里有一个提示:StandardJS.<br>这是一个非常严格的linter,不会在规则中给您任何选择，但是它们中的每一个都越来越被社区所承认。下面是一些例子:</p>
<ul>
<li>使用2空格缩进(我曾经使用4个空格,但实际上使用2是相当不错)</li>
<li>没有分号</li>
<li>在关键字(如if)和花括号后加空格</li>
<li>and <a href="https://standardjs.com/rules-zhcn.html" target="_blank" rel="external">a lot more</a>.</li>
</ul>
<h1 id="使用ES2015-新特性"><a href="#使用ES2015-新特性" class="headerlink" title="使用ES2015 +新特性"></a>使用ES2015 +新特性</h1><p>如果你用JavaScript开发,你还没有听说过ES2015 +(或ES6 ES7…)特性。这是不可或缺的了:</p>
<ul>
<li>箭头函数：编写函数可以像 x =&gt; x * 2 是非常有用的函数式编程</li>
<li>类：停止使用原型函数，类更酷（但是不要滥用,JavaScript比任何面向对象的语言都要好得多）</li>
<li>使用数组和对象进行操作</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function doSomething() &#123;</div><div class="line">  const <span class="selector-tag">a</span> = doSomethingElse()</div><div class="line">  const <span class="selector-tag">b</span> = doSomethingWithA(a)</div><div class="line">  const otherResults = &#123; c: <span class="string">'😺'</span>, d: <span class="string">'🐶'</span> &#125;</div><div class="line">  return &#123; <span class="selector-tag">a</span>, <span class="selector-tag">b</span>, ..<span class="selector-class">.otherResults</span> &#125; <span class="comment">// 相当于 &#123; a: a, b: b，c: '😺', d: '🐶' &#125;</span></div><div class="line">&#125;</div><div class="line">const &#123; <span class="selector-tag">a</span>, c, ..<span class="selector-class">.rest</span> &#125; = doSomething() <span class="comment">// 同样适用于数组</span></div><div class="line"><span class="comment">// `rest` 相当于 &#123; b: ..., d: '🐶' &#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>使用更容易的使用的async/await:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> getValueForA()</div><div class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> getValueForBFromA(a)</div><div class="line">  <span class="keyword">const</span> [c, d] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</div><div class="line">    <span class="comment">// parallel execution</span></div><div class="line">    getValueForC(), getValueForDFromB(b)</div><div class="line">  ])</div><div class="line">  <span class="keyword">const</span> total = <span class="keyword">await</span> calculateTotal(a, b, c, d)</div><div class="line">  <span class="keyword">return</span> total / <span class="number">1000</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们怎样使用这些特性呢？我的一篇文章给你一些建议（顺便说一下,与最新版本的Node.js,你可能不需要babel就可以使用最新的一些特性）</p>
<h1 id="使用函数式编程"><a href="#使用函数式编程" class="headerlink" title="使用函数式编程"></a>使用函数式编程</h1><p>现在，函数式编程已经取得了很大的成功，不仅仅是在JavaScript中。这是什么原因呢?它使代码更加可预测、更安全、更确定，并且在使用时更容易维护。以下是一些简单的建议:</p>
<p>首先，停止使用for循环，在大多数情况下你不需要他们，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [&#123; <span class="attr">name</span>: <span class="string">'first'</span>, <span class="attr">value</span>: <span class="number">13</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'second'</span>, <span class="attr">value</span>: <span class="number">7</span> &#125;]</div><div class="line"></div><div class="line"><span class="comment">// 以前:</span></div><div class="line"><span class="keyword">const</span> res = &#123;&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">  <span class="keyword">const</span> calculatedValue = arr[i].value * <span class="number">10</span></div><div class="line">  <span class="keyword">if</span> (calculatedValue &gt; <span class="number">100</span>) &#123;</div><div class="line">    res[arr[i].name] = calculatedValue</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更好:</span></div><div class="line"><span class="keyword">const</span> res = arr</div><div class="line">  .map(<span class="function"><span class="params">elem</span> =&gt;</span> (&#123; <span class="attr">name</span>: elem.name, <span class="attr">calculatedValue</span>: elem.value * <span class="number">10</span> &#125;))</div><div class="line">  .filter(<span class="function"><span class="params">elem</span> =&gt;</span> elem.calculatedValue &gt; <span class="number">100</span>)</div><div class="line">  .reduce(<span class="function">(<span class="params">acc, elem</span>) =&gt;</span> (&#123;</div><div class="line">    [elem.name]: calculatedValue,</div><div class="line">    ...acc</div><div class="line">  &#125;), &#123;&#125;)</div></pre></td></tr></table></figure>
<p>好吧，我承认这是一个非常极端的例子，如果你不经常使用函数式编程的情况下，他看起来会非常的复杂，也许我们可以这样简化一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> enrichElementWithCalculatedValue =</div><div class="line">  elem =&gt; (&#123; <span class="attr">name</span>: elem.name, <span class="attr">calculatedValue</span>: elem.value * <span class="number">10</span> &#125;)</div><div class="line"><span class="keyword">const</span> filterElementsByValue = <span class="function"><span class="params">value</span> =&gt;</span></div><div class="line">  elem =&gt; elem.calculatedValue &gt; value</div><div class="line"><span class="keyword">const</span> aggregateElementInObject = <span class="function">(<span class="params">acc, elem</span>) =&gt;</span> (&#123;</div><div class="line">  [elem.name]: calculatedValue,</div><div class="line">  ...acc</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> res = arr</div><div class="line">  .map(enrichElementWithCalculatedValue)</div><div class="line">  .filter(filterElementsByValue(<span class="number">100</span>))</div><div class="line">  .reduce(aggregateElementInObject, &#123;&#125;)</div></pre></td></tr></table></figure>
<p>这里我们定义了三个函数基本上就是它们的名字</p>
<p>第二:创建局部函数(即使是在现有函数中)，无需注释就可以记录代码。</p>
<p>注意，三个局部函数不修改它们执行的上下文。没有外部变量被修改,没有被其他方法被调用，<br>他们称为纯函数在函数式编程中。他们有一些巨大的优势:</p>
<ul>
<li>它们是易测试的，因为从给定的参数来说，只有一个可能的结果，即使我们把函数多调用几次;</li>
<li>无论应用程序的实际状态如何，它们都可以提供相同的结果;</li>
<li>在函数调用之前和之后，应用程序状态保持不变。</li>
</ul>
<p>所以我的第三条建议是:多使用纯函数!</p>
<h1 id="最后还有一些其他的建议"><a href="#最后还有一些其他的建议" class="headerlink" title="最后还有一些其他的建议"></a>最后还有一些其他的建议</h1><ul>
<li>经常使用异步代码，多使用promise，查看带有<a href="http://reactivex.io/rxjs/" target="_blank" rel="external">RxJS</a>的观察效果(<a href="http://reactivex.io/learnrx/" target="_blank" rel="external">有一个关于函数编程的很好的教程，可以测试你的函数式编程</a>)</li>
<li>编写测试代码!应该是显而易见的，但是我知道很多项目都有未经测试的代码，尽管测试JavaScript(前端或后端)并不像看起来那么困难。</li>
<li>使用语言的新特性：例如停止使用<code>arr.indexOf(elem) !== -1</code> 赞成使用<code>arr.includes(elem)</code></li>
<li>多阅读技术文章：<a href="https://www.reddit.com/r/javascript/" target="_blank" rel="external">JavaScript subreddit</a>是了解生态系统中最酷的实践的一个很好的来源</li>
<li>哦，最后，我能给你最好的建议是：总是重构你的代码！改进你一年前写的模块？借此机会使用<code>const</code>代替<code>var</code>，使用<code>箭头函数</code>或者<code>async/await</code>来简化代码…总之用最好的代码进行工作!😉</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文： &lt;a href=&quot;https://dev.to/scastiel/writing-modern-javascript-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.to/scastiel/writing-moder
    
    </summary>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
      <category term="es-2015" scheme="http://meiminjun.github.io/tags/es-2015/"/>
    
      <category term="linter" scheme="http://meiminjun.github.io/tags/linter/"/>
    
  </entry>
  
  <entry>
    <title>javascript深入浅出系列-Array 之 reduce</title>
    <link href="http://meiminjun.github.io/javascript-array-reduce/"/>
    <id>http://meiminjun.github.io/javascript-array-reduce/</id>
    <published>2017-06-01T14:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>reduce()方法对数组中的每个元素（从左到右）开始执行给定函数，构建一个最终返回值。reduce()是所有数组方法中最为复杂的一个。所有非IE6~8浏览器均支持该方法。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p>array.reduce(callback, initialValue)</p>
</blockquote>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>callback</td>
<td>对每个数组元素执行的回调函数</td>
</tr>
<tr>
<td>initialValue</td>
<td>作为首次调用 callback 的第一个参数</td>
</tr>
</tbody>
</table>
<p>注意：</p>
<p>reduce()方法中的 callback 回调函数默认支持 4 个参数。</p>
<ul>
<li>第 1 个(previousValue)： 上一次执行 callback 的返回值；</li>
<li>第 2 个(currentValue): 数组中当前被处理的元素；</li>
<li>第 3 个(index)： 当前被处理元素的索引值；</li>
<li>第 4 个(array)： 调用reduce()方法的数组本身。</li>
</ul>
<p>再次注意：</p>
<p>首次执行<code>callback</code> 函数时，如果指定了 <code>initialValue</code> ，则使用 <code>initialValue</code> 作为 <code>callback</code> 的第一个参数(<code>previousValue</code>)，数组中第一个元素作为第二个参数(<code>currentValue</code>)；<strong>并且第三个参数的值从0开始</strong></p>
<p>如果没指定 <code>initialValue</code>，则用数组的第一个元素作为 <code>previousValue</code>，第二个元素作为 <code>currentValue</code>,<strong>并且第三个参数的值从1开始</strong></p>
<p>如果数组为空并且没有提供 <code>initialValue</code>， 会抛出<code>TypeError</code>。如果数组仅有一个元素（无论位置如何）并且没有提供 <code>initialValue</code>， 或者有提供 <code>initialValue</code> 但是数组为空，那么此唯一值将被返回并且<strong>callback不会被执行</strong></p>
<p>callback只会在已经赋值的索引上执行，对于那些已经被删除或者从未被赋值的索引不会执行。请看下面示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"><span class="keyword">delete</span> arr[<span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">// [1, 2, undefined, 4, 5, 6]</span></div><div class="line"></div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">String</span>(pre) + <span class="built_in">String</span>(cur) &#125;);  <span class="comment">// "12456"</span></div></pre></td></tr></table></figure>
<p>每次的参数和返回值如下表：</p>
<table>
<thead>
<tr>
<th>reduce()迭代过程</th>
<th>previousValue</th>
<th>currentValue</th>
<th>index</th>
<th>array</th>
<th>return value</th>
</tr>
</thead>
<tbody>
<tr>
<td>第1次调用</td>
<td>1</td>
<td>2</td>
<td>1</td>
<td>[1,2, undefined, 4,5,6]</td>
<td>12</td>
</tr>
<tr>
<td>第2次调用</td>
<td>12</td>
<td>4</td>
<td>3</td>
<td>[1,2, undefined, 4,5,6]</td>
<td>124</td>
</tr>
<tr>
<td>第3次调用</td>
<td>124</td>
<td>5</td>
<td>4</td>
<td>[1,2, undefined, 4,5,6]</td>
<td>1245</td>
</tr>
<tr>
<td>第4次调用</td>
<td>1245</td>
<td>6</td>
<td>5</td>
<td>[1,2, undefined, 4,5,6]</td>
<td>12456</td>
</tr>
</tbody>
</table>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>reduce()方法的返回值为任意类型，从数组的第一项开始，逐个遍历到最后，由 callback 函数构建一个最终返回值。</p>
<p>reduce()不会改变原数组。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="keyword">return</span> a + b &#125;);     <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>给reduce()传入第二个参数 10 </p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var total = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(function(a, b) &#123; return a + b &#125;, <span class="number">10</span>); <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<p>将数组扁平化</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var flattened = <span class="string">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<span class="function"><span class="keyword">function</span><span class="params">(a, b)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> a.<span class="built_in">concat</span>(b);</div><div class="line">&#125;);</div><div class="line">// flattened 为 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><p>把下面的代码插入到脚本的开头来解决低级IE的兼容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="string">'function'</span> !== <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.reduce) &#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, opt_initialValue</span>)</span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">this</span> || <span class="string">'undefined'</span> === <span class="keyword">typeof</span> <span class="keyword">this</span>) &#123;</div><div class="line">      <span class="comment">// At the moment all modern browsers, that support strict mode, have</span></div><div class="line">      <span class="comment">// native implementation of Array.prototype.reduce. For instance, IE8</span></div><div class="line">      <span class="comment">// does not support strict mode, so this check is actually useless.</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</div><div class="line">          <span class="string">'Array.prototype.reduce called on null or undefined'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'function'</span> !== <span class="keyword">typeof</span> callback) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">' is not a function'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> index, value,</div><div class="line">        length = <span class="keyword">this</span>.length &gt;&gt;&gt; <span class="number">0</span>,</div><div class="line">        isValueSet = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="number">1</span> &lt; <span class="built_in">arguments</span>.length) &#123;</div><div class="line">      value = opt_initialValue;</div><div class="line">      isValueSet = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; length &gt; index; ++index) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.hasOwnProperty(index)) &#123;</div><div class="line">        <span class="keyword">if</span> (isValueSet) &#123;</div><div class="line">          value = callback(value, <span class="keyword">this</span>[index], index, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          value = <span class="keyword">this</span>[index];</div><div class="line">          isValueSet = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!isValueSet) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Reduce of empty array with no initial value'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义和用法&quot;&gt;&lt;a href=&quot;#定义和用法&quot; class=&quot;headerlink&quot; title=&quot;定义和用法&quot;&gt;&lt;/a&gt;定义和用法&lt;/h2&gt;&lt;p&gt;reduce()方法对数组中的每个元素（从左到右）开始执行给定函数，构建一个最终返回值。reduce()是所有数组方
    
    </summary>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript深入浅出系列-常用-数值判断</title>
    <link href="http://meiminjun.github.io/javascript-%E5%B8%B8%E7%94%A8-%E6%95%B0%E5%80%BC%E5%88%A4%E6%96%AD/"/>
    <id>http://meiminjun.github.io/javascript-常用-数值判断/</id>
    <published>2017-05-26T17:08:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript中检测数值的方法"><a href="#JavaScript中检测数值的方法" class="headerlink" title="JavaScript中检测数值的方法"></a>JavaScript中检测数值的方法</h1><h2 id="typeof-最常用"><a href="#typeof-最常用" class="headerlink" title="typeof(最常用)"></a>typeof(最常用)</h2><p>在很多时候我们都需要对一个值进行判断，用的最多的就是typeof，而当判断array的时候，这个方法则不管用了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> [] <span class="comment">// 'object'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>typeof 的返回值是个字符串哦</p>
</blockquote>
<p>ps:以下typeof中是可用的判断类型</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var a;</div><div class="line">typeof a;				// <span class="string">"undefined"</span></div><div class="line"></div><div class="line">a = <span class="string">"hello world"</span>;</div><div class="line">typeof a;				// <span class="string">"string"</span></div><div class="line"></div><div class="line">a = 42;</div><div class="line">typeof a;				// <span class="string">"number"</span></div><div class="line"></div><div class="line">a = true;</div><div class="line">typeof a;				// <span class="string">"boolean"</span></div><div class="line"></div><div class="line">a = null;</div><div class="line">typeof a;				// <span class="string">"object"</span> -- 奇怪的bug</div><div class="line"></div><div class="line">a = undefined;</div><div class="line">typeof a;				// <span class="string">"undefined"</span></div><div class="line"></div><div class="line">a = &#123; b: <span class="string">"c"</span> &#125;;</div><div class="line">typeof a;				// <span class="string">"object"</span></div></pre></td></tr></table></figure>
<p>那么我们怎么去判断一个数组类型呢？</p>
<h2 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h2><p>这个操作符和JavaScript中面向对象有点关系，了解这个就先得了解JavaScript中的面向对象。因为这个操作符是检测对象的原型链是否指向构造函数的prototype对象的。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];     </div><div class="line">alert(arr instanceof Array); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="对象的constructor属性"><a href="#对象的constructor属性" class="headerlink" title="对象的constructor属性"></a>对象的constructor属性</h2><p>除了instanceof，每个对象还有constructor的属性，利用它似乎也能进行Array的判断。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];     </div><div class="line">alert(arr.constructor === Array); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>第2种和第3种方法貌似无懈可击，但是实际上还是有些漏洞的，当你在多个frame中来回穿梭的时候，这两种方法就亚历山大了。由于每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链的，因此导致上述检测代码失效!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);   <span class="comment">//创建iframe  </span></div><div class="line"><span class="built_in">document</span>.body.appendChild(iframe);   <span class="comment">//添加到body中  </span></div><div class="line">xArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length<span class="number">-1</span>].Array;     </div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> xArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 声明数组[1,2,3]     </span></div><div class="line">  </div><div class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false     </span></div><div class="line">  </div><div class="line">alert(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="检测数组类型方法"><a href="#检测数组类型方法" class="headerlink" title="检测数组类型方法"></a>检测数组类型方法</h2><p>以上那些方法看上去无懈可击，但是终究会有些问题，接下来向大家提供一些比较不错的方法，可以说是无懈可击了。</p>
<h3 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h3><p>Object.prototype.toString的行为：首先，取得对象的一个内部属性[[Class]]，然后依据这个属性，返回一个类似于”[object Array]”的字符串作为结果(看过ECMA标准的应该都知道，[[]]用来表示语言内部用到的、外部不可直接访问的属性，称为“内部属性”)。利用这 个方法，再配合call，我们可以取得任何对象的内部属性[[Class]]，然后把类型检测转化为字符串比较，以达到我们的目的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayFn</span> (<span class="params">o</span>) </span>&#123;    </div><div class="line"> <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">'[object Array]'</span>;     </div><div class="line">&#125;  </div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];     </div><div class="line">  </div><div class="line">alert(isArrayFn(arr));<span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>call改变toString的this引用为待检测的对象，返回此对象的字符串表示，然后对比此字符串是否是’[object Array]’，以判断其是否是Array的实例。为什么不直接o.toString()?嗯，虽然Array继承自Object，也会有 toString方法，但是这个方法有可能会被改写而达不到我们的要求，而Object.prototype则是老虎的屁股，很少有人敢去碰它的，所以能一定程度保证其“纯洁性”：)</p>
<p>　　JavaScript 标准文档中定义: [[Class]] 的值只可能是下面字符串中的一个： Arguments, Array, Boolean, Date, Error, Function, JSON, Math, Number, Object, RegExp, String.<br>　　<br>　　<br>　　这种方法在识别内置对象时往往十分有用，但对于自定义对象请不要使用这种方法。
　　</p>
<h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><p>　　ECMAScript5将Array.isArray()正式引入JavaScript，目的就是准确地检测一个值是否为数组。IE9+、 Firefox 4+、Safari 5+、Opera 10.5+和Chrome都实现了这个方法。但是在IE8之前的版本是不支持的。</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>综合以上考虑，当前最佳方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>];    </div><div class="line"><span class="keyword">var</span> arr2 = [&#123; <span class="attr">abac</span> : <span class="number">1</span>, <span class="attr">abc</span> : <span class="number">2</span> &#125;];    </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayFn</span>(<span class="params">value</span>)</span>&#123;  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray === <span class="string">"function"</span>) &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value);      </div><div class="line">    &#125;<span class="keyword">else</span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object Array]"</span>;      </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">alert(isArrayFn(arr));<span class="comment">// true   </span></div><div class="line">alert(isArrayFn(arr2));<span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="判断JavaScript对象为null或者属性为空"><a href="#判断JavaScript对象为null或者属性为空" class="headerlink" title="判断JavaScript对象为null或者属性为空"></a>判断JavaScript对象为null或者属性为空</h2><p>首先说一下null 和 undefined 的区别</p>
<p>对已声明但未初始化的和未声明的变量执行typeof，都返回”undefined”</p>
<p>null表示一个空对象指针，typeof操作会返回”object”</p>
<p>一般不显式的把变量的值设置为undefined，但null相反，对于将要保存对象的变量，应明确的让该变量赋值为null值作为初始化变量。</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj;</div><div class="line">alert(obj);  //<span class="string">"undefined"</span></div><div class="line"><span class="attr">obj</span> = <span class="literal">null</span>;</div><div class="line">alert(typeof obj);  //<span class="string">"object"</span></div><div class="line">alert(<span class="attr">obj</span> == <span class="literal">null</span>);  //<span class="literal">true</span></div><div class="line"><span class="attr">bj</span> = &#123;&#125;;</div><div class="line">alert(<span class="attr">bj</span> == <span class="literal">null</span>);  //<span class="literal">false</span></div></pre></td></tr></table></figure>
<p>下面是两个判断空对象的函数</p>
<ol>
<li>检查原型继承的</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 检测对象是否是空对象(不包含任何可读属性)。</span></div><div class="line"><span class="comment"> * 方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使hasOwnProperty)。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">obj</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> obj) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = &#123;&#125;;</div><div class="line">a.name = <span class="string">'realwall'</span>;</div><div class="line"><span class="built_in">console</span>.log(isEmpty(a));  <span class="regexp">//</span><span class="literal">false</span></div><div class="line"><span class="built_in">console</span>.log(isEmpty(&#123;&#125;));  <span class="regexp">//</span><span class="literal">true</span></div><div class="line"><span class="built_in">console</span>.log(isEmpty(<span class="literal">null</span>));  <span class="regexp">//</span><span class="literal">true</span></div><div class="line"><span class="regexp">//</span>注意参数为<span class="literal">null</span>时无语法错误，即虽然不能对<span class="literal">null</span>空指针对象添加属性，但使用<span class="keyword">for</span> <span class="keyword">in</span> 语句</div></pre></td></tr></table></figure>
<ol>
<li>不检查原型继承的</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 检测对象是否是空对象(不包含任何可读属性)。</span></div><div class="line"><span class="comment"> * 方法只既检测对象本身的属性，不检测从原型继承的属性。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">obj</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> obj)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(name))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript中检测数值的方法&quot;&gt;&lt;a href=&quot;#JavaScript中检测数值的方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中检测数值的方法&quot;&gt;&lt;/a&gt;JavaScript中检测数值的方法&lt;/h1&gt;&lt;h2 id=&quot;t
    
    </summary>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>standard代码规范指南</title>
    <link href="http://meiminjun.github.io/standard%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://meiminjun.github.io/standard代码规范/</id>
    <published>2017-04-20T21:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1ff6vedjfw7j30kz0o7t9v.jpg" alt=""></p>
<h1 id="使用standard代码风格规则说明（116条）"><a href="#使用standard代码风格规则说明（116条）" class="headerlink" title="使用standard代码风格规则说明（116条）"></a>使用standard代码风格规则说明（116条）</h1><a id="more"></a>
<ul>
<li><strong>使用两个空格进行缩进</strong></li>
</ul>
<p>eslint: indent</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>, name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>除需要转义的情况外，字符串统一使用单引号</strong></li>
</ul>
<p>eslint: quotes</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'测试'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><strong>不要定义未使用的变量</strong></li>
</ul>
<p>eslint: no-unused-vars</p>
<ul>
<li><strong>关键字后面加空格</strong></li>
</ul>
<p>eslint: keyword-spacing</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">name</span>) <span class="comment">&#123;&#125;</span>   <span class="comment">// ✗ avoid </span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">name</span>) <span class="comment">&#123;&#125;</span>  <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>函数声明时括号与函数名间加空格</strong></li>
</ul>
<p>eslint: space-before-function-paren</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span> (<span class="params">arg</span>) </span>&#123; ... &#125;   <span class="comment">// ✓ ok </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">arg</span>) </span>&#123; ... &#125;    <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line">run(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; ... &#125;)      <span class="comment">// ✓ ok </span></div><div class="line">run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;)       <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>始终使用 === 替代 ==</strong></li>
</ul>
<p>eslint: eqeqeq</p>
<p>例外： obj == null 可以用来检查 null || undefined。</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (obj == null) <span class="comment">&#123; &#125;</span> <span class="comment">// ✓ ok </span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">name</span> === <span class="string">'John'</span>)   <span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">name</span> == <span class="string">'John'</span>)    <span class="comment">// ✗ avoid </span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">name</span> !== <span class="string">'John'</span>)   <span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">name</span> != <span class="string">'John'</span>)    <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>字符串拼接操作符之间要留空格</strong></li>
</ul>
<p>eslint: space-infix-ops</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">var</span> x = <span class="number">2</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">message</span> = <span class="string">'hello, '</span> + <span class="keyword">name</span> + <span class="string">'!'</span></div></pre></td></tr></table></figure>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> x=<span class="number">2</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">message</span> = <span class="string">'hello, '</span>+<span class="keyword">name</span>+<span class="string">'!'</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>逗号后面加空格</strong></li>
</ul>
<p>eslint: comma-spacing</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line">var <span class="type">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">function greet (name, options) &#123; ... &#125;</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line">var <span class="type">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">function greet (name,options) &#123; ... &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>else 关键字要与花括号保持在同一行</strong></li>
</ul>
<p>eslint: brace-style</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span> ✓ ok </div><div class="line"><span class="keyword">if</span> <span class="params">(condition)</span> &#123;</div><div class="line">  <span class="string">//</span> <span class="string">...</span> </div><div class="line">&#125; else &#123;</div><div class="line">  <span class="string">//</span> <span class="string">...</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span> ✗ avoid </div><div class="line"><span class="keyword">if</span> <span class="params">(condition)</span> &#123;</div><div class="line">  <span class="string">//</span> <span class="string">...</span> </div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">  <span class="string">//</span> <span class="string">...</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>多行 if 语句的的括号不能省</strong></li>
</ul>
<p>eslint: curly</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">if</span> (options.quiet !== <span class="literal">true</span>) <span class="built_in">console</span>.log(<span class="string">'done'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">if</span> (options.quiet !== <span class="literal">true</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">if</span> (options.quiet !== <span class="literal">true</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><strong>不要丢掉异常处理中err参数</strong></li>
</ul>
<p>eslint: handle-callback-err</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line">run(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</div><div class="line">  <span class="built_in">window</span>.alert(<span class="string">'done'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line">run(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.alert(<span class="string">'done'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><strong>使用浏览器全局变量时加上 window. 前缀</strong></li>
</ul>
<p>eslint: no-undef</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.alert(<span class="string">'hi'</span>)   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不允许有连续多行空行</strong></li>
</ul>
<p>eslint: no-multiple-empty-lines</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">var</span> <span class="keyword">value</span> = <span class="string">'hello world'</span></div><div class="line">console.log(<span class="keyword">value</span>)</div></pre></td></tr></table></figure>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> <span class="keyword">value</span> = <span class="string">'hello world'</span></div><div class="line"> </div><div class="line"> </div><div class="line">console.log(<span class="keyword">value</span>)</div></pre></td></tr></table></figure>
<ul>
<li><strong>对于三元运算符 ? 和 : 与他们所负责的代码处于同一行</strong></li>
</ul>
<p>eslint: operator-linebreak</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">var</span> location = env.development ? <span class="string">'localhost'</span> : <span class="string">'www.api.com'</span></div><div class="line"> </div><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">var</span> location = env.development</div><div class="line">  ? <span class="string">'localhost'</span></div><div class="line">  : <span class="string">'www.api.com'</span></div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> location = env.development ?</div><div class="line">  <span class="string">'localhost'</span> :</div><div class="line">  <span class="string">'www.api.com'</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>每个 var 关键字单独声明一个变量</strong></li>
</ul>
<p>eslint: one-var</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">var</span> silent = <span class="literal">true</span></div><div class="line"><span class="keyword">var</span> verbose = <span class="literal">true</span></div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> silent = <span class="literal">true</span>, verbose = <span class="literal">true</span></div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> silent = <span class="literal">true</span>,</div><div class="line">    verbose = <span class="literal">true</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>条件语句中赋值语句使用括号包起来。这样使得代码更加清晰可读，而不会认为是将条件判断语句的全等号（===）错写成了等号（=）</strong></li>
</ul>
<p>eslint: no-cond-assign</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">while</span> ((m = <span class="keyword">text</span>.<span class="keyword">match</span>(expr))) &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">while</span> (m = <span class="keyword">text</span>.<span class="keyword">match</span>(expr)) &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>单行代码块两边加空格</strong></li>
</ul>
<p>eslint: block-spacing</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;  <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>对于变量和函数名统一使用驼峰命名法</strong></li>
</ul>
<p>eslint: camelcase</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_function</span> (<span class="params"></span>) </span>&#123; &#125;    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span> (<span class="params"></span>) </span>&#123; &#125;     <span class="comment">// ✓ ok </span></div><div class="line"></div><div class="line"><span class="keyword">var</span> my_var = <span class="string">'hello'</span>           <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> myVar = <span class="string">'hello'</span>            <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不允许有多余的行末逗号</strong></li>
</ul>
<p>eslint: comma-dangle</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> obj = &#123;</div><div class="line">  message: <span class="string">'hello'</span>,   <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>始终将逗号置于行末</strong></li>
</ul>
<p>eslint: comma-style</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> obj = &#123;</div><div class="line">  foo: <span class="string">'foo'</span></div><div class="line">  ,bar: <span class="string">'bar'</span>   <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="selector-tag">var</span> obj = &#123;</div><div class="line">  foo: <span class="string">'foo'</span>,</div><div class="line">  bar: <span class="string">'bar'</span>   <span class="comment">// ✓ ok </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>点号操作符须与属性需在同一行</strong></li>
</ul>
<p>eslint: dot-location</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.</div><div class="line">    log(<span class="string">'hello'</span>)  <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="built_in">console</span></div><div class="line">.log(<span class="string">'hello'</span>) <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>文件末尾留一空行</strong></li>
</ul>
<p>elint: eol-last</p>
<ul>
<li><strong>函数调用时标识符与括号间不留间隔</strong></li>
</ul>
<p>eslint: func-call-spacing</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log (<span class="string">'hello'</span>) <span class="comment">// ✗ avoid </span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>)  <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>键值对当中冒号与值之间要留空白</strong></li>
</ul>
<p>eslint: key-spacing</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> obj = &#123; <span class="string">'key'</span> : <span class="string">'value'</span> &#125;    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="selector-tag">var</span> obj = &#123; <span class="string">'key'</span> :<span class="string">'value'</span> &#125;     <span class="comment">// ✗ avoid </span></div><div class="line"><span class="selector-tag">var</span> obj = &#123; <span class="string">'key'</span>:<span class="string">'value'</span> &#125;      <span class="comment">// ✗ avoid </span></div><div class="line"><span class="selector-tag">var</span> obj = &#123; <span class="string">'key'</span>: <span class="string">'value'</span> &#125;     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>构造函数要以大写字母开头</strong></li>
</ul>
<p>eslint: new-cap</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> animal()    <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Animal()    <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>无参的构造函数调用时要带上括号</strong></li>
</ul>
<p>eslint: new-parens</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> </span>() &#123;&#125;</div><div class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="type">Animal</span>    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="type">Animal</span>()  <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>对象中定义了存值器，一定要对应的定义取值器。</li>
</ul>
<p>eslint: accessor-pairs</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="function"><span class="keyword">set</span> <span class="title">name</span> (<span class="params"><span class="keyword">value</span></span>) </span>&#123;    <span class="comment">// ✗ avoid </span></div><div class="line">    <span class="keyword">this</span>.name = <span class="keyword">value</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="function"><span class="keyword">set</span> <span class="title">name</span> (<span class="params"><span class="keyword">value</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="keyword">value</span></div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">get</span> <span class="title">name</span> (<span class="params"></span>) </span>&#123;         <span class="comment">// ✓ ok </span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>子类的构造器中一定要调用 super</li>
</ul>
<p>eslint: constructor-super</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">  constructor () &#123;</div><div class="line">    <span class="keyword">super</span>()   <span class="comment">// ✗ avoid </span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</div><div class="line">  constructor () &#123;</div><div class="line">    <span class="keyword">super</span>()   <span class="comment">// ✓ ok </span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>使用数组字面量而不是构造器</strong></li>
</ul>
<p>eslint: no-array-constructor</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var nums = new Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)   <span class="comment">// ✗ avoid </span></div><div class="line">var nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]            <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>避免使用 arguments.callee 和 arguments.caller。</li>
</ul>
<p>eslint: no-caller</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span></div><div class="line"> </div><div class="line">  <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>)   <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span></div><div class="line"> </div><div class="line">  foo(n - <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>避免对类名重新赋值</li>
</ul>
<p>eslint: no-class-assign</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;&#125;</div><div class="line">Dog = <span class="string">'Fido'</span>    <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>避免修改使用 const 声明的变量</strong></li>
</ul>
<p>eslint: no-const-assign</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">score</span> = 100</div><div class="line"><span class="keyword">score</span> = 125       <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>避免使用常量作为条件表达式的条件（循环语句除外）。</li>
</ul>
<p>eslint: no-constant-condition</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(false)</span> &#123;    <span class="comment">// ✗ avoid </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">if</span> <span class="comment">(x === 0)</span> &#123;  <span class="comment">// ✓ ok </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">while</span> <span class="comment">(true)</span> &#123;  <span class="comment">// ✓ ok </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>正则中不要使用控制符</strong></li>
</ul>
<p>eslint: no-control-regex</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\x1f/</span>    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\x20/</span>    <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不要使用 debugger</strong></li>
</ul>
<p>eslint: no-debugger</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function sum (<span class="selector-tag">a</span>, b) &#123;</div><div class="line">  debugger      <span class="comment">// ✗ avoid </span></div><div class="line">  return <span class="selector-tag">a</span> + b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>不要对变量使用 delete 操作</strong></li>
</ul>
<p>eslint: no-delete-var</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">name</span></div><div class="line">delete <span class="keyword">name</span>     <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>不要定义冗余的函数参数。</li>
</ul>
<p>eslint: no-dupe-args</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function sum (<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, a) &#123;  <span class="comment">// ✗ avoid </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">function sum (<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c) &#123;  <span class="comment">// ✓ ok </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>类中不要定义冗余的属性。</li>
</ul>
<p>eslint: no-dupe-class-members</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">  bark () &#123;&#125;</div><div class="line">  bark () &#123;&#125;    <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对象字面量中不要定义重复的属性。</li>
</ul>
<p>eslint: no-dupe-keys</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var user = &#123;</div><div class="line">  <span class="built_in">name</span>: <span class="string">'Jane Doe'</span>,</div><div class="line">  <span class="built_in">name</span>: <span class="string">'John Doe'</span>    <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>switch 语句中不要定义重复的 case 分支。</li>
</ul>
<p>eslint: no-duplicate-case</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="keyword">id</span>) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="comment">// ... </span></div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>同一模块有多个导入时一次性写完</strong></li>
</ul>
<p>eslint: no-duplicate-imports</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; myFunc1 &#125; <span class="keyword">from</span> <span class="string">'module'</span></div><div class="line"><span class="keyword">import</span> &#123; myFunc2 &#125; <span class="keyword">from</span> <span class="string">'module'</span>          <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> &#123; myFunc1, myFunc2 &#125; <span class="keyword">from</span> <span class="string">'module'</span> <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>正则中不要使用空字符</strong></li>
</ul>
<p>eslint: no-empty-character-class</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> myRegex = <span class="regexp">/^abc[]/</span>      <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> myRegex = <span class="regexp">/^abc[a-z]/</span>   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>不要解构空值</li>
</ul>
<p>eslint: no-empty-pattern</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const &#123; <span class="selector-tag">a</span>: &#123;&#125; &#125; = foo         <span class="comment">// ✗ avoid </span></div><div class="line">const &#123; <span class="selector-tag">a</span>: &#123; <span class="selector-tag">b</span> &#125; &#125; = foo      <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>不要使用 eval()。</li>
</ul>
<p>eslint: no-eval</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">eval</span><span class="params">( <span class="string">"var result = user."</span> + propName )</span></span> <span class="comment">// ✗ avoid </span></div><div class="line"><span class="selector-tag">var</span> result = user[propName]             <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>catch 中不要对错误重新赋值</li>
</ul>
<p>eslint: no-ex-assign</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  e = <span class="string">'new value'</span>             <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  const <span class="keyword">new</span><span class="type">Val</span> = <span class="string">'new value'</span>  <span class="comment">// ✓ ok </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不要扩展原生对象</li>
</ul>
<p>eslint: no-extend-native</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object<span class="selector-class">.prototype</span><span class="selector-class">.age</span> = <span class="number">21</span>     <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>避免多余的函数上下文绑定</li>
</ul>
<p>eslint: no-extra-bind</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  getName()</div><div class="line">&#125;.bind(user)    <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.getName()</div><div class="line">&#125;.bind(user)    <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>避免不必要的布尔转换</li>
</ul>
<p>eslint: no-extra-boolean-cast</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> result = <span class="literal">true</span></div><div class="line"><span class="keyword">if</span> (!!result) &#123;   <span class="comment">// ✗ avoid </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> result = <span class="literal">true</span></div><div class="line"><span class="keyword">if</span> (result) &#123;     <span class="comment">// ✓ ok </span></div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不要使用多余的括号包裹函数</li>
</ul>
<p>eslint: no-extra-parens</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> myFunc = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;)   <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> myFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>switch 一定要使用 break 来将条件分支正常中断</strong></li>
</ul>
<p>eslint: no-fallthrough</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="keyword">filter</span>) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    doSomething()    <span class="comment">// ✗ avoid </span></div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    doSomethingElse()</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">switch</span> (<span class="keyword">filter</span>) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    doSomething()</div><div class="line">    <span class="keyword">break</span>           <span class="comment">// ✓ ok </span></div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    doSomethingElse()</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">switch</span> (<span class="keyword">filter</span>) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    doSomething()</div><div class="line">    <span class="comment">// fallthrough  // ✓ ok </span></div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    doSomethingElse()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>不要省去小数点前面的0</strong></li>
</ul>
<p>eslint: no-floating-decimal</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> discount = <span class="number">.5</span>      <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> discount = <span class="number">0.5</span>     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>避免对声明过的函数重新赋值</li>
</ul>
<p>eslint: no-func-assign</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">myFunc = myOtherFunc    <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不要对全局只读对象重新赋值</strong></li>
</ul>
<p>eslint: no-global-assign</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span> = &#123;&#125;     <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>注意隐式的 eval()</li>
</ul>
<p>eslint: no-implied-eval</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setTimeout</span><span class="params">(<span class="string">"alert('Hello world')"</span>)</span></span>                   <span class="comment">// ✗ avoid </span></div><div class="line"><span class="function"><span class="title">setTimeout</span><span class="params">(function ()</span></span> &#123; alert(<span class="string">'Hello world'</span>) &#125;)     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>嵌套的代码块中禁止再定义函数</strong></li>
</ul>
<p>eslint: no-inner-declarations</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (authenticated) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setAuthUser</span> (<span class="params"></span>) </span>&#123;&#125;    <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不要向 RegExp 构造器传入非法的正则表达式</li>
</ul>
<p>eslint: no-invalid-regexp</p>
<p>RegExp(‘[a-z’)    // ✗ avoid<br>RegExp(‘[a-z]’)   // ✓ ok </p>
<ul>
<li>不要使用非法的空白符</li>
</ul>
<p>eslint: no-irregular-whitespace</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span> (<span class="params"></span>) /*&lt;<span class="title">NBSP</span>&gt;*/</span>&#123;&#125;   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用 <strong>iterator</strong></li>
</ul>
<p>eslint: no-iterator</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Foo.prototype.__iterator__ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>外部变量不要与对象属性重名</strong></li>
</ul>
<p>eslint: no-label-var</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> score = <span class="number">100</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">game</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  score: <span class="number">50</span>         <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不要使用标签语句</li>
</ul>
<p>eslint: no-labels</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">label</span><span class="bash">:</span></div><div class="line"><span class="bash">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></div><div class="line"><span class="bash">    <span class="built_in">break</span> label     // ✗ avoid </span></div><div class="line"><span class="bash">  &#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>不要书写不必要的嵌套代码块。</li>
</ul>
<p>eslint: no-lone-blocks</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#123;                   <span class="comment">// ✗ avoid </span></div><div class="line">    myOtherFunc()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  myOtherFunc()       <span class="comment">// ✓ ok </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>不要混合使用空格与制表符作为缩进</strong></li>
</ul>
<p>eslint: no-mixed-spaces-and-tabs</p>
<ul>
<li><strong>除了缩进，不要使用多个空格</strong></li>
</ul>
<p>eslint: no-multi-spaces</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">id</span> =    <span class="number">1234</span>    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">id</span> = <span class="number">1234</span>       <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>不要使用多行字符串。</li>
</ul>
<p>eslint: no-multi-str</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">message</span> = <span class="string">'Hello \</span></div><div class="line"><span class="string">                 world'</span>     <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>new 创建对象实例后需要赋值给变量</strong></li>
</ul>
<p>eslint: no-new</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Character</span>()                     <span class="comment">// ✗ avoid </span></div><div class="line">const character = <span class="keyword">new</span> <span class="type">Character</span>()   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用 Function 构造器。</li>
</ul>
<p>eslint: no-new-func</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>)    <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用 Object 构造器。</li>
</ul>
<p>eslint: no-new-object</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> config = <span class="keyword">new</span> <span class="built_in">Object</span>()   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用 new require</li>
</ul>
<p>eslint: no-new-require</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> myModule = <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">'my-module'</span>)    <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用 Symbol 构造器</li>
</ul>
<p>eslint: no-new-symbol</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> <span class="built_in">Symbol</span>(<span class="string">'foo'</span>)   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用原始包装器</li>
</ul>
<p>eslint: no-new-wrappers</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> message = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>)   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>不要将全局对象的属性作为函数调用</li>
</ul>
<p>eslint: no-obj-calls</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> math = <span class="built_in">Math</span>()   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>不要使用八进制字面量。</li>
</ul>
<p>eslint: no-octal</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">num</span> = <span class="number">042</span>     <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> <span class="built_in">num</span> = <span class="string">'042'</span>   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>字符串字面量中也不要使用八进制转义字符。</li>
</ul>
<p>eslint: no-octal-escape</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">copyright</span> = '<span class="keyword">Copyright</span> \251'  <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>使用 <strong>dirname 和 </strong>filename 时尽量避免使用字符串拼接</strong></li>
</ul>
<p>eslint: no-path-concat</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> pathToFile = __dirname + <span class="string">'/app.js'</span>            <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> pathToFile = path.<span class="keyword">join</span>(__dirname, <span class="string">'app.js'</span>)   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>使用 getPrototypeOf 来替代 <strong>proto</strong></li>
</ul>
<p>eslint: no-proto</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = obj.__proto__               <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.getPrototypeOf(obj)  <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不要重复声明变量</strong></li>
</ul>
<p>eslint: no-redeclare</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let <span class="keyword">name</span> = <span class="string">'John'</span></div><div class="line">let <span class="keyword">name</span> = <span class="string">'Jane'</span>     <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line">let <span class="keyword">name</span> = <span class="string">'John'</span></div><div class="line"><span class="keyword">name</span> = <span class="string">'Jane'</span>         <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>正则中避免使用多个空格</li>
</ul>
<p>eslint: no-regex-spaces</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> regexp = <span class="regexp">/test   value/</span>   <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> regexp = <span class="regexp">/test &#123;3&#125;value/</span>  <span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">const</span> regexp = <span class="regexp">/test value/</span>     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>return 语句中的赋值必需有括号包裹</strong></li>
</ul>
<p>eslint: no-return-assign</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="title">a</span>, <span class="title">b</span>) &#123;</span></div><div class="line">  <span class="literal">return</span> <span class="built_in">result</span> = <span class="keyword">a</span> + b    <span class="comment"> // ✗ avoid </span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="title">a</span>, <span class="title">b</span>) &#123;</span></div><div class="line">  <span class="literal">return</span> (<span class="built_in">result</span> = <span class="keyword">a</span> + b)  <span class="comment"> // ✓ ok </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>避免将变量赋值给自己</li>
</ul>
<p>eslint: no-self-assign</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">name</span> = <span class="keyword">name</span>   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>避免将变量与自己进行比较操作。</li>
</ul>
<p>esint: no-self-compare</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">score</span> === <span class="built_in">score</span>) &#123;&#125;   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>避免使用逗号操作符</li>
</ul>
<p>eslint: no-sequences</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(doSomething()</span>, !!test) &#123;&#125;   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>不要随意更改关键字的值</li>
</ul>
<p>eslint: no-shadow-restricted-names</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="literal">undefined</span> = <span class="string">'value'</span>     <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用稀疏数组（Sparse arrays）</li>
</ul>
<p>eslint: no-sparse-arrays</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fruits = [<span class="string">'apple'</span>,, <span class="string">'orange'</span>]       <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不要使用制表符</strong></li>
</ul>
<p>eslint: no-tabs</p>
<ul>
<li>正确使用 ES6 中的字符串模板</li>
</ul>
<p>eslint: no-template-curly-in-string</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const <span class="class"><span class="keyword">message</span> = '<span class="title">Hello</span> $</span>&#123;name&#125;'   <span class="comment">// ✗ avoid </span></div><div class="line">const <span class="class"><span class="keyword">message</span> = `<span class="title">Hello</span> $</span>&#123;name&#125;`   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>使用 this 前请确保 super() 已调用</li>
</ul>
<p>eslint: no-this-before-super</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  constructor () &#123;</div><div class="line">    <span class="keyword">this</span>.legs = <span class="number">4</span>     <span class="comment">// ✗ avoid </span></div><div class="line">    <span class="keyword">super</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用 throw 抛错时，抛出 Error 对象而不是字符串</li>
</ul>
<p>eslint: no-throw-literal</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="string">'error'</span>               <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)    <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>行末不留空格</strong></li>
</ul>
<p>eslint: no-trailing-spaces</p>
<ul>
<li><strong>不要使用 undefined 来初始化变量</strong></li>
</ul>
<p>eslint: no-undef-init</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="literal">undefined</span>    <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="keyword">let</span> name</div><div class="line">name = <span class="string">'value'</span>          <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>循环语句中注意更新循环变量</li>
</ul>
<p>eslint: no-unmodified-loop-condition</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; j++) <span class="meta">&#123;...&#125;</span>    // ✗ avoid </div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) <span class="meta">&#123;...&#125;</span>    // ✓ ok</div></pre></td></tr></table></figure>
<ul>
<li>如果有更好的实现，尽量不要使用三元表达式</li>
</ul>
<p>eslint: no-unneeded-ternary</p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> score = <span class="keyword">val</span> ? <span class="keyword">val</span> : <span class="number">0</span>     <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">let</span> score = <span class="keyword">val</span> || <span class="number">0</span>          <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>return，throw，continue 和 break 后不要再跟代码</strong></li>
</ul>
<p>eslint: no-unreachable</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'never called'</span>)     <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>finally 代码块中不要再改变程序执行流程</li>
</ul>
<p>eslint: no-unsafe-finally</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">42</span>     <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>关系运算符的左值不要做取反操作</li>
</ul>
<p>eslint: no-unsafe-negation</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!key <span class="keyword">in</span> obj) &#123;&#125;       <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>避免不必要的 .call() 和 .apply()</li>
</ul>
<p>eslint: no-useless-call</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sum.call(null, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)   <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li>避免使用不必要的计算值作对象属性。</li>
</ul>
<p>eslint: no-useless-computed-key</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> user = &#123; [<span class="string">'name'</span>]: <span class="string">'John Doe'</span> &#125;   <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;       <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止多余的构造器</li>
</ul>
<p>eslint: no-useless-constructor</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> () &#123;      <span class="comment">// ✗ avoid </span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>禁止不必要的转义</li>
</ul>
<p>eslint: no-useless-escape</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> message = <span class="string">'Hell\o'</span>  <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>import, export 和解构操作中，禁止赋值到同名变量</strong></li>
</ul>
<p>eslint: no-useless-rename</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; config <span class="keyword">as</span> config &#125; <span class="keyword">from</span> <span class="string">'./config'</span>     <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">'./config'</span>               <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>属性前面不要加空格</li>
</ul>
<p>eslint: no-whitespace-before-property</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user <span class="selector-class">.name</span>      <span class="comment">// ✗ avoid </span></div><div class="line">user<span class="selector-class">.name</span>       <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>禁止使用 with。</li>
</ul>
<p>eslint: no-with</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> (val) <span class="meta">&#123;...&#125;</span>    // ✗ avoid</div></pre></td></tr></table></figure>
<ul>
<li><strong>对象属性换行时注意统一代码风格</strong></li>
</ul>
<p>eslint: object-property-newline</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const user = &#123;</div><div class="line"><span class="symbol">  name:</span> <span class="string">'Jane Doe'</span>, <span class="string">age:</span> <span class="number">30</span>,</div><div class="line"><span class="symbol">  username:</span> <span class="string">'jdoe86'</span>            <span class="comment">// ✗ avoid </span></div><div class="line">&#125;</div><div class="line"></div><div class="line">const user = &#123; <span class="string">name:</span> <span class="string">'Jane Doe'</span>, <span class="string">age:</span> <span class="number">30</span>, <span class="string">username:</span> <span class="string">'jdoe86'</span> &#125;    <span class="comment">// ✓ ok </span></div><div class="line"> </div><div class="line">const user = &#123;</div><div class="line"><span class="symbol">  name:</span> <span class="string">'Jane Doe'</span>,</div><div class="line"><span class="symbol">  age:</span> <span class="number">30</span>,</div><div class="line"><span class="symbol">  username:</span> <span class="string">'jdoe86'</span></div><div class="line">&#125;                                                                 <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>代码块中避免多余留白</strong></li>
</ul>
<p>eslint: padded-blocks</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (user) &#123;</div><div class="line">                            <span class="comment">// ✗ avoid </span></div><div class="line">  <span class="keyword">const</span> name = getName()</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (user) &#123;</div><div class="line">  <span class="keyword">const</span> name = getName()    <span class="comment">// ✓ ok </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>展开运算符与它的表达式间不要留空白</li>
</ul>
<p>eslint: rest-spread-spacing</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">fn</span>(<span class="params">... args</span>)</span>    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="function"><span class="title">fn</span>(<span class="params">...args</span>)</span>     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>遇到分号时空格要留后不留前</strong></li>
</ul>
<p>eslint: semi-spacing</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ;i &lt; items.length ;i++) <span class="meta">&#123;...&#125;</span>    // ✗ avoid </div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) <span class="meta">&#123;...&#125;</span>    // ✓ ok</div></pre></td></tr></table></figure>
<ul>
<li><strong>代码块首尾留空格</strong></li>
</ul>
<p>eslint: space-before-blocks</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (admin)<span class="meta">&#123;...&#125;</span>     // ✗ avoid </div><div class="line"><span class="keyword">if</span> (admin) <span class="meta">&#123;...&#125;</span>    // ✓ ok</div></pre></td></tr></table></figure>
<ul>
<li><strong>圆括号间不留空格</strong> </li>
</ul>
<p>eslint: space-in-parens</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getName</span><span class="params">( name )</span></span>     <span class="comment">// ✗ avoid </span></div><div class="line"><span class="function"><span class="title">getName</span><span class="params">(name)</span></span>       <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>一元运算符后面跟一个空格</strong></li>
</ul>
<p>eslint: space-unary-ops</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span>!admin        <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">typeof</span> !admin        <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>注释首尾留空格</strong></li>
</ul>
<p>eslint: spaced-comment</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>comment           <span class="regexp">//</span> ✗ avoid </div><div class="line"><span class="regexp">//</span> comment          <span class="regexp">//</span> ✓ ok </div><div class="line"> </div><div class="line"><span class="regexp">/*comment*/</span>         <span class="regexp">//</span> ✗ avoid </div><div class="line"><span class="regexp">/* comment */</span>       <span class="regexp">//</span> ✓ ok</div></pre></td></tr></table></figure>
<ul>
<li><strong>模板字符串中变量前后不加空格</strong></li>
</ul>
<p>eslint: template-curly-spacing</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> message = <span class="string">`Hello, <span class="subst">$&#123; name &#125;</span>`</span>    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">const</span> message = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>      <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>检查 NaN 的正确姿势是使用 isNaN()</li>
</ul>
<p>eslint: use-isnan</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (price === <span class="literal">NaN</span>) &#123; &#125;      <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(price)) &#123; &#125;       <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>用合法的字符串跟 typeof 进行比较操作</li>
</ul>
<p>eslint: valid-typeof</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">typeof</span> <span class="built_in">name</span> === <span class="string">'undefimed'</span>     <span class="comment">// ✗ avoid </span></div><div class="line"><span class="built_in">typeof</span> <span class="built_in">name</span> === <span class="string">'undefined'</span>     <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>自执行匿名函数 (IIFEs) 使用括号包裹</strong></li>
</ul>
<p>eslint: wrap-iife</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;()     <span class="comment">// ✗ avoid </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> getName = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;())   <span class="comment">// ✓ ok </span></div><div class="line"><span class="keyword">const</span> getName = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;)()   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>yield <em> 中的 </em> 前后都要有空格</li>
</ul>
<p>eslint: yield-star-spacing</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">yield</span>* increment()    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">yield</span> * increment()   <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<ul>
<li>请书写优雅的条件语句（avoid Yoda conditions）。</li>
</ul>
<p>eslint: yoda</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(42 === age)</span> &#123; &#125;    <span class="comment">// ✗ avoid </span></div><div class="line"><span class="keyword">if</span> <span class="comment">(age === 42)</span> &#123; &#125;    <span class="comment">// ✓ ok</span></div></pre></td></tr></table></figure>
<p>ps: 关于分号</p>
<ul>
<li>不要使用分号</li>
</ul>
<p>eslint: semi</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.alert(<span class="string">'hi'</span>)   <span class="comment">// ✓ ok </span></div><div class="line"><span class="built_in">window</span>.alert(<span class="string">'hi'</span>);  <span class="comment">// ✗ avoid</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>不要使用 (, [, or ` 等作为一行的开始。在没有分号的情况下代码压缩后会导致报错，而坚持这一规范则可避免出错</strong></li>
</ul>
<p>eslint: no-unexpected-multiline</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓ ok </span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.alert(<span class="string">'ok'</span>)</div><div class="line">&#125;())</div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.alert(<span class="string">'ok'</span>)</div><div class="line">&#125;())</div><div class="line"><span class="comment">// ✓ ok </span></div><div class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(bar)</div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(bar)</div><div class="line"><span class="comment">// ✓ ok </span></div><div class="line">;<span class="string">`hello`</span>.indexOf(<span class="string">'o'</span>)</div><div class="line"> </div><div class="line"><span class="comment">// ✗ avoid </span></div><div class="line"><span class="string">`hello`</span>.indexOf(<span class="string">'o'</span>)</div></pre></td></tr></table></figure>
<p>有时候也不一定要这么写，譬如：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(bar)</div></pre></td></tr></table></figure>
<p>建议的写法是:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">nums.forEach(bar)</div></pre></td></tr></table></figure>
<h1 id="omm-mobile-中添加的规则"><a href="#omm-mobile-中添加的规则" class="headerlink" title="omm-mobile 中添加的规则"></a>omm-mobile 中添加的规则</h1><p>eslint 规则文件: .eslintrc<br>eslint 忽略规则: .eslintignore</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">"globals":</span> <span class="string">&#123;</span>  <span class="string">//</span> <span class="string">脚本在执行期间访问的额外全局变量,设置每个变量等于</span> <span class="literal">true</span> <span class="string">允许变量被重写，或</span> <span class="literal">false</span> <span class="string">不允许被重写</span></div><div class="line"><span class="attr">  "aladdin":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "bow":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "window":</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">  "risk":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "location":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "BETA":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "VERSION":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "history":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "ENV":</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">  "Swiper":</span> <span class="literal">false</span></div><div class="line"><span class="string">&#125;,</span></div><div class="line"><span class="attr">"rules":</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    "indent":</span> <span class="string">[2,4],</span>  <span class="string">//</span> <span class="string">强制使用4个空格为缩进风格</span></div><div class="line"><span class="attr">    "linebreak-style":</span> <span class="string">[2,"unix"],</span>  <span class="string">//</span> <span class="string">强制使用unix换行风格</span></div><div class="line"><span class="attr">    "quotes":</span> <span class="string">[2,"single"],</span> <span class="string">//</span> <span class="string">强制使用单引号类型</span></div><div class="line"><span class="attr">    "semi":</span> <span class="string">[2,"always"],</span> <span class="string">//</span> <span class="string">强制分号结尾</span></div><div class="line"><span class="attr">    "one-var":</span> <span class="string">[0,"always"],</span>  <span class="string">//</span> <span class="string">关闭连续声明规则</span></div><div class="line"><span class="attr">    "no-new":</span> <span class="string">[0]</span> <span class="string">//</span> <span class="string">关闭'创建对象实例后需要赋值给变量'的规则</span></div></pre></td></tr></table></figure>
<p>“off”或0 -关闭规则<br>“warn” 或1 - 开启规则, 使用警告 程序不会退出<br>“error”或2 - 开启规则, 使用错误 程序退出</p>
<h1 id="各个编辑器的standard相关插件"><a href="#各个编辑器的standard相关插件" class="headerlink" title="各个编辑器的standard相关插件"></a>各个编辑器的standard相关插件</h1><h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><p>通过 Package Control，安装 SublimeLinter 和 SublimeLinter-contrib-standard。</p>
<p>如果想要保存时自动格式化，还需安装 StandardFormat</p>
<h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>安装 vscode-standardjs（已经包含了自动格式化）。</p>
<p>安装 vscode-standardjs-snippets 以获得 JS snippets。</p>
<p>安装 vscode-react-standard 以获得 React snippets。</p>
<h2 id="WebStorm-PhpStorm-IntelliJ-RubyMine-JetBrains-等-jetbrains-全家桶系列"><a href="#WebStorm-PhpStorm-IntelliJ-RubyMine-JetBrains-等-jetbrains-全家桶系列" class="headerlink" title="WebStorm (PhpStorm, IntelliJ, RubyMine, JetBrains 等 jetbrains 全家桶系列)"></a>WebStorm (PhpStorm, IntelliJ, RubyMine, JetBrains 等 jetbrains 全家桶系列)</h2><p>WebStorm 在其 IDE 中 自带 standard 规范。</p>
<blockquote>
<p>原 文:<br><a href="http://meiminjun.github.io/standard%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/">http://meiminjun.github.io/standard%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/006tKfTcgy1ff6vedjfw7j30kz0o7t9v.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用standard代码风格规则说明（116条）&quot;&gt;&lt;a href=&quot;#使用standard代码风格规则说明（116条）&quot; class=&quot;headerlink&quot; title=&quot;使用standard代码风格规则说明（116条）&quot;&gt;&lt;/a&gt;使用standard代码风格规则说明（116条）&lt;/h1&gt;
    
    </summary>
    
    
      <category term="eslint" scheme="http://meiminjun.github.io/tags/eslint/"/>
    
      <category term="standard" scheme="http://meiminjun.github.io/tags/standard/"/>
    
  </entry>
  
  <entry>
    <title>vue-router 三种加载方式速度评测</title>
    <link href="http://meiminjun.github.io/vue-router/"/>
    <id>http://meiminjun.github.io/vue-router/</id>
    <published>2017-04-12T22:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1feuj2phraug30gn0c1qv7.gif" alt=""></p>
<h2 id="ensure-方式"><a href="#ensure-方式" class="headerlink" title="ensure 方式"></a><a href="https://github.com/vuejs/vue-router/blob/next/examples/lazy-loading/app.js" target="_blank" rel="external">ensure 方式</a></h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> const Index = r =&gt; <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'@/views/deposit/deposit_index'</span>)), <span class="string">'Index'</span>)</div><div class="line"><span class="regexp">//</span> const Product = r =&gt; <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'@/views/deposit/deposit_product'</span>)), <span class="string">'Product'</span>)</div><div class="line"><span class="regexp">//</span> const ProductSave = r =&gt; <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'@/views/deposit/deposit_product_save'</span>)), <span class="string">'ProductSave'</span>)</div><div class="line"><span class="regexp">//</span> const My = r =&gt; <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'@/views/deposit/deposit_my'</span>)), <span class="string">'My'</span>)</div><div class="line"><span class="regexp">//</span> const MyDetail = r =&gt; <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'@/views/deposit/deposit_my_detail'</span>)), <span class="string">'MyDetail'</span>)</div><div class="line"><span class="regexp">//</span> const MyTransDetail = r =&gt; <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'@/views/deposit/deposit_my_transdetail'</span>)), <span class="string">'MyTransDetail'</span>)</div></pre></td></tr></table></figure>
<p>全部采用ensure的方式运行,首屏时间则会慢很多，每次打开的时间记录<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">首屏时间: 324ms</span></div><div class="line"><span class="section">首屏时间: 552ms</span></div><div class="line"><span class="section">首屏时间: 457ms</span></div><div class="line"><span class="section">首屏时间: 275ms</span></div><div class="line"><span class="section">首屏时间: 250ms</span></div><div class="line"><span class="section">首屏时间: 330ms</span></div><div class="line"><span class="section">首屏时间: 395ms</span></div><div class="line"><span class="section">首屏时间: 314ms</span></div><div class="line"><span class="section">首屏时间: 276ms</span></div><div class="line"><span class="section">首屏时间: 314ms</span></div></pre></td></tr></table></figure></p>
<p><strong>平均时间：348.7ms</strong></p>
<p>下面测试跳转时的时间如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">首页跳转测试: 212ms</span></div><div class="line"><span class="section">首页跳转测试: 161ms</span></div><div class="line"><span class="section">首页跳转测试: 161ms</span></div><div class="line"><span class="section">首页跳转测试: 54.8ms</span></div><div class="line"><span class="section">首页跳转测试: 156ms</span></div><div class="line"><span class="section">首页跳转测试: 58.3ms</span></div><div class="line"><span class="section">首页跳转测试: 52.3ms</span></div><div class="line"><span class="section">首页跳转测试: 84.2ms</span></div><div class="line"><span class="section">首页跳转测试: 150ms</span></div><div class="line"><span class="section">首页跳转测试: 168ms</span></div></pre></td></tr></table></figure></p>
<p><strong>平均时间：125.76ms</strong></p>
<h2 id="amd-方式"><a href="#amd-方式" class="headerlink" title="amd 方式"></a>amd 方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/deposit/deposit_index'</span>], resolve)</div><div class="line"><span class="keyword">const</span> Product = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/deposit/deposit_product'</span>], resolve)</div><div class="line"><span class="keyword">const</span> ProductSave = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/deposit/deposit_product_save'</span>], resolve)</div><div class="line"><span class="keyword">const</span> My = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/deposit/deposit_my'</span>], resolve)</div><div class="line"><span class="keyword">const</span> MyDetail = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/deposit/deposit_my_detail'</span>], resolve)</div><div class="line"><span class="keyword">const</span> MyTransDetail = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/deposit/deposit_my_transdetail'</span>], resolve)</div></pre></td></tr></table></figure>
<p>如果是webpack2 可以使用<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> const Index = <span class="function"><span class="params">()</span> =&gt;</span> System.<span class="keyword">import</span>(<span class="string">'@/views/deposit/deposit_index'</span>)</div></pre></td></tr></table></figure></p>
<p>首屏时间如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">首屏时间: 480ms</span></div><div class="line"><span class="section">首屏时间: 425ms</span></div><div class="line"><span class="section">首屏时间: 310ms</span></div><div class="line"><span class="section">首屏时间: 360ms</span></div><div class="line"><span class="section">首屏时间: 318ms</span></div><div class="line"><span class="section">首屏时间: 328ms</span></div><div class="line"><span class="section">首屏时间: 502ms</span></div><div class="line"><span class="section">首屏时间: 324ms</span></div><div class="line"><span class="section">首屏时间: 313ms</span></div><div class="line"><span class="section">首屏时间: 505ms</span></div></pre></td></tr></table></figure>
<p><strong>平均时间：386.5ms</strong></p>
<p>下面测试按照amd方式跳转时的时间如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">首页跳转测试: 50<span class="selector-class">.6ms</span></div><div class="line">首页跳转测试: 48<span class="selector-class">.2ms</span></div><div class="line">首页跳转测试: 51<span class="selector-class">.2ms</span></div><div class="line">首页跳转测试: 54<span class="selector-class">.0ms</span></div><div class="line">首页跳转测试: 48<span class="selector-class">.5ms</span></div><div class="line">首页跳转测试: 49<span class="selector-class">.1ms</span></div><div class="line">首页跳转测试: 48<span class="selector-class">.4ms</span></div><div class="line">首页跳转测试: 41<span class="selector-class">.9ms</span></div><div class="line">首页跳转测试: 46<span class="selector-class">.2ms</span></div><div class="line">首页跳转测试: 47<span class="selector-class">.4ms</span></div></pre></td></tr></table></figure></p>
<p>平均时间：48.55ms</p>
<h2 id="常规加载方式"><a href="#常规加载方式" class="headerlink" title="常规加载方式"></a>常规加载方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'@/views/deposit/deposit_index'</span></div><div class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">'@/views/deposit/deposit_product'</span></div><div class="line"><span class="keyword">import</span> ProductSave <span class="keyword">from</span> <span class="string">'@/views/deposit/deposit_product_save'</span></div><div class="line"><span class="keyword">import</span> My <span class="keyword">from</span> <span class="string">'@/views/deposit/deposit_my'</span></div><div class="line"><span class="keyword">import</span> MyDetail <span class="keyword">from</span> <span class="string">'@/views/deposit/deposit_my_detail'</span></div><div class="line"><span class="keyword">import</span> MyTransDetail <span class="keyword">from</span> <span class="string">'@/views/deposit/deposit_my_transdetail'</span></div></pre></td></tr></table></figure>
<p>全部采用这种方式，速度会要快很多，首屏时间如下<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">首屏时间: 111ms</span></div><div class="line"><span class="section">首屏时间: 119ms</span></div><div class="line"><span class="section">首屏时间: 76.6ms</span></div><div class="line"><span class="section">首屏时间: 76.5ms</span></div><div class="line"><span class="section">首屏时间: 72.8ms</span></div><div class="line"><span class="section">首屏时间: 108ms</span></div><div class="line"><span class="section">首屏时间: 122ms</span></div><div class="line"><span class="section">首屏时间: 84.3ms</span></div><div class="line"><span class="section">首屏时间: 123ms</span></div><div class="line"><span class="section">首屏时间: 113ms</span></div></pre></td></tr></table></figure></p>
<p><strong>平均时间：100.62ms</strong></p>
<p>采用此方式做跳转测试，如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">首页跳转测试: 26<span class="selector-class">.9ms</span></div><div class="line">首页跳转测试: 25<span class="selector-class">.0ms</span></div><div class="line">首页跳转测试: 31<span class="selector-class">.2ms</span></div><div class="line">首页跳转测试: 31<span class="selector-class">.1ms</span></div><div class="line">首页跳转测试: 23<span class="selector-class">.7ms</span></div><div class="line">首页跳转测试: 26<span class="selector-class">.6ms</span></div><div class="line">首页跳转测试: 29<span class="selector-class">.4ms</span></div><div class="line">首页跳转测试: 27<span class="selector-class">.6ms</span></div><div class="line">首页跳转测试: 30<span class="selector-class">.2ms</span></div><div class="line">首页跳转测试: 24<span class="selector-class">.2ms</span></div></pre></td></tr></table></figure></p>
<p><strong>平均时间为：27.59ms</strong></p>
<p>总结：</p>
<table>
<thead>
<tr>
<th>加载方式</th>
<th>首屏平均时间</th>
<th>跳转页面平均时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>常规加载</td>
<td>100.62ms</td>
<td>27.59ms</td>
</tr>
<tr>
<td>amd加载</td>
<td>386.5ms</td>
<td>48.55ms</td>
</tr>
<tr>
<td>ensure加载</td>
<td>348.7ms</td>
<td>125.76ms</td>
</tr>
</tbody>
</table>
<h2 id="amd-与-ensure-区别"><a href="#amd-与-ensure-区别" class="headerlink" title="amd 与 ensure 区别"></a>amd 与 ensure 区别</h2><ul>
<li>require-amd </li>
</ul>
<p>说明: 同AMD规范的require函数，使用时传递一个模块数组和回调函数，模块都被下载下来且都被执行后才执行回调函数</p>
<p>语法: require(dependencies: String[], [callback: function(…)])<br>参数<br>dependencies: 模块依赖数组<br>callback: 回调函数</p>
<ul>
<li>require-ensure </li>
</ul>
<p>说明: require.ensure在需要的时候才下载依赖的模块，当参数指定的模块都下载下来了（下载下来的模块还没执行），便执行参数指定的回调函数。require.ensure会创建一个chunk，且可以指定该chunk的名称，如果这个chunk名已经存在了，则将本次依赖的模块合并到已经存在的chunk中，最后这个chunk在webpack构建的时候会单独生成一个文件。</p>
<p>语法: require.ensure(dependencies: String[], callback: function([require]), [chunkName: String])<br>dependencies: 依赖的模块数组<br>callback: 回调函数，该函数调用时会传一个require参数<br>chunkName: 模块名，用于构建时生成文件时命名使用</p>
<p>注意点：requi.ensure的模块只会被下载下来，不会被执行，只有在回调函数使用require(模块名)后，这个模块才会被执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ww4.sinaimg.cn/large/006tNc79gy1feuj2phraug30gn0c1qv7.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ensure-方式&quot;&gt;&lt;a href=&quot;#ensure-方式&quot; class=&quot;h
    
    </summary>
    
    
      <category term="vue" scheme="http://meiminjun.github.io/tags/vue/"/>
    
      <category term="vue-router" scheme="http://meiminjun.github.io/tags/vue-router/"/>
    
      <category term="webpack" scheme="http://meiminjun.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue-vuex 上手</title>
    <link href="http://meiminjun.github.io/vue-vuex/"/>
    <id>http://meiminjun.github.io/vue-vuex/</id>
    <published>2017-04-11T22:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gy1fevgyafqesj20m80hht9k.jpg" alt=""></p>
<h2 id="Vuex概要"><a href="#Vuex概要" class="headerlink" title="Vuex概要"></a>Vuex概要</h2><h3 id="简单解释"><a href="#简单解释" class="headerlink" title="简单解释"></a>简单解释</h3><p>Vuex 使用 单一状态树,通俗理解就是一个应用的数据集合，可以想象为一个“前端数据库”，让其在各个页面上实现数据的共享，并且可操作</p>
<p>Vuex分成四个部分：</p>
<ol>
<li>State：单一状态树</li>
<li>Getters：状态获取</li>
<li>Mutations：触发同步事件</li>
<li>Actions：提交mutation，可以包含异步操作</li>
</ol>
<p>正如上图所示，Vuex的数据总是“单向流动”</p>
<ul>
<li>用户访问页面并触发action</li>
<li>action提交mutation事件</li>
<li>mutation事件更改state状态</li>
<li>state状态改变后更新页面(vue comptents)</li>
</ul>
<p>Vuex 规定，属于应用层级的状态只能通过 Mutation 中的方法来修改，而派发 Mutation 中的事件只能通过 action。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>从左到右，从组件出发，组件中调用 action，在 action 这一层级我们可以和后台数据交互，比如获取初始化的数据源，或者中间数据的过滤等。然后在 action 中去派发 Mutation。Mutation 去触发状态的改变，状态的改变，将触发视图的更新。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><p>数据流都是单向的</p>
</li>
<li><p>组件能够调用 action</p>
</li>
<li><p>action 用来派发 Mutation</p>
</li>
<li><p>只有 mutation 可以改变状态</p>
</li>
<li><p>store 是响应式的，无论 state 什么时候更新，组件都将同步更新</p>
</li>
</ul>
<h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>在 store 中的 state 对象，可以理解为 Vue 实例中的 data 对象，它用来保存最基本的数据。</p>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import Vue <span class="keyword">from</span> 'Vue';</div><div class="line">import Vuex <span class="keyword">from</span> 'Vuex';</div><div class="line"></div><div class="line">Vue.use(Vuex);</div><div class="line"></div><div class="line">let store = new Vuex.Store(&#123;</div><div class="line">    <span class="keyword">state</span>: &#123;</div><div class="line">        <span class="keyword">state</span>A: 'a',</div><div class="line">        <span class="keyword">state</span>B: 'b',</div><div class="line">        <span class="keyword">state</span>C: 'c'</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.<span class="keyword">log</span>(store.<span class="keyword">state</span>.<span class="keyword">state</span>A); // a</div></pre></td></tr></table></figure>
<p>在 Vue 中获取 store 中的状态</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let app = new Vue(&#123;</div><div class="line">　　 el: '<span class="comment">#demo',</span></div><div class="line">    template: '<span class="variable">&lt;h1&gt;</span>&#123;&#123;myState&#125;&#125;&lt;/h1&gt;',</div><div class="line">    computed: &#123;</div><div class="line">         myState() &#123;</div><div class="line">            return store.<span class="keyword">state</span>.<span class="keyword">state</span>A;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最简单的方式就是通过 Vue 中的计算属性(computed) 来将 store 中的状态映射为 Vue 的数据。但是当数据多时这种方法明显效率过低，所以 Vuex 中提供了 mapState 方法用于批量映射 store 中的状态。</p>
<h3 id="mapState映射"><a href="#mapState映射" class="headerlink" title="mapState映射"></a>mapState映射</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import &#123; mapState &#125; <span class="keyword">from</span> 'Vuex';</div><div class="line"></div><div class="line">let app = new Vue(&#123;</div><div class="line">    el: '<span class="comment">#demo',</span></div><div class="line">    store,</div><div class="line">    data: &#123;</div><div class="line">        local: 'L'</div><div class="line">    &#125;,</div><div class="line">    computed: mapState(&#123;</div><div class="line">        <span class="keyword">state</span>A: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.<span class="keyword">state</span>A,</div><div class="line">        <span class="keyword">state</span>B: '<span class="keyword">state</span>B',</div><div class="line">        <span class="keyword">state</span>C(<span class="keyword">state</span>) &#123;</div><div class="line">            return <span class="keyword">state</span>.<span class="keyword">state</span>C + this.local;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上例中，a. 可以通过 ES6 中的箭头函数进行数据的映射，b. 当计算属性的名称与 state 的属性名一致时可能直接通过字符串赋值，c. 当需要引用上下文中的 data 属性实，只能通过常规函数来使 this 生效。</p>
<p>如果所有计算属性的名称都与 state 一致，可以在 mapState 中以数组的方式进行映射。如果 Vue 中已经存在计算属性，可以通过 ES6 的对象展开运算符 (…) 进行组合。</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let app = new Vue(&#123;</div><div class="line">    el: '<span class="comment">#demo',</span></div><div class="line">    store,</div><div class="line">    computed: &#123;</div><div class="line">        local() &#123;</div><div class="line">             return 'Local';</div><div class="line">        &#125;,</div><div class="line">        ...mapState(['<span class="keyword">state</span>A', '<span class="keyword">state</span>B', '<span class="keyword">state</span>C'])</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong> 在 Vuex 模块化中，state 是唯一会根据组合时模块的别名来添加层级的，后面的 getters、mutations 以及 actions 都是直接合并在 store 下。</strong></p>
<p>例如，访问模块 a 中的 state，要通过 store.state.a，访问根 store 上申明的 state，依然是通过 store.state.xxx 直接访问。</p>
<h2 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h2><p>在vuex中，更改state 的方式只有提交mutation.大家可以把他就想象成vue中methods 中的一个方法。</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let store = new Vuex.Store(&#123;</div><div class="line">    <span class="keyword">state</span>: &#123;</div><div class="line">        count: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    mutations: &#123;</div><div class="line">        addCount(<span class="keyword">state</span>) &#123;</div><div class="line">            <span class="keyword">state</span>.count ++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">store.commit('addCount');</div><div class="line"></div><div class="line">console.<span class="keyword">log</span>(store.<span class="keyword">state</span>.count); // <span class="number">1</span></div></pre></td></tr></table></figure>
<p>想要改变状态的时候都是用store.commit的方式</p>
<h3 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h3><blockquote>
<p>每一个 mutation 都有一个字符串的事件类型和一个回调函数,每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p>
</blockquote>
<p>第一种方式：提交载荷（Payload）</p>
<p>你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">mutations: &#123;</div><div class="line">    addCount(<span class="keyword">state</span>, n) &#123;</div><div class="line">        <span class="keyword">state</span>.count += n;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">store.commit('addCount', <span class="number">10</span>);</div></pre></td></tr></table></figure>
<p><strong> 官方推荐，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读： </strong></p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// ...</div><div class="line">mutations: &#123;</div><div class="line">  increment (<span class="keyword">state</span>, payload) &#123;</div><div class="line">    <span class="keyword">state</span>.count += payload.amount</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">store.commit('increment', &#123;</div><div class="line">  amount: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>第二种方式：对象风格的传参方式</p>
<p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'increment'</span>,	// 事件名</div><div class="line">  amount: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Mutations-需遵守-Vue-的响应规则"><a href="#Mutations-需遵守-Vue-的响应规则" class="headerlink" title="Mutations 需遵守 Vue 的响应规则"></a>Mutations 需遵守 Vue 的响应规则</h2><p>在 mutation 中更改 state 应该以新对象替换老对象，不要在直接原对象上直接修改。</p>
<ul>
<li>最好提前在你的 store 中初始化好所有所需属性。</li>
<li>当需要在对象上添加新属性时，你应该<ul>
<li>使用 Vue.set(obj, ‘newProp’, 123),或者</li>
<li>以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">state</span>.obj = &#123; ...<span class="keyword">state</span>.obj, newProp: <span class="number">123</span> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="mutation-必须是同步函数"><a href="#mutation-必须是同步函数" class="headerlink" title="mutation 必须是同步函数"></a>mutation 必须是同步函数</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mutations: &#123;</div><div class="line">  someMutation (<span class="keyword">state</span>) &#123;</div><div class="line">    api.callAsyncMethod(() =&gt; &#123;</div><div class="line">      <span class="keyword">state</span>.count++</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用 —— 实质上任何在回调函数中进行的的状态的改变都是不可追踪的。</p>
<h2 id="在组件中提交-Mutations"><a href="#在组件中提交-Mutations" class="headerlink" title="在组件中提交 Mutations"></a>在组件中提交 Mutations</h2><p>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      <span class="string">'increment'</span> <span class="regexp">//</span> 映射 <span class="keyword">this</span>.increment() 为 <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</div><div class="line">    ]),</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      add: <span class="string">'increment'</span> <span class="regexp">//</span> 映射 <span class="keyword">this</span>.add() 为 <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在 mutation 中混合异步调用会导致你的程序很难调试。例如，当你能调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在 Vuex 中，mutation 都是同步事务：</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">store.commit(<span class="string">'increment'</span>)</div><div class="line"><span class="regexp">//</span> 任何由 <span class="string">"increment"</span> 导致的状态变更都应该在此刻完成。</div></pre></td></tr></table></figure>
<h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>与 mutations 类似，不同模块的 actions 均可以通过 store.dispatch 直接触发。</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">    <span class="keyword">state</span>: &#123;</div><div class="line">        count: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    mutations: &#123;</div><div class="line">        sayCountA(<span class="keyword">state</span>) &#123;</div><div class="line">            console.<span class="keyword">log</span>('Module A count: ', <span class="keyword">state</span>.count);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    actions: &#123;</div><div class="line">        maAction(context) &#123;</div><div class="line">            context.dispatch('mbAction');</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const moduleB = &#123;</div><div class="line">    <span class="keyword">state</span>: &#123;</div><div class="line">        count: <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">    mutations: &#123;</div><div class="line">        sayCountB(<span class="keyword">state</span>, num) &#123;</div><div class="line">            console.<span class="keyword">log</span>('Module B count: ', <span class="keyword">state</span>.count+num);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    action: &#123;</div><div class="line">        mbAction(&#123; commit, rootState &#125;) &#123;</div><div class="line">            commit('sayCountA');</div><div class="line">            commit('sayCountB', rootState.a.count);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const store = &#123;</div><div class="line">    modules: &#123;</div><div class="line">        a: moduleA,</div><div class="line">        b: moduleB</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">store.dispatch('maAction'); // Module A count: <span class="number">1</span>、Module B count: <span class="number">3</span></div></pre></td></tr></table></figure>
<p>action 的回调函数接收一个 context 上下文参数，context 包含：1. state、2. rootState、3. getters、4. mutations、5. actions 五个属性，</p>
<blockquote>
<p>有一点要注意的是，将 store 中的 state 绑定到 Vue 组件中的 computed 计算属性后，对 state 进行更改需要通过 mutation 或者 action，在 Vue 组件中直接进行赋值 (this.myState = ‘ABC’) 是不会生效的。</p>
</blockquote>
<h2 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h2><p>这个属性有点类似过滤器的作用，只不过它是新增的，有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneTodosCount () &#123;</div><div class="line">    return this.<span class="variable">$store</span><span class="selector-class">.state</span><span class="selector-class">.todos</span><span class="selector-class">.filter</span>(todo =&gt; todo.done).length</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="什么时候使用？"><a href="#什么时候使用？" class="headerlink" title="什么时候使用？"></a>什么时候使用？</h3><p>当需要对 store 中的数据进行处理，或者需要对处理后的数据在多个组件进行复用，就可以使用 Getters 来处理，Getters 也可以理解为 Vue 中的计算属性 (computed)。</p>
<p>vuex 允许我们在 store 中定义『getters』（可以认为是 store 的计算属性）。Getters 接受 state 作为其第一个参数：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let store = new Vuex.Store(&#123;</div><div class="line">    <span class="keyword">state</span>: &#123;</div><div class="line">        nowDate: new Date()</div><div class="line">    &#125;,</div><div class="line">    getters: &#123;</div><div class="line">        dateFormat(<span class="keyword">state</span>, getters) &#123;</div><div class="line">            let date = <span class="keyword">state</span>.nowDate;</div><div class="line">            return `$&#123;date.getFullYear()&#125;-$&#123;date.getMonth()+<span class="number">1</span>&#125;-$&#123;date.getDate()&#125; / $&#123;date.getHours()&#125;:$&#123;date.getMinutes()&#125;`;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Getters 会暴露为 store.getters 对象：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>('The <span class="built_in">time</span> <span class="built_in">is</span> now:', store.getters.dateFormat); // The <span class="built_in">time</span> <span class="built_in">is</span> now: <span class="number">2017</span>-<span class="number">2</span>-<span class="number">10</span> / <span class="number">17</span>:<span class="number">28</span></div></pre></td></tr></table></figure>
<p>Getters 也可以接受其他 getters 作为第二个参数：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getters: &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  doneTodosCount: (state, getters) =&gt; &#123;</div><div class="line">    return getters<span class="selector-class">.doneTodos</span><span class="selector-class">.length</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">store<span class="selector-class">.getters</span><span class="selector-class">.doneTodosCount</span> <span class="comment">// -&gt; 1</span></div></pre></td></tr></table></figure>
<p>我们可以很容易地在任何组件中使用它：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneTodosCount () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.doneTodosCount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h3><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性，类似于mapState：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: &#123;</div><div class="line">  <span class="comment">// 使用对象展开运算符将 getters 混入 computed 对象中</span></div><div class="line">    ...mapGetters([</div><div class="line">      <span class="string">'doneTodosCount'</span>,</div><div class="line">      <span class="string">'anotherGetter'</span>,</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mapGetters</span>(&#123;</div><div class="line">  <span class="comment">// 映射 this.doneCount 为 store.getters.doneTodosCount</span></div><div class="line">  <span class="attribute">doneCount</span>: <span class="string">'doneTodosCount'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>为了解决getters、mutations 以及 actions 都是直接合并在 store 下，所以就需要开发者一定要注意types命名</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * mulations 常量，根据页面组件来分组</div><div class="line"> * 命名方式：<span class="comment">[MODULE]</span>/<span class="comment">[ACTION]</span>_<span class="comment">[CONTAINER]</span>_<span class="comment">[FUNCTION]</span>_<span class="comment">[COMPONENT]</span>_<span class="comment">[STATE]</span></div><div class="line"> * MODULE: 模块名<span class="comment">[deposit]</span></div><div class="line"> * ACTION: 行为<span class="comment">[change, set, add...]</span></div><div class="line"> * <span class="keyword">CONTAINER</span>: 组件所在的父级容器或者所在页面</div><div class="line"> * FUNCTION: 组件表示的业务功能名</div><div class="line"> * COMPONENT: 组件<span class="comment">[input, dropdown...]</span></div><div class="line"> * STATE: 组件状态, 单一状态<span class="comment">[open, close, show...]</span></div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/69a9ed59gy1fevgyafqesj20m80hht9k.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Vuex概要&quot;&gt;&lt;a href=&quot;#Vuex概要&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
      <category term="vue" scheme="http://meiminjun.github.io/tags/vue/"/>
    
      <category term="vuex" scheme="http://meiminjun.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置解析</title>
    <link href="http://meiminjun.github.io/webpack/"/>
    <id>http://meiminjun.github.io/webpack/</id>
    <published>2017-04-11T21:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用配置解析（这里以vue脚手架生成为例）"><a href="#常用配置解析（这里以vue脚手架生成为例）" class="headerlink" title="常用配置解析（这里以vue脚手架生成为例）"></a>常用配置解析（这里以vue脚手架生成为例）</h1><h2 id="输入-entry"><a href="#输入-entry" class="headerlink" title="输入(entry)"></a>输入(entry)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">entry</span>: &#123;</div><div class="line">  <span class="attribute">app</span>: <span class="string">'./src/main.js'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">output</span>: &#123;</div><div class="line">  <span class="attribute">path</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'./dist'</span>),  // 文件构建完成后的生成目录</div><div class="line">  publicPath: <span class="string">'/dist/'</span>,	// build.js相对于服务器环境的哪层目录</div><div class="line">  filename: <span class="string">'build.js'</span> // 代码生成的文件名</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="devtool-开发工具"><a href="#devtool-开发工具" class="headerlink" title="devtool(开发工具)"></a>devtool(开发工具)</h2><table>
<thead>
<tr>
<th>devtool</th>
<th style="text-align:right">构建</th>
<th style="text-align:right">重构建</th>
<th style="text-align:right">生产环境</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr>
<td>eval</td>
<td style="text-align:right">+++</td>
<td style="text-align:right">+++</td>
<td style="text-align:right">no</td>
<td>生成后的代码</td>
</tr>
<tr>
<td>cheap-eval-source-map</td>
<td style="text-align:right">+</td>
<td style="text-align:right">++</td>
<td style="text-align:right">no</td>
<td>转换过的代码（仅限行）</td>
</tr>
<tr>
<td>cheap-source-map</td>
<td style="text-align:right">+</td>
<td style="text-align:right">o</td>
<td style="text-align:right">yes</td>
<td>转换过的代码（仅限行）</td>
</tr>
<tr>
<td>cheap-module-eval-source-map</td>
<td style="text-align:right">o</td>
<td style="text-align:right">++</td>
<td style="text-align:right">no</td>
<td>原始源码（仅限行）</td>
</tr>
<tr>
<td>cheap-module-source-map</td>
<td style="text-align:right">o</td>
<td style="text-align:right">-</td>
<td style="text-align:right">yes</td>
<td>原始源码（仅限行）</td>
</tr>
<tr>
<td>eval-source-map</td>
<td style="text-align:right">–</td>
<td style="text-align:right">+</td>
<td style="text-align:right">no</td>
<td>原始源码</td>
</tr>
<tr>
<td>source-map</td>
<td style="text-align:right">–</td>
<td style="text-align:right">–</td>
<td style="text-align:right">yes</td>
<td>原始源码</td>
</tr>
<tr>
<td>nosources-source-map</td>
<td style="text-align:right">–</td>
<td style="text-align:right">–</td>
<td style="text-align:right">yes</td>
<td>无源码内容</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>表示较快，- 表示较慢，o 表示时间相同</li>
</ul>
</blockquote>
<p>其中一些值适用于开发环境，一些适用于生产环境。对于开发环境，通常希望更快速的 Source Map，需要添加到 bundle 中以增加体积为代价，但是对于生产环境，则希望更精准的 Source Map，需要从 bundle 中分离并独立存在。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// cheap-module-<span class="built_in">eval</span>-<span class="keyword">source</span>-<span class="keyword">map</span> <span class="keyword">is</span> faster <span class="keyword">for</span> development</div><div class="line">devtoo<span class="variable">l:</span> <span class="string">'#cheap-module-eval-source-map'</span>,</div></pre></td></tr></table></figure>
<p>cheap-module-eval-source-map - 就像 eval-source-map，每个模块使用 eval() 执行，并且 SourceMap 转换为 DataUrl 后添加到 eval() 中。”低开销”是因为它没有生成列映射(column map)，只是映射行数。</p>
<h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">devtool:</span> <span class="string">'#source-map'</span></div></pre></td></tr></table></figure>
<p>source-map - 生成完整的 SourceMap，输出为独立文件。由于在 bundle 中添加了引用注释，所以开发工具可以知道在哪里去找到 SourceMap。</p>
<h2 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h2><p>设置需要处理的模块</p>
<h3 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h3><p>设置如何处理项目不同类型的模块的规则</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.vue$/</span>, <span class="comment">// 匹配处理.vue文件</span></div><div class="line">        loader: <span class="string">'vue-loader'</span>, <span class="comment">//使用vue-loader处理,`npm install vue-loader`</span></div><div class="line">        <span class="keyword">options</span>: &#123;	<span class="comment">//options是对vue-loader的额外选项配置</span></div><div class="line">          loaders: &#123;</div><div class="line">            <span class="comment">// 由于sass-loader将SCSS作为默认解析模式，因此将lang属性的“scss”和“sass”值映射到这里的正确配置。</span></div><div class="line">            <span class="string">'scss'</span>: <span class="string">'vue-style-loader!css-loader!sass-loader'</span>,</div><div class="line">            <span class="string">'sass'</span>: <span class="string">'vue-style-loader!css-loader!sass-loader?indentedSyntax'</span>,</div><div class="line">          &#125;</div><div class="line">        &#125;，</div><div class="line">        <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>	<span class="comment">// 排除需要处理的目录（不推荐使用exclude）</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,	<span class="comment">// 匹配处理.js文件</span></div><div class="line">        loader: <span class="string">'babel-loader'</span>,	<span class="comment">//使用babel-loader处理,这个作用就是将es6转化成es5</span></div><div class="line">     		<span class="keyword">include</span>: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)] <span class="comment">// 必须处理包含src和test文件夹</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(eot|ttf|woff|woff2|png|jpg|gif|svg)$/</span>,	<span class="comment">// 匹配相关图片类型文件</span></div><div class="line">        loader: <span class="string">'file-loader'</span>, <span class="comment">// 使用url-loader处理</span></div><div class="line">        query: &#123;  <span class="comment">// query是对loader做额外的选项配置</span></div><div class="line">	        limit: <span class="number">10000</span>, <span class="comment">//图片小于10000字节时以base64的方式引用</span></div><div class="line">	        name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>) <span class="comment">//文件名为name.7位hash值.拓展名</span></div><div class="line">	      &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">	      test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>, <span class="comment">//字体文件</span></div><div class="line">	      loader: <span class="string">'url-loader'</span>, <span class="comment">//使用url-loader处理</span></div><div class="line">	      query: &#123;</div><div class="line">	        limit: <span class="number">10000</span>,  <span class="comment">//字体文件小于1000字节的时候处理方式</span></div><div class="line">	        name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>) <span class="comment">//文件名为name.7位hash值.拓展名</span></div><div class="line">	      &#125;</div><div class="line">	    &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">'style-loader!css-loader'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p><code>注: 关于query 仅由于兼容性原因而存在。请使用 options 代替。</code></p>
<h3 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h3><p>不处理的模块</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">noParse:</span> /src\/assets\/<span class="class"><span class="keyword">lib</span>\/(<span class="title">zepto</span>|<span class="title">runtime</span>-<span class="title">check</span>|<span class="title">add</span>-<span class="title">assets</span>|<span class="title">aladdin</span>.<span class="title">loading</span>|<span class="title">aladdin</span>.<span class="title">dialog</span>|<span class="title">aladdin</span>.<span class="title">toast</span>|<span class="title">aladdin</span>|<span class="title">bow</span>|<span class="title">dante</span>|<span class="title">flexible</span>|\.<span class="title">js</span>)/,</span></div></pre></td></tr></table></figure>
<h2 id="解析-resolve"><a href="#解析-resolve" class="headerlink" title="解析(resolve)"></a>解析(resolve)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">resolve</span>: &#123;</div><div class="line">  <span class="attribute">modules</span>: [path.<span class="built_in">resolve</span>(__dirname, <span class="string">'src'</span>), <span class="string">'node_modules'</span>],  // 只解析的目录</div><div class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],  // 解析的文件扩展名</div><div class="line">  alias: &#123;  // 设置引入模块的别名</div><div class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</div><div class="line">    <span class="string">'@'</span>: <span class="built_in">resolve</span>(<span class="string">'src'</span>),</div><div class="line">    <span class="string">'utils'</span>: <span class="built_in">resolve</span>(<span class="string">'src/utils'</span>),</div><div class="line">    <span class="string">'assets'</span>: <span class="built_in">resolve</span>(<span class="string">'src/assets'</span>),</div><div class="line">    <span class="string">'components'</span>: <span class="built_in">resolve</span>(<span class="string">'src/components'</span>),</div><div class="line">    <span class="string">'flexible'</span>: <span class="built_in">resolve</span>(<span class="string">'src/assets/lib/flexible.js'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="外部扩展-externals"><a href="#外部扩展-externals" class="headerlink" title="外部扩展(externals)"></a>外部扩展(externals)</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载外部lib</span></div><div class="line"><span class="attribute">externals</span>: &#123;</div><div class="line">  <span class="attribute">aladdin</span>: <span class="string">'aladdin'</span>,</div><div class="line">  <span class="attribute">bow</span>: <span class="string">'bow'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用插件-plugins"><a href="#常用插件-plugins" class="headerlink" title="常用插件(plugins)"></a>常用插件(plugins)</h2><p>webpack插件分为两种，一种是原生插件，就是说不需要安装和引用可直接使用，另一种是第三方插件，需要npm安装，引用后才可使用。</p>
<p>先讲一下常用原生插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">plugins:</span> [</div><div class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">    <span class="string">'process.env'</span>: &#123;</div><div class="line"><span class="symbol">      NODE_ENV:</span> <span class="string">'"production"'</span></div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">  <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(),</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="webpack-DefinePlugin"><a href="#webpack-DefinePlugin" class="headerlink" title="webpack.DefinePlugin"></a>webpack.DefinePlugin</h3><p>设置全局变量</p>
<h3 id="webpack-HotModuleReplacementPlugin"><a href="#webpack-HotModuleReplacementPlugin" class="headerlink" title="webpack.HotModuleReplacementPlugin"></a>webpack.HotModuleReplacementPlugin</h3><p>热更新插件</p>
<h3 id="webpack-NoEmitOnErrorsPlugin"><a href="#webpack-NoEmitOnErrorsPlugin" class="headerlink" title="webpack.NoEmitOnErrorsPlugin"></a>webpack.NoEmitOnErrorsPlugin</h3><p>跳过编译时出错的代码并记录，使编译后运行时的包不会发生错误。</p>
<h3 id="webpack-optimize-UglifyJsPlugin"><a href="#webpack-optimize-UglifyJsPlugin" class="headerlink" title="webpack.optimize.UglifyJsPlugin"></a>webpack.optimize.UglifyJsPlugin</h3><p>解析/压缩/美化所有的js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">  sourceMap: <span class="literal">true</span></div><div class="line">  mangle: &#123;</div><div class="line">      except: [<span class="string">'$super'</span>, <span class="string">'$'</span>, <span class="string">'exports'</span>, <span class="string">'require'</span>]</div><div class="line">  &#125;,</div><div class="line">  compressor: &#123; <span class="comment">// 压缩配置</span></div><div class="line">    <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></div><div class="line">    warnings: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></div><div class="line">    drop_console: deployEnv === <span class="string">'prd'</span>,</div><div class="line">    <span class="comment">// 删除所有的 `debugger`语句</span></div><div class="line">    drop_debugger: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// 内嵌定义了但是只用到一次的变量</span></div><div class="line">    collapse_vars: deployEnv === <span class="string">'prd'</span>,</div><div class="line">    <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></div><div class="line">    reduce_vars: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>ps: 这个插件一般在生产环境配置中才会用到</p>
</blockquote>
<p>参数说明：</p>
<p>mangle: 通过设置except数组来防止指定变量被改变<br>sourceMap: 生成SourceMap文件，会导致编译过程变慢，默认true<br>test/include/exclude: 使用一个或多个正则表达式来过滤要处理的文件<br>compressor: 压缩配置项</p>
<h3 id="webpack-ProvidePlugin"><a href="#webpack-ProvidePlugin" class="headerlink" title="webpack.ProvidePlugin"></a>webpack.ProvidePlugin</h3><p>定义标识符，当遇到指定标识符的时候，自动加载模块。</p>
<p>在下面例子中，无需在module中引入jquery，即可使用$方法。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line"><span class="meta">  $</span><span class="bash">: <span class="string">"jquery"</span></span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="webpack-optimize-CommonsChunkPlugin"><a href="#webpack-optimize-CommonsChunkPlugin" class="headerlink" title="webpack.optimize.CommonsChunkPlugin"></a>webpack.optimize.CommonsChunkPlugin</h3><p>提取代码中的公共模块，然后将公共模块打包到一个独立的文件中，以便在其他的入口和模块中使用。</p>
<blockquote>
<p>不要忘记在html中单独引入抽离出来的公共模块。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(&#123;</div><div class="line">  <span class="attribute">name</span>: <span class="string">'vendor'</span>,</div><div class="line">  minChunks: <span class="number">3</span>,</div><div class="line">  chunks: [<span class="string">"pageA"</span>, <span class="string">"pageB"</span>],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>name: 生成的公共模块的文件名<br>minChunks: 至少要多少个引用的模块才能分离出来<br>chunks: 只应用这些模块</p>
<p>在vue-cli生成的项目工程的webpack配置中会new 两次，请看下面说明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分离公共js到vendor中</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  name: <span class="string">'vendor'</span>,  <span class="comment">//文件名</span></div><div class="line">  minChunks: functions(<span class="built_in">module</span>, count) &#123; <span class="comment">// 声明公共的模块来自node_modules文件夹</span></div><div class="line">    <span class="keyword">return</span> (<span class="built_in">module</span>.resource &amp;&amp; <span class="regexp">/\.js$/</span>.test(<span class="built_in">module</span>.resource) &amp;&amp; <span class="built_in">module</span>,resource.indexOf(path.join(__dirname, <span class="string">'../node_modules'</span>)) === <span class="number">0</span>)</div><div class="line">  &#125;</div><div class="line">&#125;),</div><div class="line"><span class="comment">//上面虽然已经分离了第三方库,每次修改编译都会改变vendor的hash值，导致浏览器缓存失效。原因是vendor包含了webpack在打包过程中会产生一些运行时代码，运行时代码中实际上保存了打包后的文件名。当修改业务代码时,业务代码的js文件的hash值会改变。一旦改变必然会导致vendor变化。vendor变化会导致其hash值变化。</span></div><div class="line"><span class="comment">//下面主要是将运行时代码提取到单独的manifest文件中，防止其影响vendor.js</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  name: <span class="string">'mainifest'</span>,</div><div class="line">  chunks: [<span class="string">'vendor'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="webpack-DllReferencePlugin"><a href="#webpack-DllReferencePlugin" class="headerlink" title="webpack.DllReferencePlugin"></a>webpack.DllReferencePlugin</h3><p>把常用的库并且不会改变的库进行分离，加速构建的作用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.DllReferencePlugin</span>(&#123;</div><div class="line">  <span class="attribute">context</span>: __dirname,  // 作用于哪个环境</div><div class="line">  manifest: <span class="built_in">require</span>(./manifest.json)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>context: 执行上下文<br>manifest: manifest文件路径</p>
<p>接下来，讲常用第三方插件</p>
<h3 id="friendly-errors-webpack-plugin"><a href="#friendly-errors-webpack-plugin" class="headerlink" title="friendly-errors-webpack-plugin"></a>friendly-errors-webpack-plugin</h3><p>友好错误提示插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">plugins:</span> [</div><div class="line">  <span class="keyword">new</span> FriendlyErrorsPlugin()  </div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><p>自动生成html文件的插件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">HtmlWebpackPlugin</span>(&#123;</div><div class="line">   <span class="attribute">filename</span>: <span class="string">'index.html'</span>,</div><div class="line">   template: <span class="string">'index.html'</span>,</div><div class="line">   inject: true</div><div class="line"> &#125;),</div></pre></td></tr></table></figure>
<p><code>参数说明：</code></p>
<ul>
<li>title: 用来生成页面的 title 元素</li>
<li>filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</li>
<li>template: 模板文件路径，支持加载器，比如 html!./index.html</li>
<li>inject: true | ‘head’ | ‘body’ | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，’head’ 将放置到 head 元素中。</li>
<li>favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。</li>
<li>minify: {} | false , 传递 html-minifier 选项给 minify 输出</li>
<li>hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。</li>
<li>cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</li>
<li>showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</li>
<li>chunks: 允许只添加某些块 (比如，仅仅 unit test 块)</li>
<li>chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’|’dependency’</li>
<li>excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块) </li>
</ul>
<h3 id="extract-text-webpack-plugin"><a href="#extract-text-webpack-plugin" class="headerlink" title="extract-text-webpack-plugin"></a>extract-text-webpack-plugin</h3><p>将js中引入的css分离的插件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">ExtractTextPlugin</span>(&#123;</div><div class="line">  <span class="attribute">filename</span>: utils.<span class="built_in">assetsPath</span>(<span class="string">'css/[name].[contenthash].css'</span>) //分离出的css文件名</div><div class="line">  allChunks: true // 分离所有的模块</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><p>压缩提取出的css，并解决ExtractTextPlugin分离出的css重复问题(多个文件引入同一css文件)</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">OptimizeCSSPlugin</span>(&#123;</div><div class="line">  <span class="attribute">cssProcessorOptions</span>: &#123;</div><div class="line">    safe: true</div><div class="line">  &#125;</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<h3 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 复制静态资源,将static文件内的内容复制到指定文件夹</span></div><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">CopyWebpackPlugin</span>([&#123;</div><div class="line">  <span class="attribute">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>), <span class="comment">// 从哪个路径复制</span></div><div class="line">  <span class="attribute">to</span>: config.build.assetsSubDirectory,  <span class="comment">// 复制到的路径</span></div><div class="line">  <span class="attribute">ignore</span>: [<span class="string">'.*'</span>]  <span class="comment">//过滤规则</span></div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>from: 从哪个路径复制或则是文件<br>to: 复制到指定目录<br>ignore: 过滤文件的类型</p>
<h3 id="add-asset-html-webpack-plugin"><a href="#add-asset-html-webpack-plugin" class="headerlink" title="add-asset-html-webpack-plugin"></a>add-asset-html-webpack-plugin</h3><p>在你的模板文件中添加静态资源</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">AddAssetHtmlPlugin</span>(&#123;</div><div class="line">  <span class="attribute">filepath</span>: require.<span class="built_in">resolve</span>(config.build.dll.fileName),  // 要添加的文件</div><div class="line">  outputPath: utils.<span class="built_in">assetsPath</span>(config.build.dll.outputPath),</div><div class="line">  publicPath: utils.<span class="built_in">assetsPath</span>(config.build.dll.publicPath),</div><div class="line">  hash: true</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>参数说明</p>
<p>filepath：要添加的文件<br>outputPath: // 输出生成目录<br>publicPath: // 注入地址</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用配置解析（这里以vue脚手架生成为例）&quot;&gt;&lt;a href=&quot;#常用配置解析（这里以vue脚手架生成为例）&quot; class=&quot;headerlink&quot; title=&quot;常用配置解析（这里以vue脚手架生成为例）&quot;&gt;&lt;/a&gt;常用配置解析（这里以vue脚手架生成为例）&lt;/
    
    </summary>
    
    
      <category term="webpack" scheme="http://meiminjun.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vysor最新版本破解</title>
    <link href="http://meiminjun.github.io/chrome-vysor/"/>
    <id>http://meiminjun.github.io/chrome-vysor/</id>
    <published>2017-03-30T22:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vysor最新版本破解"><a href="#Vysor最新版本破解" class="headerlink" title="Vysor最新版本破解"></a>Vysor最新版本破解</h2><p>Vysor是一个Chrome插件, 他 可以把android手机屏幕投影到电脑上方便操作. 操作方便个人感觉是目前最好的了.</p>
<p>Vysor普通版相对专业版多了一些限制, 例如无法最大化. 但是专业版要收费, 点支付宝支付这边一直卡住, 没法, 只能翻开源码研究一下.</p>
<p>网上说了一堆说只能破解1.6.6以前版本，于是我自己就研究了一下，截止目前来说，我正在使用的当前版本1.7.2(最新版本)也是可以破解的</p>
<p>首先，谷歌商店下载<a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm?hl=zh-CN" target="_blank" rel="external">最新版本</a>,并安装（谷歌商店需要翻墙）</p>
<p>然后在本地查找插件代码路径:</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\U</span>ser Data<span class="symbol">\D</span>efault<span class="symbol">\E</span>xtensions<span class="symbol">\g</span>idgenkbbabolejbgbpnhbimgjbffefm<span class="symbol">\1</span>.7.2_0</div></pre></td></tr></table></figure>
<p>windows里面，我的用户名是 Administrator, 系统盘是C:, 按照自己情况来设置路径</p>
<h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Users/</span>larben<span class="regexp">/Library/</span>Application Support<span class="regexp">/Google/</span>Chrome<span class="regexp">/Default/</span>Extensions<span class="regexp">/gidgenkbbabolejbgbpnhbimgjbffefm/</span><span class="number">1.7</span>.<span class="number">2</span>_1</div></pre></td></tr></table></figure>
<p>macos里面，我的用户名是 larben, 这里要按照自己情况来设置路径</p>
<p>在路径下打开 uglify.js文件, 搜索 _il变量, 将 _il:Te.a() 替换为 _il:true, 然后重启chrome和vysor. 可以发现Vysory已经变为专业版了</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fe4on59c4kj30rw1dejvx.jpg" alt=""></p>
<p>开心。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vysor最新版本破解&quot;&gt;&lt;a href=&quot;#Vysor最新版本破解&quot; class=&quot;headerlink&quot; title=&quot;Vysor最新版本破解&quot;&gt;&lt;/a&gt;Vysor最新版本破解&lt;/h2&gt;&lt;p&gt;Vysor是一个Chrome插件, 他 可以把android手机屏幕
    
    </summary>
    
    
      <category term="chrome" scheme="http://meiminjun.github.io/tags/chrome/"/>
    
      <category term="vysor" scheme="http://meiminjun.github.io/tags/vysor/"/>
    
  </entry>
  
  <entry>
    <title>精选oh-my-zsh插件集合</title>
    <link href="http://meiminjun.github.io/oh-my-zsh%E6%8F%92%E4%BB%B6/"/>
    <id>http://meiminjun.github.io/oh-my-zsh插件/</id>
    <published>2017-01-11T22:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oh-my-zsh-安装说明"><a href="#oh-my-zsh-安装说明" class="headerlink" title="oh-my-zsh 安装说明"></a>oh-my-zsh 安装说明</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h2 id="插件配置地址"><a href="#插件配置地址" class="headerlink" title="插件配置地址"></a>插件配置地址</h2><p>打开文件~/.zshrc，其中有如下行：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">plugins</span>=(git)</div></pre></td></tr></table></figure>
<p>将需要的插件按空格分开，放于此处即可。我的配置如下：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">plugins</span>=(git extract z sublime)</div></pre></td></tr></table></figure>
<p>修改完后，如果需要在当前shell中生效，需要执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>oh-my-zsh 默认开启的插件，提供了大量 git 的alias。</p>
<p>详细列表请参见：</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a></p>
<p>我的常用命令:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>g</td>
<td>git</td>
</tr>
<tr>
<td>gst</td>
<td>git status</td>
</tr>
<tr>
<td>gco</td>
<td>git checkout</td>
</tr>
<tr>
<td>gcm</td>
<td>git checkout master</td>
</tr>
<tr>
<td>gcd</td>
<td>git checkout develop</td>
</tr>
<tr>
<td>ga</td>
<td>git add</td>
</tr>
<tr>
<td>gaa</td>
<td>git add –all</td>
</tr>
<tr>
<td>gcam</td>
<td>git commit -a -m</td>
</tr>
<tr>
<td>gcmsg</td>
<td>git commit -m</td>
</tr>
<tr>
<td>gp</td>
<td>git push</td>
</tr>
<tr>
<td>gl</td>
<td>git pull</td>
</tr>
<tr>
<td>gup</td>
<td>git pull –rebase</td>
</tr>
<tr>
<td>glg</td>
<td>git log –stat –color</td>
</tr>
<tr>
<td>glgg</td>
<td>git log –graph –color</td>
</tr>
<tr>
<td>gm</td>
<td>git merge</td>
</tr>
<tr>
<td>gmom</td>
<td>git merge origin/master</td>
</tr>
<tr>
<td>grh</td>
<td>git reset HEAD</td>
</tr>
<tr>
<td>grhh</td>
<td>git reset HEAD –hard</td>
</tr>
</tbody>
</table>
<h2 id="z"><a href="#z" class="headerlink" title="z"></a>z</h2><p>强大的目录自动跳转命令，会记忆你曾经进入过的目录，用模糊匹配快速进入你想要的目录。</p>
<h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>平时使用sublime比较多，该插件可以使用命令行打开sublime。<br>常用命令如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">st</span>          <span class="meta"># 直接打开sublime</span></div><div class="line"><span class="keyword">st</span> file_a   <span class="meta"># 用sublime打开文件 file</span></div><div class="line"><span class="keyword">st</span> dir_a    <span class="meta"># 用sublime打开目录 dir</span></div><div class="line">stt         <span class="meta"># 在sublime打开当前目录，相当于 st .</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;oh-my-zsh-安装说明&quot;&gt;&lt;a href=&quot;#oh-my-zsh-安装说明&quot; class=&quot;headerlink&quot; title=&quot;oh-my-zsh 安装说明&quot;&gt;&lt;/a&gt;oh-my-zsh 安装说明&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://githu
    
    </summary>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Sourcetree安装</title>
    <link href="http://meiminjun.github.io/Sourcetree%E5%AE%89%E8%A3%85/"/>
    <id>http://meiminjun.github.io/Sourcetree安装/</id>
    <published>2017-01-09T22:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblgt1gz3bj20t70ha44y.jpg" alt=""></p>
<p>SourceTree拥有一个精美简洁的界面，大大简化了开发者与代码库之间的Git操作方式，这对于开发者来说非常实用。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>安装git 终端</p>
<p>  <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a> </p>
</li>
<li><p>下载sourcetree </p>
<p>  <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">https://www.sourcetreeapp.com/</a></p>
</li>
</ul>
<p>在安装sourcetree的时候是需要注册的，网站是用了Google的CDN服务，所以必须翻墙</p>
<h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><ol>
<li><p>下载hosts</p>
<p> <a href="https://pan.baidu.com/s/1nv6Ub7F" target="_blank" rel="external">下载链接</a>  密码: y2f2</p>
</li>
</ol>
<blockquote>
<p>下载的时候chrome和杀毒软件可能会拦截，请保留就可以了</p>
</blockquote>
<ol>
<li><p>替换hosts(mac)</p>
<p> hosts所在文件夹：</p>
</li>
</ol>
<ul>
<li>Windows 系统hosts位于 C:\Windows\System32\drivers\etc\hosts</li>
<li>Android（安卓）系统hosts位于 /system/etc/hosts</li>
<li>Mac（苹果电脑）系统hosts跟Linux一样位于 /etc/hosts</li>
<li>iPhone（iOS）系统hosts跟Linux Mac一样位于 /etc/hosts</li>
<li>Linux系统hosts位于 /etc/hosts</li>
</ul>
<p>以mac系统为例，打开Finder,快捷键输入“command+shift+G”,后输入“/etc”,进入之后替换hosts文件</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59jw1fbladzbym1j20i209bwev.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblafnf1i7j20di09mjsf.jpg" alt=""></p>
<h2 id="Mac系统安装SourceTree步骤"><a href="#Mac系统安装SourceTree步骤" class="headerlink" title="Mac系统安装SourceTree步骤"></a>Mac系统安装SourceTree步骤</h2><p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fblb7lyicgj20ld0bqac4.jpg" alt=""></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblbe9g43pj20jm0ce406.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblbntahngj20qq0ivmzs.jpg" alt=""></p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblbwkm3l4j20cj0h2405.jpg" alt=""></p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblbyjn4l7j20ht0dt3zx.jpg" alt=""></p>
<p>最后一步，在你刚刚填写的注册邮箱中会收到验证邮件，点击一下就ok了</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblc0did51j20or0fxq4x.jpg" alt=""></p>
<p>这时候回到这个界面用你刚刚注册的账号登录即可</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fblcy1m32cj214u0nogps.jpg" alt=""></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfcg5cu9j209u0fxab5.jpg" alt=""></p>
<blockquote>
<p>这里不知道是不是网络原因，似乎不用勾选“Stay logged in”才有可能跳转到下面页面</p>
</blockquote>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfbk0gvyj20k10bi0u6.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblfixppd1j20kr0cq76k.jpg" alt=""></p>
<p>大功告成</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblfl86jmwj20df0ahaaj.jpg" alt=""></p>
<h2 id="Windows安装SourceTree步骤"><a href="#Windows安装SourceTree步骤" class="headerlink" title="Windows安装SourceTree步骤"></a>Windows安装SourceTree步骤</h2><p>详见：<a href="http://jingyan.baidu.com/article/3c48dd3465636be10ae3584a.html" target="_blank" rel="external">http://jingyan.baidu.com/article/3c48dd3465636be10ae3584a.html</a></p>
<h2 id="clone项目到本地"><a href="#clone项目到本地" class="headerlink" title="clone项目到本地"></a>clone项目到本地</h2><p>以克隆gitLab为例：</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblfnk02tqj20db0btgme.jpg" alt=""></p>
<p>拷贝项目路径<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblfprbzecj20v40hcgoz.jpg" alt=""></p>
<p>粘贴到sourcetree,这时候会让你输入你的内网gitLab 的登录账号和密码</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfs1qx01j20j10fstau.jpg" alt=""></p>
<p>完成之后,如图</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfxu4j8fj20dv068q3b.jpg" alt=""></p>
<p>成功下载后项目如图：</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfzd2jhbj20t90dcte4.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/69a9ed59gw1fblgt1gz3bj20t70ha44y.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;SourceTree拥有一个精美简洁的界面，大大简化了开发者与代码库之间的Git操作方式，这
    
    </summary>
    
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>我的Mac工具精选</title>
    <link href="http://meiminjun.github.io/%E6%88%91%E7%9A%84Mac%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <id>http://meiminjun.github.io/我的Mac工具集/</id>
    <published>2017-01-02T09:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="精选Mac工具"><a href="#精选Mac工具" class="headerlink" title="精选Mac工具"></a>精选Mac工具</h1><h2 id="工作类"><a href="#工作类" class="headerlink" title="工作类"></a>工作类</h2><ul>
<li>有道云笔记</li>
<li>UnRaR Unarchiver : 解压软件</li>
<li>Tickeys : 键盘特效</li>
<li>Word : Window文档编辑工具</li>
<li>Chrome : 浏览器软件</li>
<li>ShadowsocksX : 翻墙工具</li>
<li>番茄土豆 : 番茄工作法（一款简洁的TODO软件）</li>
<li>沟通工具<ul>
<li>微信</li>
<li>钉钉</li>
<li>Outlook</li>
</ul>
</li>
<li>阅读工具<ul>
<li>Reeder : 一款支持rss订阅客户端</li>
</ul>
</li>
</ul>
<h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><ul>
<li>brew : 包管理工具</li>
<li>cakebrew : 管理brew的gui软件</li>
<li>node : Node 环境工具</li>
<li>Dash : 库提示工具</li>
<li>iTerm : 命令行工具</li>
<li>oh-my-zsh : 非常好用的命令行插件<ul>
<li>sublime : 用sublime打开文件或者文件夹</li>
<li>z : 快速记录的之前去过的路径位置</li>
</ul>
</li>
<li>CleanMyMac : 垃圾文件清理工具</li>
<li>编辑器<ul>
<li>Visual Studio Code</li>
<li>Sublime Text</li>
</ul>
</li>
<li>SourceTree : 非常好用的git的图形界面工具</li>
<li>图形编辑工具<ul>
<li><a href="http://jietu.qq.com/" target="_blank" rel="external">截图(Jietu)</a> : 非常不错的截图标示软件（腾讯出品）</li>
<li>Sketch : 矢量图编辑软件</li>
<li>licecap : gif生成工具</li>
</ul>
</li>
<li>Android Studio : 安卓开发工具</li>
<li>Chrome 插件工具<ul>
<li>Vimium : Chrome 操作神器</li>
<li>Adblock Plus : 禁用广告插件</li>
<li>谷歌翻译</li>
<li>Cloud9 : 云编辑环境</li>
<li>番茄计时器</li>
<li>EnjoyCSS : 按钮生产工具</li>
<li>下载+</li>
<li>OneTab : 浏览管理工具</li>
<li>Gliffy Diagrams : 流程工具</li>
<li>Pocket : 离线阅读工具</li>
<li>微博图床 : 一款快速生成图片地址的神器</li>
<li>Octotree : github树</li>
<li>PostMan : 接口请求工具</li>
<li>Momentum : 一款非常漂亮的壁纸（支持todo\天气）</li>
</ul>
</li>
<li>Charies : 抓包工具</li>
</ul>
<h2 id="高级类"><a href="#高级类" class="headerlink" title="高级类"></a>高级类</h2><ul>
<li>Alfred 3(必备): 一款workflow效率软件</li>
<li><a href="http://sspai.com/36442" target="_blank" rel="external">Keyboard Maestro</a> :一款超级牛逼的效率软件</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="external">Mac 软件精选</a></p>
</li>
<li><p><a href="http://xclient.info/" target="_blank" rel="external">Mac 工具下载</a></p>
</li>
<li><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="external">Mac 常用快捷键</a></p>
</li>
</ul>
<h2 id="Mac上的软件下载网址推荐"><a href="#Mac上的软件下载网址推荐" class="headerlink" title="Mac上的软件下载网址推荐"></a>Mac上的软件下载网址推荐</h2><ul>
<li>类似于iOS上Cydia一样的第三方软件商店：<a href="http://hack-store.com/" target="_blank" rel="external">http://hack-store.com/</a></li>
<li>玩转苹果：<a href="http://www.ifunmac.com/" target="_blank" rel="external">http://www.ifunmac.com/</a></li>
<li>玩儿法：<a href="http://www.waerfa.com/" target="_blank" rel="external">http://www.waerfa.com/</a></li>
<li>Mac软件下载站：<a href="http://www.pshezi.com/" target="_blank" rel="external">http://www.pshezi.com/</a></li>
<li>MacPeers：<a href="http://www.macpeers.com/" target="_blank" rel="external">http://www.macpeers.com/</a></li>
<li>Mac志：<a href="http://www.isofts.org/" target="_blank" rel="external">http://www.isofts.org/</a></li>
<li>Mac软件分享：<a href="http://www.waitsun.com/" target="_blank" rel="external">http://www.waitsun.com/</a></li>
<li>AppKed：<a href="http://www.macbed.com/" target="_blank" rel="external">http://www.macbed.com/</a></li>
<li>苹果软件园：<a href="http://www.maczapp.com/" target="_blank" rel="external">http://www.maczapp.com/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;精选Mac工具&quot;&gt;&lt;a href=&quot;#精选Mac工具&quot; class=&quot;headerlink&quot; title=&quot;精选Mac工具&quot;&gt;&lt;/a&gt;精选Mac工具&lt;/h1&gt;&lt;h2 id=&quot;工作类&quot;&gt;&lt;a href=&quot;#工作类&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试工程</title>
    <link href="http://meiminjun.github.io/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/"/>
    <id>http://meiminjun.github.io/前端自动化工程搭建/</id>
    <published>2017-01-01T11:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<p>安装条件：</p>
<ol>
<li>首先要安装 Java 7 或更高</li>
<li>Node.JS , 而且要确保 npm 命令可用，我想应该其实不用提醒的 ~</li>
</ol>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>找一个目录，起名字为“AutoTest”,然后输入命令<code>npm init -y</code>生成项目文件<code>package.json</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  AutoTest <span class="string">git:</span>(master) npm init -y</div><div class="line">Wrote to <span class="regexp">/Users/</span>apple<span class="regexp">/Documents/</span>github<span class="regexp">/AutoTest/</span><span class="keyword">package</span>.<span class="string">json:</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"AutoTest"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [],</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>然后我们将安装 Selenium 与 Nightwatch。</p>
<ul>
<li>安装 selenium-standalone：<ul>
<li><code>npm install selenium-standalone --save-dev</code></li>
</ul>
</li>
<li>安装 Nightwatch:<ul>
<li><code>npm install nightwatch --save-dev</code> </li>
</ul>
</li>
</ul>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>我们先开始配置 Nightwatch，之前提到这是一款 Test Runner 来着，它负责读取我们的测试脚本，为我们提供 API 来操作浏览器，帮我们控制 Selenium。</p>
<p><strong>一. 配置 Nightwatch</strong></p>
<ol>
<li>首先，在项目根目录建立文件 “nightwatch.json”，这个文件用来存放 Nightwatch 的配置信息。创建完毕之后，在文件内写入以下内容：</li>
</ol>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"src_folders"</span>: [<span class="string">"tests"</span>],</div><div class="line">     <span class="attr">"output_folder"</span>: <span class="string">"reports"</span>,</div><div class="line">     <span class="attr">"custom_commands_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"custom_assertions_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"page_objects_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"globals_path"</span>: <span class="string">""</span>,</div><div class="line"></div><div class="line">     <span class="attr">"selenium"</span>: &#123;</div><div class="line">       <span class="attr">"start_process"</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">"server_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"log_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">       <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">       <span class="attr">"cli_args"</span>: &#123;</div><div class="line">         <span class="attr">"webdriver.chrome.driver"</span>: <span class="string">""</span></div><div class="line">       &#125;</div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     <span class="attr">"test_settings"</span>: &#123;</div><div class="line">       <span class="attr">"default"</span>: &#123;</div><div class="line">         <span class="attr">"launch_url"</span>: <span class="string">"http://localhost"</span>,</div><div class="line">         <span class="attr">"selenium_port"</span>: <span class="number">4444</span>,</div><div class="line">         <span class="attr">"selenium_host"</span>: <span class="string">"localhost"</span>,</div><div class="line">         <span class="attr">"silent"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"screenshots"</span>: &#123;</div><div class="line">           <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">           <span class="attr">"path"</span>: <span class="string">""</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"firefox"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">"chrome"</span> : &#123;</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nightwatch.json 的文件名是 不可以 修改的，因为 Nightwatch 每次启动的时候都是从它读取配置喔！这里的配置项很多，不过先不管它，我们接着创建文件。如果您希望查看 Nightwatch 的详细配置，请点 <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">这里</a>。</p>
<ol>
<li>接着在项目根目录下创建文件 “nightwatch.conf.js” ，同样此文件名也是不可以修改的，因为 Nightwatch 每次启动也会从它这里读取配置喔~ (´･_･`)</li>
</ol>
<p>创建完毕后，打开文件，并写入如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> settings;</div><div class="line">&#125;)(<span class="built_in">require</span>(<span class="string">'./nightwatch.json'</span>))</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *  Nightwatch 会从 nightwatch.json 中读取配置。</span></div><div class="line"><span class="comment"> *  不过如果存在 nightwatch.conf.js，将会变为首先从后者中读取配置。</span></div><div class="line"><span class="comment"> *  nightwatch.conf.js 存在的意义是使用 JavaScript 动态生成配置信息。</span></div><div class="line"><span class="comment"> *  如果配置信息是不需要代码修改的，直接使用 nightwatch.json 就可以啦。</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<ol>
<li>再次在项目根目录建立文件 “startup.js”，然后在文件内部写入：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">require</span><span class="params">(<span class="string">'nightwatch/bin/runner.js'</span>)</span></span></div></pre></td></tr></table></figure>
<p>这个文件就是我们测试的入口文件，以后我们要执行测试就要运行这个文件，命令为 node ./startup。入口文件的名字是可以按照喜好更改的，只要运行它就好啦。不过每次输入 node ./startup 太麻烦了，所以我们将这条命令写入 npm scripts 中 ~~~ 打开 “package.json”，在 JSON 对象中建立 “script” 属性，并写入内容：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以后每次运行测试只要在项目根目录中执行 npm start 就好了！(･∀･)<br>Nightwatch 的配置暂时告一段落（其实马上就会回来………），接下来我们来处理 Selenium.</p>
<p><strong>二. 配置 Selenium</strong></p>
<p>Selenium 是自动化测试环境，它提供了测试服务器、启动浏览器、网页自动操作等功能，同时暴露 API 给 Nightwatch 供我们使用。</p>
<p>我们接下来将要告诉 Nightwatch 我们的 Selenium 安装在哪里，启动浏览器的 Driver 程序在哪里，然后建立 Selenium 的安装脚本与手工启动脚本，以便不时之需 ~~</p>
<blockquote>
<p>Driver 是让 Selenium 打开系统上已安装的浏览器的程序。</p>
</blockquote>
<ol>
<li>建立 Selenium 的配置信息</li>
</ol>
<p>在项目根目录下建立文件夹 “build”，并在其中创建文件 “selenium-conf.js”，并写入如下信息：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const process = require('process')</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    // <span class="attribute">Selenium 的版本配置信息。请在下方链接查询最新版本。升级版本只需修改版本号即可。</span></div><div class="line"><span class="attribute">    // https</span>://selenium-release<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>/index<span class="variable">.html</span></div><div class="line">    selenium: &#123;</div><div class="line">        version: '2.53.1',</div><div class="line">        baseURL: 'https://selenium-release<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>'</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Driver 用来启动系统中安装的浏览器，Selenium 默认使用 Firefox，如果不需要使用其他浏览器，则不需要额外安装 Driver。</div><div class="line">    // 在此我们安装 Chrome 的 driver 以便使用 Chrome 进行测试。</div><div class="line">    driver: &#123;</div><div class="line">        chrome: &#123;</div><div class="line">            // Chrome 浏览器启动 Driver，请在下方链接查询最新版本。</div><div class="line">            // https://chromedriver<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>/index<span class="variable">.html</span></div><div class="line">            version: '2.25',</div><div class="line">            arch: process<span class="variable">.arch</span>,</div><div class="line">            baseURL: 'https://chromedriver<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本配置信息包含 Selenium 本体配置与 Driver 配置。我们将在稍后动态载入这些配置。 本文件的目的是为了更好管理 Selenium 的版本。</p>
<ol>
<li>告诉 Nightwatch，我的 Selenium 与 Driver 在哪里。</li>
</ol>
<p>再次打开项目根目录下的 “nightwatch.conf.js” 文件，并这样编辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./build/selenium-conf'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 告诉 Nightwatch 我的 Selenium 在哪里。</span></div><div class="line">    settings.selenium.server_path = <span class="string">`<span class="subst">$&#123;path.resolve()&#125;</span>/node_modules/selenium-standalone/.selenium/selenium-server/<span class="subst">$&#123;seleniumConfig.selenium.version&#125;</span>-server.jar`</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置 Chrome Driver, 让 Selenium 有打开 Chrome 浏览器的能力。</span></div><div class="line">    settings.selenium.cli_args[<span class="string">'webdriver.chrome.driver'</span>] = <span class="string">`<span class="subst">$&#123;path.resolve()&#125;</span>/node_modules/selenium-standalone/.selenium/chromedriver/<span class="subst">$&#123;seleniumConfig.driver.chrome.version&#125;</span>-<span class="subst">$&#123;seleniumConfig.driver.chrome.arch&#125;</span>-chromedriver`</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> settings;</div><div class="line">&#125;)(<span class="built_in">require</span>(<span class="string">'./nightwatch.json'</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>我们新加了两行配置，它们的作用如注释所示。<br>同样的，如果您希望查看更多的配置项，请点击 <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<ol>
<li>建立 Selenium 安装脚本，一键安装 Selenium。</li>
</ol>
<p>selenium-standalone 只是用来安装和管理 Selenium 的工具么？所以现在是时候用它来安装 Selenium 了。我们将通过调取 selenium-standalone 的内置方法来实现自动安装。在 “build” 文件夹中建立文件 “selenium-setup.js”，并写入如下信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">'selenium-standalone'</span>)</div><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./selenium-conf.js'</span>)</div><div class="line"></div><div class="line">selenium.install(&#123;</div><div class="line">    version: seleniumConfig.selenium.version,</div><div class="line">    baseURL: seleniumConfig.selenium.baseURL,</div><div class="line">    drivers: seleniumConfig.driver,</div><div class="line">    logger: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; <span class="built_in">console</span>.log(message) &#125;,</div><div class="line">    progressCb: <span class="function"><span class="keyword">function</span> (<span class="params">totalLength, progressLength, chunkLength</span>) </span>&#123;&#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Selenium 安装错误: <span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Selenium 安装完成.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>同样为了方便，我们将安装命令写入 npm scripts 中：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span>,</div><div class="line">        <span class="string">"selenium-setup"</span>: <span class="string">"node ./build/selenium-setup.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在项目根目录执行 npm run selenium-setup 安装 Selenium.<br>当提示安装完成后，一切就绪！(･∀･)</p>
<blockquote>
<p>Selenium 与其 Driver 会安装到 “node_modules/selenium-standalone/.selenium” 中。</p>
</blockquote>
<ol>
<li>想要手工启动 Selenium？</li>
</ol>
<p>默认情况下，Selenium 是由 Nightwatch 启动的，不需要手工干预，不过如果想要手工启动当然是可以的啦。<br>在 build 文件夹中建立文件 “selenium-start.js”，并写入如下信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">'selenium-standalone'</span>)</div><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./selenium-conf.js'</span>)</div><div class="line"></div><div class="line">selenium.start(&#123;</div><div class="line">    drivers: seleniumConfig.driver</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, child</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Selenium 启动失败: <span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Selenium 已手工启动，进程 PID: <span class="subst">$&#123;child.pid&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'当不再需要运行 Selenium 时可关闭此 PID 进程.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后同样添加启动命令至 npm scripts 中：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span>,</div><div class="line">        <span class="string">"selenium-setup"</span>: <span class="string">"node ./build/selenium-setup.js"</span>,</div><div class="line">        <span class="string">"selenium-start"</span>: <span class="string">"node ./build/selenium-start.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以后使用命令 npm run selenium-start 就可以手工启动 Selenium 了。</p>
<h2 id="环境配置完成"><a href="#环境配置完成" class="headerlink" title="环境配置完成"></a>环境配置完成</h2><p>目录如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> -- build</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-conf.js        # Selenium 版本信息配置。</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-setup.js       # Selenium 安装命令脚本。</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-start.js       # Selenium 启动命令脚本。</span></div><div class="line">|</div><div class="line">|<span class="string"> -- nightwatch.conf.js             # Nightwatch 动态配置文件。</span></div><div class="line">|<span class="string"> -- nightwatch.json                # Nightwatch 配置文件。</span></div><div class="line">|<span class="string"> -- package.json                   # 项目信息配置文件。</span></div><div class="line">|<span class="string"> -- startup.js                     # 测试启动入口文件。</span></div></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>nightwatch.json文件中</p>
<ul>
<li>请注意 “desiredCapabilities” 下的 “browserName” 项，这是测试时将使用的浏览器，您可以修改为 chrome、internet explorer、phantomjs，本文在介绍时只安装了 Chrome 的 Driver，如果您需要使用其他浏览器，要安装相应的 Driver 才可以正常使用。</li>
<li>默认浏览器为 Firefox，如果您使用 Firefox 的话，不需要额外进行 Driver 的配置。</li>
<li>所以，如果您需要使用 Chrome 的话请将 “browserName” 修改为 “chrome” 喔！<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"src_folders"</span>: [<span class="string">"tests"</span>],</div><div class="line">     <span class="attr">"output_folder"</span>: <span class="string">"reports"</span>,</div><div class="line">     <span class="attr">"custom_commands_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"custom_assertions_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"page_objects_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"globals_path"</span>: <span class="string">""</span>,</div><div class="line"></div><div class="line">     <span class="attr">"selenium"</span>: &#123;</div><div class="line">       <span class="attr">"start_process"</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">"server_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"log_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">       <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">       <span class="attr">"cli_args"</span>: &#123;</div><div class="line">         <span class="attr">"webdriver.chrome.driver"</span>: <span class="string">""</span></div><div class="line">       &#125;</div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     <span class="attr">"test_settings"</span>: &#123;</div><div class="line">       <span class="attr">"default"</span>: &#123;</div><div class="line">         <span class="attr">"launch_url"</span>: <span class="string">"http://localhost"</span>,</div><div class="line">         <span class="attr">"selenium_port"</span>: <span class="number">4444</span>,</div><div class="line">         <span class="attr">"selenium_host"</span>: <span class="string">"localhost"</span>,</div><div class="line">         <span class="attr">"silent"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"screenshots"</span>: &#123;</div><div class="line">           <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">           <span class="attr">"path"</span>: <span class="string">""</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">"chrome"</span> : &#123;</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Driver 的文档可参考<a href="http://nightwatchjs.org/guide#selenium-settings" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h2 id="开始编写测试用例"><a href="#开始编写测试用例" class="headerlink" title="开始编写测试用例"></a>开始编写测试用例</h2><h3 id="创建目录存放测试用例"><a href="#创建目录存放测试用例" class="headerlink" title="创建目录存放测试用例"></a>创建目录存放测试用例</h3><p>在项目根目录新建一个名为 “tests” 的目录，然后这里就用来存放我们即将编写的测试用例文件。<br>那么这个文件夹能不能指向到其他地方去呢？当然可以，不过要修改一个小地方。</p>
<p>还记得 “ nightwatch.json “ 文件么？打开看看，第一项是不是叫 src_folders，然后值为 [“tests”]？<br>我相信您已经懂了，这里就是定义测试用例存放目录的地方，然后改成自己想要的目录吧！</p>
<blockquote>
<p>您可以在目录中存放多个测试用例文件，且命名随意，Nightwatch 将读取目录中所有的 JS 文件，如果符合测试用例格式，将会自动执行。</p>
</blockquote>
<h3 id="编写一个简单的测试用例"><a href="#编写一个简单的测试用例" class="headerlink" title="编写一个简单的测试用例"></a>编写一个简单的测试用例</h3><p>在 “tests” 目录中建立一个测试用例文件 “demo.js”，然后我们来写一个没什么用的小 demo！</p>
<p>这个 Demo 将打开 Bing，搜索 “what is microsoft”，然后保存成截图后退出。</p>
<p>OK，打开 “demo.js”，添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">'Find the answer.'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</div><div class="line">    <span class="comment">// TODO...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>module.exports 导出一个对象，对象的 Key 即为测试用例名称，您可以编写多个测试用例，Nightwatch 将依次执行。</p>
</blockquote>
<p>您可以在测试用例中导入其他模块并直接使用在测试逻辑中</p>
<p>先写到这里，您可能会对 cilent 感到陌生，所以还是要简单介绍一下。</p>
<p>client 是代码运行时 Nightwatch 提供的对象，所有对浏览器进行的操作都将使用此对象调取，比如 client.click(“CSS Selector”)、client.getCookie(function () {…})，我们第一章说过的 “可以简单理解为 Selenium 的控制软件” 就是通过它体现的喔！</p>
<blockquote>
<p>client 的所有 API 详情见 <a href="http://nightwatchjs.org/api#commands" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>大致了解这东西的意思之后，就可以接着完善测试逻辑了：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  '<span class="attribute">Find the answer.'</span>: function (client) &#123;</div><div class="line">    // 定义 Bing 页面中的节点.</div><div class="line">    const searchInput = '#sb_form_q'</div><div class="line">    const searchBtn = '#sb_form_go'</div><div class="line">    const question = 'what is microsoft'</div><div class="line"></div><div class="line">    // 启动浏览器并打开 bing<span class="variable">.com</span>.</div><div class="line">    client<span class="variable">.url</span>('http://bing<span class="variable">.com</span>')<span class="variable">.maximizeWindow</span>()</div><div class="line"></div><div class="line">    // 确保 "body" 和输入框可以使用.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span></div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>(searchInput)<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line">    client<span class="variable">.pause</span>(2000)  // 稍等两秒.</div><div class="line"></div><div class="line">    // 输入 "what is microsoft" 然后搜索.</div><div class="line">    client<span class="variable">.setValue</span>(searchInput, question)</div><div class="line">    client<span class="variable">.click</span>(searchBtn)</div><div class="line">    client<span class="variable">.pause</span>(2000)</div><div class="line"></div><div class="line">    // 截一张图然后保存到 "reports/answer<span class="variable">.png</span>". </div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span></div><div class="line">    client<span class="variable">.saveScreenshot</span>('reports/answers<span class="variable">.png</span>')</div><div class="line">    client<span class="variable">.end</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来关注一下 expect ，是不是看起来很像自然语言？这些语句就是测试结果的验证语句，就是我们希望得到的结果。比如 client.expect.element(‘body’).to.be.present.before(3000)，意思就是 “希望 body 元素能在 3000 毫秒内初始化完毕”。</p>
<blockquote>
<p>Nightwatch 支持 BDD-Style 与 Assert 断言两种风格，文档可见 <a href="http://nightwatchjs.org/api#expect-api" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>是不是确实没什么用？毕竟是个简单的 Demo 而已，哈哈。那么添加一个稍微复杂点的测试用例。</p>
<h3 id="编写另一个简单的测试用例"><a href="#编写另一个简单的测试用例" class="headerlink" title="编写另一个简单的测试用例"></a>编写另一个简单的测试用例</h3><p>这个 demo 将打开 <a href="http://live.bilibili.com/" target="_blank" rel="external">Bilibili 直播</a> ，然后执行：</p>
<ul>
<li>打开首页并等待加载完毕；</li>
<li>检查登陆按钮是否存在；</li>
<li>点击登陆按钮；</li>
<li>填写用户名与密码；</li>
<li>点击登陆；</li>
<li>等待页面加载；</li>
<li>通过 Cookie 检查是否已登陆；</li>
<li>确保登陆后的用户导航面板存在；</li>
<li>鼠标移至头像处打开导航面板；</li>
<li>点击退出登陆；</li>
<li>等待页面刷新后检查 Cookie 是否已退出登陆；</li>
<li>结束测试。</li>
</ul>
<p>代码：<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">// Account setting.</div><div class="line">const accountConfig = &#123;</div><div class="line">  <span class="attribute">username</span>: 'USERNAME',</div><div class="line">  password: 'PASSWORD',</div><div class="line">  uid: '10000'</div><div class="line">&#125;</div><div class="line"></div><div class="line">module<span class="variable">.exports</span> = &#123;</div><div class="line">  'Bilibili Live Login Test': function (client) &#123;</div><div class="line">    client<span class="variable">.url</span>('http://live<span class="variable">.bilibili</span><span class="variable">.com</span>')<span class="variable">.maximizeWindow</span>()</div><div class="line"></div><div class="line">    // Page Init.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('<span class="variable">.top-nav-login-btn</span><span class="variable">.last</span>')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line"></div><div class="line">    // Login.</div><div class="line">    client<span class="variable">.click</span>('<span class="variable">.top-nav-login-btn</span><span class="variable">.last</span>')</div><div class="line">    client<span class="variable">.waitForElementVisible</span>('#bilibili-quick-login', 2000)</div><div class="line">    client<span class="variable">.frame</span>(0)</div><div class="line">    client<span class="variable">.pause</span>(2000)</div><div class="line">    client<span class="variable">.setValue</span>('#login-username', accountConfig<span class="variable">.username</span>)</div><div class="line">    client<span class="variable">.setValue</span>('#login-passwd', accountConfig<span class="variable">.password</span>)</div><div class="line">    client<span class="variable">.click</span>('#login-submit')</div><div class="line"></div><div class="line">    // Wait and check page has been reloaded.</div><div class="line">    client<span class="variable">.frameParent</span>()</div><div class="line">    client<span class="variable">.pause</span>(4000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line"></div><div class="line">    // Check cookies to ensure we are signed in.</div><div class="line">    client<span class="variable">.getCookies</span>(function (result) &#123;</div><div class="line">      result<span class="variable">.value</span><span class="variable">.forEach</span>((value, index, array) =&gt; &#123;</div><div class="line">        if (value<span class="variable">.name</span> === 'DedeUserID') client<span class="variable">.assert</span><span class="variable">.equal</span>(parseInt(value<span class="variable">.value</span>, 10), accountConfig<span class="variable">.uid</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    // Move to User Avatar.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('<span class="variable">.user-avatar-link</span>')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line">    client<span class="variable">.moveToElement</span>('<span class="variable">.user-avatar-link</span>', 5, 5)</div><div class="line">    client<span class="variable">.pause</span>(800)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('#top-nav-user-panel')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line"></div><div class="line">    // Logout.</div><div class="line">    client<span class="variable">.click</span>('#top-nav-logout-link')</div><div class="line">    client<span class="variable">.pause</span>(5000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line"></div><div class="line">    // Check cookies again to ensure we are off.</div><div class="line">    client<span class="variable">.getCookies</span>(function (result) &#123;</div><div class="line">      var logout = true</div><div class="line">      result<span class="variable">.value</span><span class="variable">.forEach</span>((value, index, array) =&gt; &#123;</div><div class="line">        if (value<span class="variable">.name</span> === 'LIVE_LOGIN_DATA') logout = false</div><div class="line">      &#125;)</div><div class="line">      client<span class="variable">.assert</span><span class="variable">.equal</span>(logout, true)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    client<span class="variable">.pause</span>(1000)</div><div class="line">    client<span class="variable">.end</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>您可以新建一个文件，或者在之前的文件中继续编写。</p>
</blockquote>
<h3 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h3><p>回到项目根目录，执行 npm start，然后就可以看到浏览器自己测试了！</p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ul>
<li><p>在填写<code>selenium-conf.js</code>的时候不要写最新版本（3.0版本）,不然在跑案例脚本时候会报找不到element的错误</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">selenium</span>: &#123;</div><div class="line">        <span class="attribute">version</span>: <span class="string">'2.53.1'</span>,  </div><div class="line">        baseURL: <span class="string">'https://selenium-release.storage.googleapis.com'</span></div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>其次，配置chromedriver的时候也不要写最新的版本，在mac中会报找不到mac64的错误，写成如下版本即可：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">driver</span>: &#123;</div><div class="line">        <span class="attribute">chrome</span>: &#123;</div><div class="line">            <span class="comment">// Chrome 浏览器启动 Driver，请在下方链接查询最新版本。</span></div><div class="line">            <span class="comment">// https://chromedriver.storage.googleapis.com/index.html</span></div><div class="line">            <span class="attribute">version</span>: <span class="string">'2.25'</span>,</div><div class="line">            <span class="attribute">arch</span>: process.arch,</div><div class="line">            <span class="attribute">baseURL</span>: <span class="string">'https://chromedriver.storage.googleapis.com'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>源文件项目地址:</em></p>
<blockquote>
<p><a href="https://github.com/meiminjun/AutoTest" target="_blank" rel="external">https://github.com/meiminjun/AutoTest</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先要安装 Java 7 或更高&lt;/li&gt;
&lt;li&gt;Node.JS , 而且要确保 npm 命令可用，我想应该其实不用提醒的 ~&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;开始搭建&quot;&gt;&lt;a href=&quot;#开始搭建&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="自动化测试" scheme="http://meiminjun.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作-远程管理与分支管理</title>
    <link href="http://meiminjun.github.io/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://meiminjun.github.io/git常用操作-远程管理/</id>
    <published>2016-12-21T11:57:13.000Z</published>
    <updated>2019-03-23T08:47:27.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用操作之远程管理与分支管理"><a href="#git常用操作之远程管理与分支管理" class="headerlink" title="git常用操作之远程管理与分支管理"></a>git常用操作之远程管理与分支管理</h1><h2 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h2><ul>
<li><p>克隆远程库， git clone git@github.com:meiminjun/meiminjun.github.io.git</p>
</li>
<li><p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p>
</li>
<li><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p>
</li>
<li><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p>
</li>
</ul>
<blockquote>
<p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>
</blockquote>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fb1upo5iqkj208d047q2w.jpg" alt=""></p>
<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长,</p>
<p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fb1uriy9a3j20a706h74a.jpg" alt=""></p>
<p>Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1ut2uf8qj20dq06hmx7.jpg" alt=""></p>
<p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fb1utvdg4ij20br0660st.jpg" alt=""></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1uvckv5pj20br04fdfu.jpg" alt=""></p>
<p>举个例子：</p>
<p>首先，我们创建dev分支，然后切换到dev分支：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout -<span class="selector-tag">b</span> test</div><div class="line">Switched to <span class="selector-tag">a</span> new branch <span class="string">'test'</span></div></pre></td></tr></table></figure>
<p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git branch <span class="built_in">test</span></div><div class="line">git checkout <span class="built_in">test</span></div><div class="line">Switched to branch <span class="string">'test'</span></div></pre></td></tr></table></figure></p>
<p>然后，用git branch命令查看当前分支：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git branch</div><div class="line">  develop</div><div class="line">  feature/mysql</div><div class="line">  <span class="literal">master</span></div><div class="line">* test</div></pre></td></tr></table></figure></p>
<p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p>
<p>然后，我们就可以在test分支上正常提交，比如添加一个branch.js文件<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line"><span class="bash">git commit -m <span class="string">"添加文件"</span></span></div></pre></td></tr></table></figure></p>
<p>这时，我们切换到master分支<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="literal">master</span></div></pre></td></tr></table></figure></p>
<p>切换回master分支后，刚才添加branch.js文件不见了，因为那个提交是在test分支上，而master分支此刻的提交点并没有变：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1vqyzyh0j20bd066aa3.jpg" alt=""></p>
<p>现在，我们把test分支的工作成果合并到master分支上：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">merge</span> <span class="keyword">test</span></div><div class="line">Updating <span class="number">967984</span>f..ecc13e5</div><div class="line"><span class="keyword">Fast</span>-forward</div><div class="line"> git/branch.js           | <span class="number">1</span> +</div></pre></td></tr></table></figure>
<p>git merge命令用于合并指定分支到当前分支。合并后，再查看里面的内容，就可以看到，和test分支的最新提交是完全一样的。</p>
<p>合并完成后，就可以放心地删除dev分支了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意删除只能删除其他分支，不能删除当前分支</p>
</blockquote>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全</p>
<p>小结:</p>
<p>查看分支：git branch</p>
<p>创建分支：git branch <name></name></p>
<p>切换分支：git checkout <name></name></p>
<p>创建+切换分支：git checkout -b <name></name></p>
<p>合并某分支到当前分支：git merge <name></name></p>
<p>删除分支：git branch -d <name></name></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用操作之远程管理与分支管理&quot;&gt;&lt;a href=&quot;#git常用操作之远程管理与分支管理&quot; class=&quot;headerlink&quot; title=&quot;git常用操作之远程管理与分支管理&quot;&gt;&lt;/a&gt;git常用操作之远程管理与分支管理&lt;/h1&gt;&lt;h2 id=&quot;远程管理&quot;
    
    </summary>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
  </entry>
  
</feed>
