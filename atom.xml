<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Jason&#39;Blog</title>
  <subtitle>热爱游戏、生活、学习的文艺屌丝青年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meiminjun.github.io/"/>
  <updated>2017-04-18T06:17:34.000Z</updated>
  <id>http://meiminjun.github.io/</id>
  
  <author>
    <name>Mr.Jason</name>
    <email>251222845@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack</title>
    <link href="http://meiminjun.github.io/2017/04/11/webpack/"/>
    <id>http://meiminjun.github.io/2017/04/11/webpack/</id>
    <published>2017-04-11T13:57:13.000Z</published>
    <updated>2017-04-18T06:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用配置解析（这里以vue脚手架生成为例）"><a href="#常用配置解析（这里以vue脚手架生成为例）" class="headerlink" title="常用配置解析（这里以vue脚手架生成为例）"></a>常用配置解析（这里以vue脚手架生成为例）</h1><h2 id="输入-entry"><a href="#输入-entry" class="headerlink" title="输入(entry)"></a>输入(entry)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">entry</span>: &#123;</div><div class="line">  <span class="attribute">app</span>: <span class="string">'./src/main.js'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">output</span>: &#123;</div><div class="line">  <span class="attribute">path</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'./dist'</span>),  // 文件构建完成后的生成目录</div><div class="line">  publicPath: <span class="string">'/dist/'</span>,	// build.js相对于服务器环境的哪层目录</div><div class="line">  filename: <span class="string">'build.js'</span> // 代码生成的文件名</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="devtool-开发工具"><a href="#devtool-开发工具" class="headerlink" title="devtool(开发工具)"></a>devtool(开发工具)</h2><table>
<thead>
<tr>
<th>devtool</th>
<th style="text-align:right">构建</th>
<th style="text-align:right">重构建</th>
<th style="text-align:right">生产环境</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr>
<td>eval</td>
<td style="text-align:right">+++</td>
<td style="text-align:right">+++</td>
<td style="text-align:right">no</td>
<td>生成后的代码</td>
</tr>
<tr>
<td>cheap-eval-source-map</td>
<td style="text-align:right">+</td>
<td style="text-align:right">++</td>
<td style="text-align:right">no</td>
<td>转换过的代码（仅限行）</td>
</tr>
<tr>
<td>cheap-source-map</td>
<td style="text-align:right">+</td>
<td style="text-align:right">o</td>
<td style="text-align:right">yes</td>
<td>转换过的代码（仅限行）</td>
</tr>
<tr>
<td>cheap-module-eval-source-map</td>
<td style="text-align:right">o</td>
<td style="text-align:right">++</td>
<td style="text-align:right">no</td>
<td>原始源码（仅限行）</td>
</tr>
<tr>
<td>cheap-module-source-map</td>
<td style="text-align:right">o</td>
<td style="text-align:right">-</td>
<td style="text-align:right">yes</td>
<td>原始源码（仅限行）</td>
</tr>
<tr>
<td>eval-source-map</td>
<td style="text-align:right">–</td>
<td style="text-align:right">+</td>
<td style="text-align:right">no</td>
<td>原始源码</td>
</tr>
<tr>
<td>source-map</td>
<td style="text-align:right">–</td>
<td style="text-align:right">–</td>
<td style="text-align:right">yes</td>
<td>原始源码</td>
</tr>
<tr>
<td>nosources-source-map</td>
<td style="text-align:right">–</td>
<td style="text-align:right">–</td>
<td style="text-align:right">yes</td>
<td>无源码内容</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>表示较快，- 表示较慢，o 表示时间相同</li>
</ul>
</blockquote>
<p>其中一些值适用于开发环境，一些适用于生产环境。对于开发环境，通常希望更快速的 Source Map，需要添加到 bundle 中以增加体积为代价，但是对于生产环境，则希望更精准的 Source Map，需要从 bundle 中分离并独立存在。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// cheap-module-<span class="built_in">eval</span>-<span class="keyword">source</span>-<span class="keyword">map</span> <span class="keyword">is</span> faster <span class="keyword">for</span> development</div><div class="line">devtoo<span class="variable">l:</span> <span class="string">'#cheap-module-eval-source-map'</span>,</div></pre></td></tr></table></figure>
<p>cheap-module-eval-source-map - 就像 eval-source-map，每个模块使用 eval() 执行，并且 SourceMap 转换为 DataUrl 后添加到 eval() 中。”低开销”是因为它没有生成列映射(column map)，只是映射行数。</p>
<h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">devtool:</span> <span class="string">'#source-map'</span></div></pre></td></tr></table></figure>
<p>source-map - 生成完整的 SourceMap，输出为独立文件。由于在 bundle 中添加了引用注释，所以开发工具可以知道在哪里去找到 SourceMap。</p>
<h2 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h2><p>设置需要处理的模块</p>
<h3 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h3><p>设置如何处理项目不同类型的模块的规则</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.vue$/</span>, <span class="comment">// 匹配处理.vue文件</span></div><div class="line">        loader: <span class="string">'vue-loader'</span>, <span class="comment">//使用vue-loader处理,`npm install vue-loader`</span></div><div class="line">        <span class="keyword">options</span>: &#123;	<span class="comment">//options是对vue-loader的额外选项配置</span></div><div class="line">          loaders: &#123;</div><div class="line">            <span class="comment">// 由于sass-loader将SCSS作为默认解析模式，因此将lang属性的“scss”和“sass”值映射到这里的正确配置。</span></div><div class="line">            <span class="string">'scss'</span>: <span class="string">'vue-style-loader!css-loader!sass-loader'</span>,</div><div class="line">            <span class="string">'sass'</span>: <span class="string">'vue-style-loader!css-loader!sass-loader?indentedSyntax'</span>,</div><div class="line">          &#125;</div><div class="line">        &#125;，</div><div class="line">        <span class="keyword">exclude</span>: <span class="regexp">/node_modules/</span>	<span class="comment">// 排除需要处理的目录（不推荐使用exclude）</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,	<span class="comment">// 匹配处理.js文件</span></div><div class="line">        loader: <span class="string">'babel-loader'</span>,	<span class="comment">//使用babel-loader处理,这个作用就是将es6转化成es5</span></div><div class="line">     		<span class="keyword">include</span>: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)] <span class="comment">// 必须处理包含src和test文件夹</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(eot|ttf|woff|woff2|png|jpg|gif|svg)$/</span>,	<span class="comment">// 匹配相关图片类型文件</span></div><div class="line">        loader: <span class="string">'file-loader'</span>, <span class="comment">// 使用url-loader处理</span></div><div class="line">        query: &#123;  <span class="comment">// query是对loader做额外的选项配置</span></div><div class="line">	        limit: <span class="number">10000</span>, <span class="comment">//图片小于10000字节时以base64的方式引用</span></div><div class="line">	        name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>) <span class="comment">//文件名为name.7位hash值.拓展名</span></div><div class="line">	      &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">	      test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>, <span class="comment">//字体文件</span></div><div class="line">	      loader: <span class="string">'url-loader'</span>, <span class="comment">//使用url-loader处理</span></div><div class="line">	      query: &#123;</div><div class="line">	        limit: <span class="number">10000</span>,  <span class="comment">//字体文件小于1000字节的时候处理方式</span></div><div class="line">	        name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>) <span class="comment">//文件名为name.7位hash值.拓展名</span></div><div class="line">	      &#125;</div><div class="line">	    &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">'style-loader!css-loader'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p><code>注: 关于query 仅由于兼容性原因而存在。请使用 options 代替。</code></p>
<h3 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h3><p>不处理的模块</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">noParse:</span> /src\/assets\/<span class="class"><span class="keyword">lib</span>\/(<span class="title">zepto</span>|<span class="title">runtime</span>-<span class="title">check</span>|<span class="title">add</span>-<span class="title">assets</span>|<span class="title">aladdin</span>.<span class="title">loading</span>|<span class="title">aladdin</span>.<span class="title">dialog</span>|<span class="title">aladdin</span>.<span class="title">toast</span>|<span class="title">aladdin</span>|<span class="title">bow</span>|<span class="title">dante</span>|<span class="title">flexible</span>|\.<span class="title">js</span>)/,</span></div></pre></td></tr></table></figure>
<h2 id="解析-resolve"><a href="#解析-resolve" class="headerlink" title="解析(resolve)"></a>解析(resolve)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">resolve</span>: &#123;</div><div class="line">  <span class="attribute">modules</span>: [path.<span class="built_in">resolve</span>(__dirname, <span class="string">'src'</span>), <span class="string">'node_modules'</span>],  // 只解析的目录</div><div class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],  // 解析的文件扩展名</div><div class="line">  alias: &#123;  // 设置引入模块的别名</div><div class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</div><div class="line">    <span class="string">'@'</span>: <span class="built_in">resolve</span>(<span class="string">'src'</span>),</div><div class="line">    <span class="string">'utils'</span>: <span class="built_in">resolve</span>(<span class="string">'src/utils'</span>),</div><div class="line">    <span class="string">'assets'</span>: <span class="built_in">resolve</span>(<span class="string">'src/assets'</span>),</div><div class="line">    <span class="string">'components'</span>: <span class="built_in">resolve</span>(<span class="string">'src/components'</span>),</div><div class="line">    <span class="string">'flexible'</span>: <span class="built_in">resolve</span>(<span class="string">'src/assets/lib/flexible.js'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="外部扩展-externals"><a href="#外部扩展-externals" class="headerlink" title="外部扩展(externals)"></a>外部扩展(externals)</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载外部lib</span></div><div class="line"><span class="attribute">externals</span>: &#123;</div><div class="line">  <span class="attribute">aladdin</span>: <span class="string">'aladdin'</span>,</div><div class="line">  <span class="attribute">bow</span>: <span class="string">'bow'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用插件-plugins"><a href="#常用插件-plugins" class="headerlink" title="常用插件(plugins)"></a>常用插件(plugins)</h2><p>webpack插件分为两种，一种是原生插件，就是说不需要安装和引用可直接使用，另一种是第三方插件，需要npm安装，引用后才可使用。</p>
<p>先讲一下常用原生插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">plugins:</span> [</div><div class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">    <span class="string">'process.env'</span>: &#123;</div><div class="line"><span class="symbol">      NODE_ENV:</span> <span class="string">'"production"'</span></div><div class="line">    &#125;</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">  <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(),</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="webpack-DefinePlugin"><a href="#webpack-DefinePlugin" class="headerlink" title="webpack.DefinePlugin"></a>webpack.DefinePlugin</h3><p>设置全局变量</p>
<h3 id="webpack-HotModuleReplacementPlugin"><a href="#webpack-HotModuleReplacementPlugin" class="headerlink" title="webpack.HotModuleReplacementPlugin"></a>webpack.HotModuleReplacementPlugin</h3><p>热更新插件</p>
<h3 id="webpack-NoEmitOnErrorsPlugin"><a href="#webpack-NoEmitOnErrorsPlugin" class="headerlink" title="webpack.NoEmitOnErrorsPlugin"></a>webpack.NoEmitOnErrorsPlugin</h3><p>跳过编译时出错的代码并记录，使编译后运行时的包不会发生错误。</p>
<h3 id="webpack-optimize-UglifyJsPlugin"><a href="#webpack-optimize-UglifyJsPlugin" class="headerlink" title="webpack.optimize.UglifyJsPlugin"></a>webpack.optimize.UglifyJsPlugin</h3><p>解析/压缩/美化所有的js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">  <span class="attr">sourceMap</span>: <span class="literal">true</span></div><div class="line">  mangle: &#123;</div><div class="line">      <span class="attr">except</span>: [<span class="string">'$super'</span>, <span class="string">'$'</span>, <span class="string">'exports'</span>, <span class="string">'require'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">compressor</span>: &#123; <span class="comment">// 压缩配置</span></div><div class="line">    <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></div><div class="line">    warnings: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></div><div class="line">    drop_console: deployEnv === <span class="string">'prd'</span>,</div><div class="line">    <span class="comment">// 删除所有的 `debugger`语句</span></div><div class="line">    drop_debugger: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// 内嵌定义了但是只用到一次的变量</span></div><div class="line">    collapse_vars: deployEnv === <span class="string">'prd'</span>,</div><div class="line">    <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></div><div class="line">    reduce_vars: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>ps: 这个插件一般在生产环境配置中才会用到</p>
</blockquote>
<p>参数说明：</p>
<p>mangle: 通过设置except数组来防止指定变量被改变<br>sourceMap: 生成SourceMap文件，会导致编译过程变慢，默认true<br>test/include/exclude: 使用一个或多个正则表达式来过滤要处理的文件<br>compressor: 压缩配置项</p>
<h3 id="webpack-ProvidePlugin"><a href="#webpack-ProvidePlugin" class="headerlink" title="webpack.ProvidePlugin"></a>webpack.ProvidePlugin</h3><p>定义标识符，当遇到指定标识符的时候，自动加载模块。</p>
<p>在下面例子中，无需在module中引入jquery，即可使用$方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">  <span class="attr">$</span>: <span class="string">"jquery"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="webpack-optimize-CommonsChunkPlugin"><a href="#webpack-optimize-CommonsChunkPlugin" class="headerlink" title="webpack.optimize.CommonsChunkPlugin"></a>webpack.optimize.CommonsChunkPlugin</h3><p>提取代码中的公共模块，然后将公共模块打包到一个独立的文件中，以便在其他的入口和模块中使用。</p>
<blockquote>
<p>不要忘记在html中单独引入抽离出来的公共模块。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(&#123;</div><div class="line">  <span class="attribute">name</span>: <span class="string">'vendor'</span>,</div><div class="line">  minChunks: <span class="number">3</span>,</div><div class="line">  chunks: [<span class="string">"pageA"</span>, <span class="string">"pageB"</span>],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>name: 生成的公共模块的文件名<br>minChunks: 至少要多少个引用的模块才能分离出来<br>chunks: 只应用这些模块</p>
<p>在vue-cli生成的项目工程的webpack配置中会new 两次，请看下面说明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分离公共js到vendor中</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'vendor'</span>,  <span class="comment">//文件名</span></div><div class="line">  minChunks: functions(<span class="built_in">module</span>, count) &#123; <span class="comment">// 声明公共的模块来自node_modules文件夹</span></div><div class="line">    <span class="keyword">return</span> (<span class="built_in">module</span>.resource &amp;&amp; <span class="regexp">/\.js$/</span>.test(<span class="built_in">module</span>.resource) &amp;&amp; <span class="built_in">module</span>,resource.indexOf(path.join(__dirname, <span class="string">'../node_modules'</span>)) === <span class="number">0</span>)</div><div class="line">  &#125;</div><div class="line">&#125;),</div><div class="line"><span class="comment">//上面虽然已经分离了第三方库,每次修改编译都会改变vendor的hash值，导致浏览器缓存失效。原因是vendor包含了webpack在打包过程中会产生一些运行时代码，运行时代码中实际上保存了打包后的文件名。当修改业务代码时,业务代码的js文件的hash值会改变。一旦改变必然会导致vendor变化。vendor变化会导致其hash值变化。</span></div><div class="line"><span class="comment">//下面主要是将运行时代码提取到单独的manifest文件中，防止其影响vendor.js</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'mainifest'</span>,</div><div class="line">  <span class="attr">chunks</span>: [<span class="string">'vendor'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="webpack-DllReferencePlugin"><a href="#webpack-DllReferencePlugin" class="headerlink" title="webpack.DllReferencePlugin"></a>webpack.DllReferencePlugin</h3><p>把常用的库并且不会改变的库进行分离，加速构建的作用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.DllReferencePlugin</span>(&#123;</div><div class="line">  <span class="attribute">context</span>: __dirname,  // 作用于哪个环境</div><div class="line">  manifest: <span class="built_in">require</span>(./manifest.json)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>context: 执行上下文<br>manifest: manifest文件路径</p>
<p>接下来，讲常用第三方插件</p>
<h3 id="friendly-errors-webpack-plugin"><a href="#friendly-errors-webpack-plugin" class="headerlink" title="friendly-errors-webpack-plugin"></a>friendly-errors-webpack-plugin</h3><p>友好错误提示插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">plugins:</span> [</div><div class="line">  <span class="keyword">new</span> FriendlyErrorsPlugin()  </div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><p>自动生成html文件的插件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">HtmlWebpackPlugin</span>(&#123;</div><div class="line">   <span class="attribute">filename</span>: <span class="string">'index.html'</span>,</div><div class="line">   template: <span class="string">'index.html'</span>,</div><div class="line">   inject: true</div><div class="line"> &#125;),</div></pre></td></tr></table></figure>
<p><code>参数说明：</code></p>
<ul>
<li>title: 用来生成页面的 title 元素</li>
<li>filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</li>
<li>template: 模板文件路径，支持加载器，比如 html!./index.html</li>
<li>inject: true | ‘head’ | ‘body’ | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，’head’ 将放置到 head 元素中。</li>
<li>favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。</li>
<li>minify: {} | false , 传递 html-minifier 选项给 minify 输出</li>
<li>hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。</li>
<li>cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</li>
<li>showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</li>
<li>chunks: 允许只添加某些块 (比如，仅仅 unit test 块)</li>
<li>chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’|’dependency’</li>
<li>excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块) </li>
</ul>
<h3 id="extract-text-webpack-plugin"><a href="#extract-text-webpack-plugin" class="headerlink" title="extract-text-webpack-plugin"></a>extract-text-webpack-plugin</h3><p>将js中引入的css分离的插件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">ExtractTextPlugin</span>(&#123;</div><div class="line">  <span class="attribute">filename</span>: utils.<span class="built_in">assetsPath</span>(<span class="string">'css/[name].[contenthash].css'</span>) //分离出的css文件名</div><div class="line">  allChunks: true // 分离所有的模块</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><p>压缩提取出的css，并解决ExtractTextPlugin分离出的css重复问题(多个文件引入同一css文件)</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">OptimizeCSSPlugin</span>(&#123;</div><div class="line">  <span class="attribute">cssProcessorOptions</span>: &#123;</div><div class="line">    safe: true</div><div class="line">  &#125;</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<h3 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 复制静态资源,将static文件内的内容复制到指定文件夹</span></div><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">CopyWebpackPlugin</span>([&#123;</div><div class="line">  <span class="attribute">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>), <span class="comment">// 从哪个路径复制</span></div><div class="line">  <span class="attribute">to</span>: config.build.assetsSubDirectory,  <span class="comment">// 复制到的路径</span></div><div class="line">  <span class="attribute">ignore</span>: [<span class="string">'.*'</span>]  <span class="comment">//过滤规则</span></div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p>from: 从哪个路径复制或则是文件<br>to: 复制到指定目录<br>ignore: 过滤文件的类型</p>
<h3 id="add-asset-html-webpack-plugin"><a href="#add-asset-html-webpack-plugin" class="headerlink" title="add-asset-html-webpack-plugin"></a>add-asset-html-webpack-plugin</h3><p>在你的模板文件中添加静态资源</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">AddAssetHtmlPlugin</span>(&#123;</div><div class="line">  <span class="attribute">filepath</span>: require.<span class="built_in">resolve</span>(config.build.dll.fileName),  // 要添加的文件</div><div class="line">  outputPath: utils.<span class="built_in">assetsPath</span>(config.build.dll.outputPath),</div><div class="line">  publicPath: utils.<span class="built_in">assetsPath</span>(config.build.dll.publicPath),</div><div class="line">  hash: true</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>参数说明</p>
<p>filepath：要添加的文件<br>outputPath: // 输出生成目录<br>publicPath: // 注入地址</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用配置解析（这里以vue脚手架生成为例）&quot;&gt;&lt;a href=&quot;#常用配置解析（这里以vue脚手架生成为例）&quot; class=&quot;headerlink&quot; title=&quot;常用配置解析（这里以vue脚手架生成为例）&quot;&gt;&lt;/a&gt;常用配置解析（这里以vue脚手架生成为例）&lt;/
    
    </summary>
    
    
      <category term="webpack" scheme="http://meiminjun.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vysor最新版本破解</title>
    <link href="http://meiminjun.github.io/2017/03/30/vysor/"/>
    <id>http://meiminjun.github.io/2017/03/30/vysor/</id>
    <published>2017-03-30T14:57:13.000Z</published>
    <updated>2017-03-30T03:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vysor最新版本破解"><a href="#Vysor最新版本破解" class="headerlink" title="Vysor最新版本破解"></a>Vysor最新版本破解</h2><p>Vysor是一个Chrome插件, 他 可以把android手机屏幕投影到电脑上方便操作. 操作方便个人感觉是目前最好的了.</p>
<p>Vysor普通版相对专业版多了一些限制, 例如无法最大化. 但是专业版要收费, 点支付宝支付这边一直卡住, 没法, 只能翻开源码研究一下.</p>
<p>网上说了一堆说只能破解1.6.6以前版本，于是我自己就研究了一下，截止目前来说，我正在使用的当前版本1.7.2(最新版本)也是可以破解的</p>
<p>首先，谷歌商店下载<a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm?hl=zh-CN" target="_blank" rel="external">最新版本</a>,并安装（谷歌商店需要翻墙）</p>
<p>然后在本地查找插件代码路径:</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\G</span>oogle<span class="symbol">\C</span>hrome<span class="symbol">\U</span>ser Data<span class="symbol">\D</span>efault<span class="symbol">\E</span>xtensions<span class="symbol">\g</span>idgenkbbabolejbgbpnhbimgjbffefm<span class="symbol">\1</span>.7.2_0</div></pre></td></tr></table></figure>
<p>windows里面，我的用户名是 Administrator, 系统盘是C:, 按照自己情况来设置路径</p>
<h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Users/</span>larben<span class="regexp">/Library/</span>Application Support<span class="regexp">/Google/</span>Chrome<span class="regexp">/Default/</span>Extensions<span class="regexp">/gidgenkbbabolejbgbpnhbimgjbffefm/</span><span class="number">1.7</span>.<span class="number">2</span>_1</div></pre></td></tr></table></figure>
<p>macos里面，我的用户名是 larben, 这里要按照自己情况来设置路径</p>
<p>在路径下打开 uglify.js文件, 搜索 _il变量, 将 _il:Te.a() 替换为 _il:true, 然后重启chrome和vysor. 可以发现Vysory已经变为专业版了</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fe4on59c4kj30rw1dejvx.jpg" alt=""></p>
<p>开心。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vysor最新版本破解&quot;&gt;&lt;a href=&quot;#Vysor最新版本破解&quot; class=&quot;headerlink&quot; title=&quot;Vysor最新版本破解&quot;&gt;&lt;/a&gt;Vysor最新版本破解&lt;/h2&gt;&lt;p&gt;Vysor是一个Chrome插件, 他 可以把android手机屏幕
    
    </summary>
    
    
      <category term="chrome" scheme="http://meiminjun.github.io/tags/chrome/"/>
    
      <category term="vysor" scheme="http://meiminjun.github.io/tags/vysor/"/>
    
  </entry>
  
  <entry>
    <title>精选oh-my-zsh插件集合</title>
    <link href="http://meiminjun.github.io/2017/01/11/oh-my-zsh%E6%8F%92%E4%BB%B6/"/>
    <id>http://meiminjun.github.io/2017/01/11/oh-my-zsh插件/</id>
    <published>2017-01-11T14:57:13.000Z</published>
    <updated>2017-01-11T15:52:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oh-my-zsh-安装说明"><a href="#oh-my-zsh-安装说明" class="headerlink" title="oh-my-zsh 安装说明"></a>oh-my-zsh 安装说明</h2><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h2 id="插件配置地址"><a href="#插件配置地址" class="headerlink" title="插件配置地址"></a>插件配置地址</h2><p>打开文件~/.zshrc，其中有如下行：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">plugins</span>=(git)</div></pre></td></tr></table></figure>
<p>将需要的插件按空格分开，放于此处即可。我的配置如下：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">plugins</span>=(git extract z sublime)</div></pre></td></tr></table></figure>
<p>修改完后，如果需要在当前shell中生效，需要执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>oh-my-zsh 默认开启的插件，提供了大量 git 的alias。</p>
<p>详细列表请参见：</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git</a></p>
<p>我的常用命令:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>g</td>
<td>git</td>
</tr>
<tr>
<td>gst</td>
<td>git status</td>
</tr>
<tr>
<td>gco</td>
<td>git checkout</td>
</tr>
<tr>
<td>gcm</td>
<td>git checkout master</td>
</tr>
<tr>
<td>gcd</td>
<td>git checkout develop</td>
</tr>
<tr>
<td>ga</td>
<td>git add</td>
</tr>
<tr>
<td>gaa</td>
<td>git add –all</td>
</tr>
<tr>
<td>gcam</td>
<td>git commit -a -m</td>
</tr>
<tr>
<td>gcmsg</td>
<td>git commit -m</td>
</tr>
<tr>
<td>gp</td>
<td>git push</td>
</tr>
<tr>
<td>gl</td>
<td>git pull</td>
</tr>
<tr>
<td>gup</td>
<td>git pull –rebase</td>
</tr>
<tr>
<td>glg</td>
<td>git log –stat –color</td>
</tr>
<tr>
<td>glgg</td>
<td>git log –graph –color</td>
</tr>
<tr>
<td>gm</td>
<td>git merge</td>
</tr>
<tr>
<td>gmom</td>
<td>git merge origin/master</td>
</tr>
<tr>
<td>grh</td>
<td>git reset HEAD</td>
</tr>
<tr>
<td>grhh</td>
<td>git reset HEAD –hard</td>
</tr>
</tbody>
</table>
<h2 id="z"><a href="#z" class="headerlink" title="z"></a>z</h2><p>强大的目录自动跳转命令，会记忆你曾经进入过的目录，用模糊匹配快速进入你想要的目录。</p>
<h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>平时使用sublime比较多，该插件可以使用命令行打开sublime。<br>常用命令如下：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">st</span>          <span class="meta"># 直接打开sublime</span></div><div class="line"><span class="keyword">st</span> file_a   <span class="meta"># 用sublime打开文件 file</span></div><div class="line"><span class="keyword">st</span> dir_a    <span class="meta"># 用sublime打开目录 dir</span></div><div class="line">stt         <span class="meta"># 在sublime打开当前目录，相当于 st .</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;oh-my-zsh-安装说明&quot;&gt;&lt;a href=&quot;#oh-my-zsh-安装说明&quot; class=&quot;headerlink&quot; title=&quot;oh-my-zsh 安装说明&quot;&gt;&lt;/a&gt;oh-my-zsh 安装说明&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://githu
    
    </summary>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Sourcetree安装</title>
    <link href="http://meiminjun.github.io/2017/01/09/Sourcetree%E5%AE%89%E8%A3%85/"/>
    <id>http://meiminjun.github.io/2017/01/09/Sourcetree安装/</id>
    <published>2017-01-09T14:57:13.000Z</published>
    <updated>2017-01-10T06:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblgt1gz3bj20t70ha44y.jpg" alt=""></p>
<p>SourceTree拥有一个精美简洁的界面，大大简化了开发者与代码库之间的Git操作方式，这对于开发者来说非常实用。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>安装git 终端</p>
<p>  <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a> </p>
</li>
<li><p>下载sourcetree </p>
<p>  <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">https://www.sourcetreeapp.com/</a></p>
</li>
</ul>
<p>在安装sourcetree的时候是需要注册的，网站是用了Google的CDN服务，所以必须翻墙</p>
<h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><ol>
<li><p>下载hosts</p>
<p> <a href="https://pan.baidu.com/s/1nv6Ub7F" target="_blank" rel="external">下载链接</a>  密码: y2f2</p>
</li>
</ol>
<blockquote>
<p>下载的时候chrome和杀毒软件可能会拦截，请保留就可以了</p>
</blockquote>
<ol>
<li><p>替换hosts(mac)</p>
<p> hosts所在文件夹：</p>
</li>
</ol>
<ul>
<li>Windows 系统hosts位于 C:\Windows\System32\drivers\etc\hosts</li>
<li>Android（安卓）系统hosts位于 /system/etc/hosts</li>
<li>Mac（苹果电脑）系统hosts跟Linux一样位于 /etc/hosts</li>
<li>iPhone（iOS）系统hosts跟Linux Mac一样位于 /etc/hosts</li>
<li>Linux系统hosts位于 /etc/hosts</li>
</ul>
<p>以mac系统为例，打开Finder,快捷键输入“command+shift+G”,后输入“/etc”,进入之后替换hosts文件</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59jw1fbladzbym1j20i209bwev.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblafnf1i7j20di09mjsf.jpg" alt=""></p>
<h2 id="Mac系统安装SourceTree步骤"><a href="#Mac系统安装SourceTree步骤" class="headerlink" title="Mac系统安装SourceTree步骤"></a>Mac系统安装SourceTree步骤</h2><p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fblb7lyicgj20ld0bqac4.jpg" alt=""></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblbe9g43pj20jm0ce406.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblbntahngj20qq0ivmzs.jpg" alt=""></p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblbwkm3l4j20cj0h2405.jpg" alt=""></p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblbyjn4l7j20ht0dt3zx.jpg" alt=""></p>
<p>最后一步，在你刚刚填写的注册邮箱中会收到验证邮件，点击一下就ok了</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblc0did51j20or0fxq4x.jpg" alt=""></p>
<p>这时候回到这个界面用你刚刚注册的账号登录即可</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fblcy1m32cj214u0nogps.jpg" alt=""></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfcg5cu9j209u0fxab5.jpg" alt=""></p>
<blockquote>
<p>这里不知道是不是网络原因，似乎不用勾选“Stay logged in”才有可能跳转到下面页面</p>
</blockquote>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfbk0gvyj20k10bi0u6.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblfixppd1j20kr0cq76k.jpg" alt=""></p>
<p>大功告成</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblfl86jmwj20df0ahaaj.jpg" alt=""></p>
<h2 id="Windows安装SourceTree步骤"><a href="#Windows安装SourceTree步骤" class="headerlink" title="Windows安装SourceTree步骤"></a>Windows安装SourceTree步骤</h2><p>详见：<a href="http://jingyan.baidu.com/article/3c48dd3465636be10ae3584a.html" target="_blank" rel="external">http://jingyan.baidu.com/article/3c48dd3465636be10ae3584a.html</a></p>
<h2 id="clone项目到本地"><a href="#clone项目到本地" class="headerlink" title="clone项目到本地"></a>clone项目到本地</h2><p>以克隆gitLab为例：</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fblfnk02tqj20db0btgme.jpg" alt=""></p>
<p>拷贝项目路径<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fblfprbzecj20v40hcgoz.jpg" alt=""></p>
<p>粘贴到sourcetree,这时候会让你输入你的内网gitLab 的登录账号和密码</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfs1qx01j20j10fstau.jpg" alt=""></p>
<p>完成之后,如图</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfxu4j8fj20dv068q3b.jpg" alt=""></p>
<p>成功下载后项目如图：</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fblfzd2jhbj20t90dcte4.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/69a9ed59gw1fblgt1gz3bj20t70ha44y.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;SourceTree拥有一个精美简洁的界面，大大简化了开发者与代码库之间的Git操作方式，这
    
    </summary>
    
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>我的Mac工具精选</title>
    <link href="http://meiminjun.github.io/2017/01/02/%E6%88%91%E7%9A%84Mac%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    <id>http://meiminjun.github.io/2017/01/02/我的Mac工具集/</id>
    <published>2017-01-02T01:57:13.000Z</published>
    <updated>2017-02-10T08:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="精选Mac工具"><a href="#精选Mac工具" class="headerlink" title="精选Mac工具"></a>精选Mac工具</h1><h2 id="工作类"><a href="#工作类" class="headerlink" title="工作类"></a>工作类</h2><ul>
<li>有道云笔记</li>
<li>UnRaR Unarchiver : 解压软件</li>
<li>Tickeys : 键盘特效</li>
<li>Word : Window文档编辑工具</li>
<li>Chrome : 浏览器软件</li>
<li>ShadowsocksX : 翻墙工具</li>
<li>番茄土豆 : 番茄工作法（一款简洁的TODO软件）</li>
<li>沟通工具<ul>
<li>微信</li>
<li>钉钉</li>
<li>Outlook</li>
</ul>
</li>
<li>阅读工具<ul>
<li>Reeder : 一款支持rss订阅客户端</li>
</ul>
</li>
</ul>
<h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><ul>
<li>brew : 包管理工具</li>
<li>cakebrew : 管理brew的gui软件</li>
<li>node : Node 环境工具</li>
<li>Dash : 库提示工具</li>
<li>iTerm : 命令行工具</li>
<li>oh-my-zsh : 非常好用的命令行插件<ul>
<li>sublime : 用sublime打开文件或者文件夹</li>
<li>z : 快速记录的之前去过的路径位置</li>
</ul>
</li>
<li>CleanMyMac : 垃圾文件清理工具</li>
<li>编辑器<ul>
<li>Visual Studio Code</li>
<li>Sublime Text</li>
</ul>
</li>
<li>SourceTree : 非常好用的git的图形界面工具</li>
<li>图形编辑工具<ul>
<li><a href="http://jietu.qq.com/" target="_blank" rel="external">截图(Jietu)</a> : 非常不错的截图标示软件（腾讯出品）</li>
<li>Sketch : 矢量图编辑软件</li>
<li>licecap : gif生成工具</li>
</ul>
</li>
<li>Android Studio : 安卓开发工具</li>
<li>Chrome 插件工具<ul>
<li>Vimium : Chrome 操作神器</li>
<li>Adblock Plus : 禁用广告插件</li>
<li>谷歌翻译</li>
<li>Cloud9 : 云编辑环境</li>
<li>番茄计时器</li>
<li>EnjoyCSS : 按钮生产工具</li>
<li>下载+</li>
<li>OneTab : 浏览管理工具</li>
<li>Gliffy Diagrams : 流程工具</li>
<li>Pocket : 离线阅读工具</li>
<li>微博图床 : 一款快速生成图片地址的神器</li>
<li>Octotree : github树</li>
<li>PostMan : 接口请求工具</li>
<li>Momentum : 一款非常漂亮的壁纸（支持todo\天气）</li>
</ul>
</li>
<li>Charies : 抓包工具</li>
</ul>
<h2 id="高级类"><a href="#高级类" class="headerlink" title="高级类"></a>高级类</h2><ul>
<li>Alfred 3(必备): 一款workflow效率软件</li>
<li><a href="http://sspai.com/36442" target="_blank" rel="external">Keyboard Maestro</a> :一款超级牛逼的效率软件</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="external">Mac 软件精选</a></p>
</li>
<li><p><a href="http://xclient.info/" target="_blank" rel="external">Mac 工具下载</a></p>
</li>
<li><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="external">Mac 常用快捷键</a></p>
</li>
</ul>
<h2 id="Mac上的软件下载网址推荐"><a href="#Mac上的软件下载网址推荐" class="headerlink" title="Mac上的软件下载网址推荐"></a>Mac上的软件下载网址推荐</h2><ul>
<li>类似于iOS上Cydia一样的第三方软件商店：<a href="http://hack-store.com/" target="_blank" rel="external">http://hack-store.com/</a></li>
<li>玩转苹果：<a href="http://www.ifunmac.com/" target="_blank" rel="external">http://www.ifunmac.com/</a></li>
<li>玩儿法：<a href="http://www.waerfa.com/" target="_blank" rel="external">http://www.waerfa.com/</a></li>
<li>Mac软件下载站：<a href="http://www.pshezi.com/" target="_blank" rel="external">http://www.pshezi.com/</a></li>
<li>MacPeers：<a href="http://www.macpeers.com/" target="_blank" rel="external">http://www.macpeers.com/</a></li>
<li>Mac志：<a href="http://www.isofts.org/" target="_blank" rel="external">http://www.isofts.org/</a></li>
<li>Mac软件分享：<a href="http://www.waitsun.com/" target="_blank" rel="external">http://www.waitsun.com/</a></li>
<li>AppKed：<a href="http://www.macbed.com/" target="_blank" rel="external">http://www.macbed.com/</a></li>
<li>苹果软件园：<a href="http://www.maczapp.com/" target="_blank" rel="external">http://www.maczapp.com/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;精选Mac工具&quot;&gt;&lt;a href=&quot;#精选Mac工具&quot; class=&quot;headerlink&quot; title=&quot;精选Mac工具&quot;&gt;&lt;/a&gt;精选Mac工具&lt;/h1&gt;&lt;h2 id=&quot;工作类&quot;&gt;&lt;a href=&quot;#工作类&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
    
      <category term="Mac" scheme="http://meiminjun.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化测试工程</title>
    <link href="http://meiminjun.github.io/2017/01/01/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/"/>
    <id>http://meiminjun.github.io/2017/01/01/前端自动化工程搭建/</id>
    <published>2017-01-01T03:57:13.000Z</published>
    <updated>2017-01-10T06:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装条件：</p>
<ol>
<li>首先要安装 Java 7 或更高</li>
<li>Node.JS , 而且要确保 npm 命令可用，我想应该其实不用提醒的 ~</li>
</ol>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>找一个目录，起名字为“AutoTest”,然后输入命令<code>npm init -y</code>生成项目文件<code>package.json</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  AutoTest <span class="string">git:</span>(master) npm init -y</div><div class="line">Wrote to <span class="regexp">/Users/</span>apple<span class="regexp">/Documents/</span>github<span class="regexp">/AutoTest/</span><span class="keyword">package</span>.<span class="string">json:</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"AutoTest"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [],</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>然后我们将安装 Selenium 与 Nightwatch。</p>
<ul>
<li>安装 selenium-standalone：<ul>
<li><code>npm install selenium-standalone --save-dev</code></li>
</ul>
</li>
<li>安装 Nightwatch:<ul>
<li><code>npm install nightwatch --save-dev</code> </li>
</ul>
</li>
</ul>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>我们先开始配置 Nightwatch，之前提到这是一款 Test Runner 来着，它负责读取我们的测试脚本，为我们提供 API 来操作浏览器，帮我们控制 Selenium。</p>
<p><strong>一. 配置 Nightwatch</strong></p>
<ol>
<li>首先，在项目根目录建立文件 “nightwatch.json”，这个文件用来存放 Nightwatch 的配置信息。创建完毕之后，在文件内写入以下内容：</li>
</ol>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"src_folders"</span>: [<span class="string">"tests"</span>],</div><div class="line">     <span class="attr">"output_folder"</span>: <span class="string">"reports"</span>,</div><div class="line">     <span class="attr">"custom_commands_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"custom_assertions_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"page_objects_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"globals_path"</span>: <span class="string">""</span>,</div><div class="line"></div><div class="line">     <span class="attr">"selenium"</span>: &#123;</div><div class="line">       <span class="attr">"start_process"</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">"server_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"log_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">       <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">       <span class="attr">"cli_args"</span>: &#123;</div><div class="line">         <span class="attr">"webdriver.chrome.driver"</span>: <span class="string">""</span></div><div class="line">       &#125;</div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     <span class="attr">"test_settings"</span>: &#123;</div><div class="line">       <span class="attr">"default"</span>: &#123;</div><div class="line">         <span class="attr">"launch_url"</span>: <span class="string">"http://localhost"</span>,</div><div class="line">         <span class="attr">"selenium_port"</span>: <span class="number">4444</span>,</div><div class="line">         <span class="attr">"selenium_host"</span>: <span class="string">"localhost"</span>,</div><div class="line">         <span class="attr">"silent"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"screenshots"</span>: &#123;</div><div class="line">           <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">           <span class="attr">"path"</span>: <span class="string">""</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"firefox"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">"chrome"</span> : &#123;</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nightwatch.json 的文件名是 不可以 修改的，因为 Nightwatch 每次启动的时候都是从它读取配置喔！这里的配置项很多，不过先不管它，我们接着创建文件。如果您希望查看 Nightwatch 的详细配置，请点 <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">这里</a>。</p>
<ol>
<li>接着在项目根目录下创建文件 “nightwatch.conf.js” ，同样此文件名也是不可以修改的，因为 Nightwatch 每次启动也会从它这里读取配置喔~ (´･_･`)</li>
</ol>
<p>创建完毕后，打开文件，并写入如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> settings;</div><div class="line">&#125;)(<span class="built_in">require</span>(<span class="string">'./nightwatch.json'</span>))</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *  Nightwatch 会从 nightwatch.json 中读取配置。</div><div class="line"> *  不过如果存在 nightwatch.conf.js，将会变为首先从后者中读取配置。</div><div class="line"> *  nightwatch.conf.js 存在的意义是使用 JavaScript 动态生成配置信息。</div><div class="line"> *  如果配置信息是不需要代码修改的，直接使用 nightwatch.json 就可以啦。</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li>再次在项目根目录建立文件 “startup.js”，然后在文件内部写入：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">require</span><span class="params">(<span class="string">'nightwatch/bin/runner.js'</span>)</span></span></div></pre></td></tr></table></figure>
<p>这个文件就是我们测试的入口文件，以后我们要执行测试就要运行这个文件，命令为 node ./startup。入口文件的名字是可以按照喜好更改的，只要运行它就好啦。不过每次输入 node ./startup 太麻烦了，所以我们将这条命令写入 npm scripts 中 ~~~ 打开 “package.json”，在 JSON 对象中建立 “script” 属性，并写入内容：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以后每次运行测试只要在项目根目录中执行 npm start 就好了！(･∀･)<br>Nightwatch 的配置暂时告一段落（其实马上就会回来………），接下来我们来处理 Selenium.</p>
<p><strong>二. 配置 Selenium</strong></p>
<p>Selenium 是自动化测试环境，它提供了测试服务器、启动浏览器、网页自动操作等功能，同时暴露 API 给 Nightwatch 供我们使用。</p>
<p>我们接下来将要告诉 Nightwatch 我们的 Selenium 安装在哪里，启动浏览器的 Driver 程序在哪里，然后建立 Selenium 的安装脚本与手工启动脚本，以便不时之需 ~~</p>
<blockquote>
<p>Driver 是让 Selenium 打开系统上已安装的浏览器的程序。</p>
</blockquote>
<ol>
<li>建立 Selenium 的配置信息</li>
</ol>
<p>在项目根目录下建立文件夹 “build”，并在其中创建文件 “selenium-conf.js”，并写入如下信息：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const process = require('process')</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    // <span class="attribute">Selenium 的版本配置信息。请在下方链接查询最新版本。升级版本只需修改版本号即可。</span></div><div class="line">    // https://selenium-release<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>/index<span class="variable">.html</span></div><div class="line">    selenium: &#123;</div><div class="line">        version: '2.53.1',</div><div class="line">        baseURL: 'https://selenium-release<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>'</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Driver 用来启动系统中安装的浏览器，Selenium 默认使用 Firefox，如果不需要使用其他浏览器，则不需要额外安装 Driver。</div><div class="line">    // 在此我们安装 Chrome 的 driver 以便使用 Chrome 进行测试。</div><div class="line">    driver: &#123;</div><div class="line">        chrome: &#123;</div><div class="line">            // Chrome 浏览器启动 Driver，请在下方链接查询最新版本。</div><div class="line">            // https://chromedriver<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>/index<span class="variable">.html</span></div><div class="line">            version: '2.25',</div><div class="line">            arch: process<span class="variable">.arch</span>,</div><div class="line">            baseURL: 'https://chromedriver<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本配置信息包含 Selenium 本体配置与 Driver 配置。我们将在稍后动态载入这些配置。 本文件的目的是为了更好管理 Selenium 的版本。</p>
<ol>
<li>告诉 Nightwatch，我的 Selenium 与 Driver 在哪里。</li>
</ol>
<p>再次打开项目根目录下的 “nightwatch.conf.js” 文件，并这样编辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./build/selenium-conf'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 告诉 Nightwatch 我的 Selenium 在哪里。</span></div><div class="line">    settings.selenium.server_path = <span class="string">`<span class="subst">$&#123;path.resolve()&#125;</span>/node_modules/selenium-standalone/.selenium/selenium-server/<span class="subst">$&#123;seleniumConfig.selenium.version&#125;</span>-server.jar`</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置 Chrome Driver, 让 Selenium 有打开 Chrome 浏览器的能力。</span></div><div class="line">    settings.selenium.cli_args[<span class="string">'webdriver.chrome.driver'</span>] = <span class="string">`<span class="subst">$&#123;path.resolve()&#125;</span>/node_modules/selenium-standalone/.selenium/chromedriver/<span class="subst">$&#123;seleniumConfig.driver.chrome.version&#125;</span>-<span class="subst">$&#123;seleniumConfig.driver.chrome.arch&#125;</span>-chromedriver`</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> settings;</div><div class="line">&#125;)(<span class="built_in">require</span>(<span class="string">'./nightwatch.json'</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>我们新加了两行配置，它们的作用如注释所示。<br>同样的，如果您希望查看更多的配置项，请点击 <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<ol>
<li>建立 Selenium 安装脚本，一键安装 Selenium。</li>
</ol>
<p>selenium-standalone 只是用来安装和管理 Selenium 的工具么？所以现在是时候用它来安装 Selenium 了。我们将通过调取 selenium-standalone 的内置方法来实现自动安装。在 “build” 文件夹中建立文件 “selenium-setup.js”，并写入如下信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">'selenium-standalone'</span>)</div><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./selenium-conf.js'</span>)</div><div class="line"></div><div class="line">selenium.install(&#123;</div><div class="line">    <span class="attr">version</span>: seleniumConfig.selenium.version,</div><div class="line">    <span class="attr">baseURL</span>: seleniumConfig.selenium.baseURL,</div><div class="line">    <span class="attr">drivers</span>: seleniumConfig.driver,</div><div class="line">    <span class="attr">logger</span>: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; <span class="built_in">console</span>.log(message) &#125;,</div><div class="line">    <span class="attr">progressCb</span>: <span class="function"><span class="keyword">function</span> (<span class="params">totalLength, progressLength, chunkLength</span>) </span>&#123;&#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Selenium 安装错误: <span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Selenium 安装完成.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>同样为了方便，我们将安装命令写入 npm scripts 中：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span>,</div><div class="line">        <span class="string">"selenium-setup"</span>: <span class="string">"node ./build/selenium-setup.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在项目根目录执行 npm run selenium-setup 安装 Selenium.<br>当提示安装完成后，一切就绪！(･∀･)</p>
<blockquote>
<p>Selenium 与其 Driver 会安装到 “node_modules/selenium-standalone/.selenium” 中。</p>
</blockquote>
<ol>
<li>想要手工启动 Selenium？</li>
</ol>
<p>默认情况下，Selenium 是由 Nightwatch 启动的，不需要手工干预，不过如果想要手工启动当然是可以的啦。<br>在 build 文件夹中建立文件 “selenium-start.js”，并写入如下信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">'selenium-standalone'</span>)</div><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./selenium-conf.js'</span>)</div><div class="line"></div><div class="line">selenium.start(&#123;</div><div class="line">    <span class="attr">drivers</span>: seleniumConfig.driver</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, child</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Selenium 启动失败: <span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Selenium 已手工启动，进程 PID: <span class="subst">$&#123;child.pid&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'当不再需要运行 Selenium 时可关闭此 PID 进程.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后同样添加启动命令至 npm scripts 中：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span>,</div><div class="line">        <span class="string">"selenium-setup"</span>: <span class="string">"node ./build/selenium-setup.js"</span>,</div><div class="line">        <span class="string">"selenium-start"</span>: <span class="string">"node ./build/selenium-start.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以后使用命令 npm run selenium-start 就可以手工启动 Selenium 了。</p>
<h2 id="环境配置完成"><a href="#环境配置完成" class="headerlink" title="环境配置完成"></a>环境配置完成</h2><p>目录如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> -- build</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-conf.js        # Selenium 版本信息配置。</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-setup.js       # Selenium 安装命令脚本。</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-start.js       # Selenium 启动命令脚本。</span></div><div class="line">|</div><div class="line">|<span class="string"> -- nightwatch.conf.js             # Nightwatch 动态配置文件。</span></div><div class="line">|<span class="string"> -- nightwatch.json                # Nightwatch 配置文件。</span></div><div class="line">|<span class="string"> -- package.json                   # 项目信息配置文件。</span></div><div class="line">|<span class="string"> -- startup.js                     # 测试启动入口文件。</span></div></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>nightwatch.json文件中</p>
<ul>
<li>请注意 “desiredCapabilities” 下的 “browserName” 项，这是测试时将使用的浏览器，您可以修改为 chrome、internet explorer、phantomjs，本文在介绍时只安装了 Chrome 的 Driver，如果您需要使用其他浏览器，要安装相应的 Driver 才可以正常使用。</li>
<li>默认浏览器为 Firefox，如果您使用 Firefox 的话，不需要额外进行 Driver 的配置。</li>
<li>所以，如果您需要使用 Chrome 的话请将 “browserName” 修改为 “chrome” 喔！<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"src_folders"</span>: [<span class="string">"tests"</span>],</div><div class="line">     <span class="attr">"output_folder"</span>: <span class="string">"reports"</span>,</div><div class="line">     <span class="attr">"custom_commands_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"custom_assertions_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"page_objects_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"globals_path"</span>: <span class="string">""</span>,</div><div class="line"></div><div class="line">     <span class="attr">"selenium"</span>: &#123;</div><div class="line">       <span class="attr">"start_process"</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">"server_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"log_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">       <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">       <span class="attr">"cli_args"</span>: &#123;</div><div class="line">         <span class="attr">"webdriver.chrome.driver"</span>: <span class="string">""</span></div><div class="line">       &#125;</div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     <span class="attr">"test_settings"</span>: &#123;</div><div class="line">       <span class="attr">"default"</span>: &#123;</div><div class="line">         <span class="attr">"launch_url"</span>: <span class="string">"http://localhost"</span>,</div><div class="line">         <span class="attr">"selenium_port"</span>: <span class="number">4444</span>,</div><div class="line">         <span class="attr">"selenium_host"</span>: <span class="string">"localhost"</span>,</div><div class="line">         <span class="attr">"silent"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"screenshots"</span>: &#123;</div><div class="line">           <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">           <span class="attr">"path"</span>: <span class="string">""</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">"chrome"</span> : &#123;</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Driver 的文档可参考<a href="http://nightwatchjs.org/guide#selenium-settings" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h2 id="开始编写测试用例"><a href="#开始编写测试用例" class="headerlink" title="开始编写测试用例"></a>开始编写测试用例</h2><h3 id="创建目录存放测试用例"><a href="#创建目录存放测试用例" class="headerlink" title="创建目录存放测试用例"></a>创建目录存放测试用例</h3><p>在项目根目录新建一个名为 “tests” 的目录，然后这里就用来存放我们即将编写的测试用例文件。<br>那么这个文件夹能不能指向到其他地方去呢？当然可以，不过要修改一个小地方。</p>
<p>还记得 “ nightwatch.json “ 文件么？打开看看，第一项是不是叫 src_folders，然后值为 [“tests”]？<br>我相信您已经懂了，这里就是定义测试用例存放目录的地方，然后改成自己想要的目录吧！</p>
<blockquote>
<p>您可以在目录中存放多个测试用例文件，且命名随意，Nightwatch 将读取目录中所有的 JS 文件，如果符合测试用例格式，将会自动执行。</p>
</blockquote>
<h3 id="编写一个简单的测试用例"><a href="#编写一个简单的测试用例" class="headerlink" title="编写一个简单的测试用例"></a>编写一个简单的测试用例</h3><p>在 “tests” 目录中建立一个测试用例文件 “demo.js”，然后我们来写一个没什么用的小 demo！</p>
<p>这个 Demo 将打开 Bing，搜索 “what is microsoft”，然后保存成截图后退出。</p>
<p>OK，打开 “demo.js”，添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">'Find the answer.'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</div><div class="line">    <span class="comment">// TODO...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>module.exports 导出一个对象，对象的 Key 即为测试用例名称，您可以编写多个测试用例，Nightwatch 将依次执行。</p>
</blockquote>
<p>您可以在测试用例中导入其他模块并直接使用在测试逻辑中</p>
<p>先写到这里，您可能会对 cilent 感到陌生，所以还是要简单介绍一下。</p>
<p>client 是代码运行时 Nightwatch 提供的对象，所有对浏览器进行的操作都将使用此对象调取，比如 client.click(“CSS Selector”)、client.getCookie(function () {…})，我们第一章说过的 “可以简单理解为 Selenium 的控制软件” 就是通过它体现的喔！</p>
<blockquote>
<p>client 的所有 API 详情见 <a href="http://nightwatchjs.org/api#commands" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>大致了解这东西的意思之后，就可以接着完善测试逻辑了：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  '<span class="attribute">Find the answer.'</span>: function (client) &#123;</div><div class="line">    // 定义 Bing 页面中的节点.</div><div class="line">    const searchInput = '#sb_form_q'</div><div class="line">    const searchBtn = '#sb_form_go'</div><div class="line">    const question = 'what is microsoft'</div><div class="line"></div><div class="line">    // 启动浏览器并打开 bing<span class="variable">.com</span>.</div><div class="line">    client<span class="variable">.url</span>('http://bing<span class="variable">.com</span>')<span class="variable">.maximizeWindow</span>()</div><div class="line"></div><div class="line">    // 确保 "body" 和输入框可以使用.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span></div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>(searchInput)<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line">    client<span class="variable">.pause</span>(2000)  // 稍等两秒.</div><div class="line"></div><div class="line">    // 输入 "what is microsoft" 然后搜索.</div><div class="line">    client<span class="variable">.setValue</span>(searchInput, question)</div><div class="line">    client<span class="variable">.click</span>(searchBtn)</div><div class="line">    client<span class="variable">.pause</span>(2000)</div><div class="line"></div><div class="line">    // 截一张图然后保存到 "reports/answer<span class="variable">.png</span>". </div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span></div><div class="line">    client<span class="variable">.saveScreenshot</span>('reports/answers<span class="variable">.png</span>')</div><div class="line">    client<span class="variable">.end</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来关注一下 expect ，是不是看起来很像自然语言？这些语句就是测试结果的验证语句，就是我们希望得到的结果。比如 client.expect.element(‘body’).to.be.present.before(3000)，意思就是 “希望 body 元素能在 3000 毫秒内初始化完毕”。</p>
<blockquote>
<p>Nightwatch 支持 BDD-Style 与 Assert 断言两种风格，文档可见 <a href="http://nightwatchjs.org/api#expect-api" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>是不是确实没什么用？毕竟是个简单的 Demo 而已，哈哈。那么添加一个稍微复杂点的测试用例。</p>
<h3 id="编写另一个简单的测试用例"><a href="#编写另一个简单的测试用例" class="headerlink" title="编写另一个简单的测试用例"></a>编写另一个简单的测试用例</h3><p>这个 demo 将打开 <a href="http://live.bilibili.com/" target="_blank" rel="external">Bilibili 直播</a> ，然后执行：</p>
<ul>
<li>打开首页并等待加载完毕；</li>
<li>检查登陆按钮是否存在；</li>
<li>点击登陆按钮；</li>
<li>填写用户名与密码；</li>
<li>点击登陆；</li>
<li>等待页面加载；</li>
<li>通过 Cookie 检查是否已登陆；</li>
<li>确保登陆后的用户导航面板存在；</li>
<li>鼠标移至头像处打开导航面板；</li>
<li>点击退出登陆；</li>
<li>等待页面刷新后检查 Cookie 是否已退出登陆；</li>
<li>结束测试。</li>
</ul>
<p>代码：<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">// Account setting.</div><div class="line">const accountConfig = &#123;</div><div class="line">  <span class="attribute">username</span>: 'USERNAME',</div><div class="line">  password: 'PASSWORD',</div><div class="line">  uid: '10000'</div><div class="line">&#125;</div><div class="line"></div><div class="line">module<span class="variable">.exports</span> = &#123;</div><div class="line">  'Bilibili Live Login Test': function (client) &#123;</div><div class="line">    client<span class="variable">.url</span>('http://live<span class="variable">.bilibili</span><span class="variable">.com</span>')<span class="variable">.maximizeWindow</span>()</div><div class="line"></div><div class="line">    // Page Init.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('<span class="variable">.top-nav-login-btn</span><span class="variable">.last</span>')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line"></div><div class="line">    // Login.</div><div class="line">    client<span class="variable">.click</span>('<span class="variable">.top-nav-login-btn</span><span class="variable">.last</span>')</div><div class="line">    client<span class="variable">.waitForElementVisible</span>('#bilibili-quick-login', 2000)</div><div class="line">    client<span class="variable">.frame</span>(0)</div><div class="line">    client<span class="variable">.pause</span>(2000)</div><div class="line">    client<span class="variable">.setValue</span>('#login-username', accountConfig<span class="variable">.username</span>)</div><div class="line">    client<span class="variable">.setValue</span>('#login-passwd', accountConfig<span class="variable">.password</span>)</div><div class="line">    client<span class="variable">.click</span>('#login-submit')</div><div class="line"></div><div class="line">    // Wait and check page has been reloaded.</div><div class="line">    client<span class="variable">.frameParent</span>()</div><div class="line">    client<span class="variable">.pause</span>(4000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line"></div><div class="line">    // Check cookies to ensure we are signed in.</div><div class="line">    client<span class="variable">.getCookies</span>(function (result) &#123;</div><div class="line">      result<span class="variable">.value</span><span class="variable">.forEach</span>((value, index, array) =&gt; &#123;</div><div class="line">        if (value<span class="variable">.name</span> === 'DedeUserID') client<span class="variable">.assert</span><span class="variable">.equal</span>(parseInt(value<span class="variable">.value</span>, 10), accountConfig<span class="variable">.uid</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    // Move to User Avatar.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('<span class="variable">.user-avatar-link</span>')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line">    client<span class="variable">.moveToElement</span>('<span class="variable">.user-avatar-link</span>', 5, 5)</div><div class="line">    client<span class="variable">.pause</span>(800)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('#top-nav-user-panel')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line"></div><div class="line">    // Logout.</div><div class="line">    client<span class="variable">.click</span>('#top-nav-logout-link')</div><div class="line">    client<span class="variable">.pause</span>(5000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line"></div><div class="line">    // Check cookies again to ensure we are off.</div><div class="line">    client<span class="variable">.getCookies</span>(function (result) &#123;</div><div class="line">      var logout = true</div><div class="line">      result<span class="variable">.value</span><span class="variable">.forEach</span>((value, index, array) =&gt; &#123;</div><div class="line">        if (value<span class="variable">.name</span> === 'LIVE_LOGIN_DATA') logout = false</div><div class="line">      &#125;)</div><div class="line">      client<span class="variable">.assert</span><span class="variable">.equal</span>(logout, true)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    client<span class="variable">.pause</span>(1000)</div><div class="line">    client<span class="variable">.end</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>您可以新建一个文件，或者在之前的文件中继续编写。</p>
</blockquote>
<h3 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h3><p>回到项目根目录，执行 npm start，然后就可以看到浏览器自己测试了！</p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ul>
<li><p>在填写<code>selenium-conf.js</code>的时候不要写最新版本（3.0版本）,不然在跑案例脚本时候会报找不到element的错误</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">selenium</span>: &#123;</div><div class="line">        <span class="attribute">version</span>: <span class="string">'2.53.1'</span>,  </div><div class="line">        baseURL: <span class="string">'https://selenium-release.storage.googleapis.com'</span></div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>其次，配置chromedriver的时候也不要写最新的版本，在mac中会报找不到mac64的错误，写成如下版本即可：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">driver</span>: &#123;</div><div class="line">        <span class="attribute">chrome</span>: &#123;</div><div class="line">            <span class="comment">// Chrome 浏览器启动 Driver，请在下方链接查询最新版本。</span></div><div class="line">            <span class="comment">// https://chromedriver.storage.googleapis.com/index.html</span></div><div class="line">            <span class="attribute">version</span>: <span class="string">'2.25'</span>,</div><div class="line">            <span class="attribute">arch</span>: process.arch,</div><div class="line">            <span class="attribute">baseURL</span>: <span class="string">'https://chromedriver.storage.googleapis.com'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>源文件项目地址:</em></p>
<blockquote>
<p><a href="https://github.com/meiminjun/AutoTest" target="_blank" rel="external">https://github.com/meiminjun/AutoTest</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先要安装 Java 7 或更高&lt;/li&gt;
&lt;li&gt;Node.JS , 而且要确保 npm 命令可用，我想应该其实不用提醒的 ~&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;开始搭建&quot;&gt;&lt;a href=&quot;#开始搭建&quot; class=&quot;heade
    
    </summary>
    
    
      <category term="自动化测试" scheme="http://meiminjun.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作-远程管理与分支管理</title>
    <link href="http://meiminjun.github.io/2016/12/21/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://meiminjun.github.io/2016/12/21/git常用操作-远程管理/</id>
    <published>2016-12-21T03:57:13.000Z</published>
    <updated>2017-01-04T01:53:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用操作之远程管理与分支管理"><a href="#git常用操作之远程管理与分支管理" class="headerlink" title="git常用操作之远程管理与分支管理"></a>git常用操作之远程管理与分支管理</h1><h2 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h2><ul>
<li><p>克隆远程库， git clone git@github.com:meiminjun/meiminjun.github.io.git</p>
</li>
<li><p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p>
</li>
<li><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p>
</li>
<li><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p>
</li>
</ul>
<blockquote>
<p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>
</blockquote>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fb1upo5iqkj208d047q2w.jpg" alt=""></p>
<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长,</p>
<p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fb1uriy9a3j20a706h74a.jpg" alt=""></p>
<p>Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1ut2uf8qj20dq06hmx7.jpg" alt=""></p>
<p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fb1utvdg4ij20br0660st.jpg" alt=""></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1uvckv5pj20br04fdfu.jpg" alt=""></p>
<p>举个例子：</p>
<p>首先，我们创建dev分支，然后切换到dev分支：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout -<span class="selector-tag">b</span> test</div><div class="line">Switched to <span class="selector-tag">a</span> new branch <span class="string">'test'</span></div></pre></td></tr></table></figure>
<p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git branch <span class="built_in">test</span></div><div class="line">git checkout <span class="built_in">test</span></div><div class="line">Switched to branch <span class="string">'test'</span></div></pre></td></tr></table></figure></p>
<p>然后，用git branch命令查看当前分支：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git branch</div><div class="line">  develop</div><div class="line">  feature/mysql</div><div class="line">  <span class="keyword">master</span></div><div class="line"><span class="title">* test</span></div></pre></td></tr></table></figure></p>
<p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p>
<p>然后，我们就可以在test分支上正常提交，比如添加一个branch.js文件<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line">git commit -m <span class="string">"添加文件"</span></div></pre></td></tr></table></figure></p>
<p>这时，我们切换到master分支<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout <span class="literal">master</span></div></pre></td></tr></table></figure></p>
<p>切换回master分支后，刚才添加branch.js文件不见了，因为那个提交是在test分支上，而master分支此刻的提交点并没有变：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1vqyzyh0j20bd066aa3.jpg" alt=""></p>
<p>现在，我们把test分支的工作成果合并到master分支上：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">merge</span> <span class="keyword">test</span></div><div class="line">Updating <span class="number">967984</span>f..ecc13e5</div><div class="line"><span class="keyword">Fast</span>-forward</div><div class="line"> git/branch.js           | <span class="number">1</span> +</div></pre></td></tr></table></figure>
<p>git merge命令用于合并指定分支到当前分支。合并后，再查看里面的内容，就可以看到，和test分支的最新提交是完全一样的。</p>
<p>合并完成后，就可以放心地删除dev分支了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch <span class="_">-d</span> <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意删除只能删除其他分支，不能删除当前分支</p>
</blockquote>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全</p>
<p>小结:</p>
<p>查看分支：git branch</p>
<p>创建分支：git branch <name></name></p>
<p>切换分支：git checkout <name></name></p>
<p>创建+切换分支：git checkout -b <name></name></p>
<p>合并某分支到当前分支：git merge <name></name></p>
<p>删除分支：git branch -d <name></name></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用操作之远程管理与分支管理&quot;&gt;&lt;a href=&quot;#git常用操作之远程管理与分支管理&quot; class=&quot;headerlink&quot; title=&quot;git常用操作之远程管理与分支管理&quot;&gt;&lt;/a&gt;git常用操作之远程管理与分支管理&lt;/h1&gt;&lt;h2 id=&quot;远程管理&quot;
    
    </summary>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git常用操作-回滚操作</title>
    <link href="http://meiminjun.github.io/2016/12/01/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C/"/>
    <id>http://meiminjun.github.io/2016/12/01/git常用操作-回滚操作/</id>
    <published>2016-12-01T04:57:13.000Z</published>
    <updated>2017-01-04T01:54:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用操作-回滚代码"><a href="#git常用操作-回滚代码" class="headerlink" title="git常用操作-回滚代码"></a>git常用操作-回滚代码</h1><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><ul>
<li>git init 初始化一个git仓库</li>
<li>git add readme.txt 把文件添加到仓库(可以后面添加多个文件)</li>
<li>git add . 提交当前目录到缓存区</li>
<li>git commit -m “wrote a readme file” 把文件提交到仓库：</li>
<li>git status命令可以让我们时刻掌握仓库当前的状态</li>
<li>git diff 查看修改记录(按q退出)</li>
<li>git diff test.js 查看test.js修改记录(按q退出)</li>
<li>git checkout – file 在add之前修改过的记录撤销到与仓库一致</li>
<li>git reset HEAD file 把你add到缓存区的文件撤销到add之前</li>
<li>git diff HEAD – file 查看当前文件与仓库文件的区别</li>
</ul>
<h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><p>你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>
<p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：</p>
<p>打印日志：</p>
<p>git log 显示从最近到最远的提交日志</p>
<p>git log –pretty=oneline 显示简要版本</p>
<p>git reflog 显示所有分支的<strong>全部提交记录</strong> </p>
<p>开始穿梭到之前存盘（commit）的版本</p>
<p>git reset –hard HEAD^ </p>
<p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>git reset –hard d50672e 回滚到特定版本</p>
<p>总结：</p>
<ul>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</p>
</li>
<li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p>
</li>
<li><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>
</li>
</ul>
<h2 id="工作区与缓存区"><a href="#工作区与缓存区" class="headerlink" title="工作区与缓存区"></a>工作区与缓存区</h2><p>工作区：就是你电脑里看到的目录,也就是你的项目目录</p>
<p>版本库（Repository）:工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1faxekavuo1j20cq06iaa8.jpg" alt="缓存区"></p>
<p>前面我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch <span class="keyword">man</span>.js</div><div class="line"></div><div class="line"><span class="keyword">cat</span> &gt; <span class="keyword">man</span>.js</div><div class="line">输入管理</div><div class="line"></div><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div></pre></td></tr></table></figure>
<p>然后，<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">add</span> man.js</div><div class="line">git status</div><div class="line">Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div><div class="line"></div><div class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   man.js</div></pre></td></tr></table></figure></p>
<p>然后再次修改man.js，<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div><div class="line">测试一个内容</div><div class="line">测试</div><div class="line">新增修改</div></pre></td></tr></table></figure></p>
<p>提交：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"新增修改"</span></div><div class="line">[feature/git学习 <span class="number">4</span>f8114c] 新增修改</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">2</span> insertions(+)</div><div class="line"> create mode <span class="number">100644</span> git/man.js</div></pre></td></tr></table></figure></p>
<p>提交后，再看看状态：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>咦，怎么第二次的修改没有被提交？</p>
<p>我们回顾一下操作过程：</p>
<p>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</p>
<blockquote>
<p>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
</blockquote>
<p>提交后，用git diff HEAD – readme.txt命令可以查看工作区和版本库里面最新版本的区别：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git diff HEAD --man.js</div><div class="line"></div><div class="line">diff --git a/git/man.js b/git/man.js</div><div class="line">index 5884356..f434b08 100644</div><div class="line"><span class="comment">--- a/git/man.js</span></div><div class="line"><span class="comment">+++ b/git/man.js</span></div><div class="line"><span class="meta">@@ -1,2 +1,3 @@</span></div><div class="line"> 测试一个内容</div><div class="line"> 测试</div><div class="line"><span class="addition">+新增修改</span></div></pre></td></tr></table></figure></p>
<p>可见，第二次修改确实没有被提交。<br>如果提交完毕了则显示的是：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nothing <span class="built_in">to</span> commit, working <span class="built_in">directory</span> clean</div></pre></td></tr></table></figure></p>
<p>总结：<br>Git是如何跟踪修改的？每次修改，如果不add到暂存区，那就不会加入到commit中</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>举例说明：</p>
<p>目前的最新文件：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div><div class="line">测试一个内容</div><div class="line">测试</div><div class="line">新增修改</div></pre></td></tr></table></figure></p>
<p>这时候你新增了一行</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div><div class="line">测试一个内容</div><div class="line">测试</div><div class="line">新增修改</div><div class="line">新增一行代码</div></pre></td></tr></table></figure>
<p>突然，你发现新增的代码有点问题你想回退到之前版本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
<p>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--</span> <span class="selector-tag">man</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<p>命令git checkout – man.js意思就是，把man.js文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是man.js自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是man.js已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<blockquote>
<p>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令</p>
</blockquote>
<p>下面一种情况是当你已经add到缓存区了，你想撤销<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">add</span> man.js</div><div class="line">git status</div><div class="line">Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div><div class="line"></div><div class="line">        modified:   man.js</div></pre></td></tr></table></figure></p>
<p>Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> man.js</div></pre></td></tr></table></figure>
<p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>
<p>再用git status查看一下，现在暂存区是干净的，工作区有修改：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>如果想丢弃工作区的修改,则继续<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--</span> <span class="selector-tag">man</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure></p>
<p>小结：</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>场景说明：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add man.js</div><div class="line">git commit -m <span class="string">"测试删除"</span></div><div class="line">[feature/git学习 fe3e350] 测试删除</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">1</span> insertion(+), <span class="number">3</span> deletions(-)</div></pre></td></tr></table></figure></p>
<p>一般情况下如果你删除文件的时候，就直接把文件给删了，或者rm 命令删除了</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">rm</span> <span class="keyword">man</span>.js</div></pre></td></tr></table></figure>
<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line">On branch feature/git学习</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add/rm &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        deleted:    man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">rm</span> <span class="keyword">man</span>.js</div><div class="line"><span class="keyword">rm</span> 'git/<span class="keyword">man</span>.js'</div><div class="line">git commit -<span class="keyword">m</span> <span class="string">"remove man.js"</span></div><div class="line">feature/git学习 8a1abac] remove <span class="keyword">man</span>.js</div><div class="line"> 1 <span class="keyword">file</span> changed, 1 deletion(-)</div><div class="line"> delete mode 100644 git/<span class="keyword">man</span>.js</div></pre></td></tr></table></figure></p>
<p>文件就从版本库中被删除了。</p>
<p>另一种情况，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--</span> <span class="selector-tag">man</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git常用操作-回滚代码&quot;&gt;&lt;a href=&quot;#git常用操作-回滚代码&quot; class=&quot;headerlink&quot; title=&quot;git常用操作-回滚代码&quot;&gt;&lt;/a&gt;git常用操作-回滚代码&lt;/h1&gt;&lt;h2 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命
    
    </summary>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>chrome神器之postman</title>
    <link href="http://meiminjun.github.io/2016/08/18/chrome-postman/"/>
    <id>http://meiminjun.github.io/2016/08/18/chrome-postman/</id>
    <published>2016-08-18T07:54:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="postman简介"><a href="#postman简介" class="headerlink" title="postman简介"></a>postman简介</h2><p>这个是一个接口调试神器（<strong>前端开发必备</strong>），不用再每次运行app再来调试接口，任意修改入参，方便与后端人员联调。</p>
<p>##离线安装(简易版)</p>
<p>内部地址：<br>\10.14.47.51\share\临时存放\梅敏君\tool\Postman-REST-Client_v0.8.1</p>
<p>外部地址：<br>链接：<a href="http://share.weiyun.com/6d9d61e3c3ec595f61ab58886e14c280" target="_blank" rel="external">http://share.weiyun.com/6d9d61e3c3ec595f61ab58886e14c280</a> （密码：9rFJ）<br>链接: <a href="http://pan.baidu.com/s/1o7BTKt8" target="_blank" rel="external">http://pan.baidu.com/s/1o7BTKt8</a> 密码: h6t6</p>
<p>安装方法如下：</p>
<a id="more"></a>
<p>打开chrome,输入”chrome://extensions/“进入扩展程序，勾选”开发者模式”</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6y0047jrrj20fe0c5gmy.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6y00hz3u9j20fe02zt8w.jpg" alt=""></p>
<p>将”Postman-REST-Client_v0.8.1”源码引入到chrome</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y010h30nj20fe0almyp.jpg" alt=""></p>
<p>引入后，就能显示<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y027gymcj20fe05amxp.jpg" alt=""></p>
<p>打开postman<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y03b9ajnj20f107owf1.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6y03s6yq6j20fe0bgq3b.jpg" alt=""></p>
<p>可以开始使用<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6y04dplabj20fe054jrp.jpg" alt=""></p>
<h3 id="常用快捷键操作"><a href="#常用快捷键操作" class="headerlink" title="常用快捷键操作"></a>常用快捷键操作</h3><ol>
<li>新增加一个请求：alt + n</li>
<li>收藏请求：a</li>
</ol>
<p>更多请参考，<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y0al4gfnj20hd0elta9.jpg" alt=""></p>
<h2 id="在线安装postman-完整版本"><a href="#在线安装postman-完整版本" class="headerlink" title="在线安装postman(完整版本)"></a>在线安装postman(完整版本)</h2><ul>
<li>打开chrome,输入”chrome://extensions/“进入扩展程序，点击”获取更多扩展程序”.</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6xyt0d1pgj20e00hhtb4.jpg" alt=""></p>
<ul>
<li>进入chrome商店（这里是要翻墙才可以，请参见），搜索postman</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6xze0tokdj20x7061ta6.jpg" alt=""></p>
<ul>
<li>使用方法基本和”简易版”一样</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;postman简介&quot;&gt;&lt;a href=&quot;#postman简介&quot; class=&quot;headerlink&quot; title=&quot;postman简介&quot;&gt;&lt;/a&gt;postman简介&lt;/h2&gt;&lt;p&gt;这个是一个接口调试神器（&lt;strong&gt;前端开发必备&lt;/strong&gt;），不用再每次运行app再来调试接口，任意修改入参，方便与后端人员联调。&lt;/p&gt;
&lt;p&gt;##离线安装(简易版)&lt;/p&gt;
&lt;p&gt;内部地址：&lt;br&gt;\10.14.47.51\share\临时存放\梅敏君\tool\Postman-REST-Client_v0.8.1&lt;/p&gt;
&lt;p&gt;外部地址：&lt;br&gt;链接：&lt;a href=&quot;http://share.weiyun.com/6d9d61e3c3ec595f61ab58886e14c280&quot;&gt;http://share.weiyun.com/6d9d61e3c3ec595f61ab58886e14c280&lt;/a&gt; （密码：9rFJ）&lt;br&gt;链接: &lt;a href=&quot;http://pan.baidu.com/s/1o7BTKt8&quot;&gt;http://pan.baidu.com/s/1o7BTKt8&lt;/a&gt; 密码: h6t6&lt;/p&gt;
&lt;p&gt;安装方法如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="http://meiminjun.github.io/tags/chrome/"/>
    
      <category term="postman" scheme="http://meiminjun.github.io/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>google之翻越长城</title>
    <link href="http://meiminjun.github.io/2016/08/18/chrome-%E7%BF%BB%E5%A2%99/"/>
    <id>http://meiminjun.github.io/2016/08/18/chrome-翻墙/</id>
    <published>2016-08-18T07:54:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>先上图<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6y0m99wxqj20qj0fomzi.jpg" alt=""></p>
<h2 id="翻墙你能干嘛呢？"><a href="#翻墙你能干嘛呢？" class="headerlink" title="翻墙你能干嘛呢？"></a>翻墙你能干嘛呢？</h2><ul>
<li>查询到最优质的知识和技能（比百度强大的多）</li>
<li>可以facebook、YouTube(这个比土豆、优酷资源大的多)</li>
<li>对于前端开发者来说，可以直接通过chrome调试android的webview（用过的人都知道比safari强大的多）</li>
<li>喜欢看各种电影的同学，哎，不说了。。太多了</li>
</ul>
<a id="more"></a>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>链接: <a href="http://pan.baidu.com/s/1sliXC4l" target="_blank" rel="external">http://pan.baidu.com/s/1sliXC4l</a> 密码: wsny (不行就用下面的)<br>链接：<a href="http://share.weiyun.com/13800b0a86b3dcf10f986903d131d31b" target="_blank" rel="external">http://share.weiyun.com/13800b0a86b3dcf10f986903d131d31b</a> （密码：sEKu）</p>
<h2 id="替换host文件"><a href="#替换host文件" class="headerlink" title="替换host文件"></a>替换host文件</h2><blockquote>
<p><strong>注意：替换之前先备份一下你的hosts文件</strong></p>
</blockquote>
<p>替换位置：</p>
<p>Windows系统hosts位于 C:\Windows\System32\drivers\etc\hosts</p>
<p>Android（安卓）系统hosts位于 /system/etc/hosts</p>
<p>Mac（苹果电脑）系统hosts跟Linux一样位于 /etc/hosts（找不到的自行百度）</p>
<h2 id="重启chrome-就可以了"><a href="#重启chrome-就可以了" class="headerlink" title="重启chrome 就可以了"></a>重启chrome 就可以了</h2><p>鉴于国内长城封锁的很死，对.com 的 google还是走不了的</p>
<p>一般走香港的google<br><a href="https://www.google.com.hk/?gws_rd=ssl" target="_blank" rel="external">https://www.google.com.hk/?gws_rd=ssl</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上图&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/69a9ed59gw1f6y0m99wxqj20qj0fomzi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;翻墙你能干嘛呢？&quot;&gt;&lt;a href=&quot;#翻墙你能干嘛呢？&quot; class=&quot;headerlink&quot; title=&quot;翻墙你能干嘛呢？&quot;&gt;&lt;/a&gt;翻墙你能干嘛呢？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查询到最优质的知识和技能（比百度强大的多）&lt;/li&gt;
&lt;li&gt;可以facebook、YouTube(这个比土豆、优酷资源大的多)&lt;/li&gt;
&lt;li&gt;对于前端开发者来说，可以直接通过chrome调试android的webview（用过的人都知道比safari强大的多）&lt;/li&gt;
&lt;li&gt;喜欢看各种电影的同学，哎，不说了。。太多了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="http://meiminjun.github.io/tags/chrome/"/>
    
      <category term="google" scheme="http://meiminjun.github.io/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>ionic2菜鸟学习笔记《二》</title>
    <link href="http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/"/>
    <id>http://meiminjun.github.io/2016/08/03/ionic2学习笔记《二》/</id>
    <published>2016-08-03T15:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/">ionic2菜鸟学习笔记《一》</a></p>
<p><a href="http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/">ionic2菜鸟学习笔记《二》</a></p>
<h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p>在ionic2中相互跳转就要用到navigation,<br>下面我们在主页添加一个按钮，点击按钮跳转到一个新的页面，然后将一个页面中的数据传递到另外一个页面。</p>
<p>进入项目，并创建一个新的页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g page SecondPage</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6gxeqo0s3j20hp052gmb.jpg" alt=""></p>
<p>将 @import “../pages/second-page/second-page.scss”;添加到app/theme/app.core.scss</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6gylsrhlmj20ci04ut98.jpg" alt=""></p>
<p>接着，在我们的主页面(app/new-page/new-page.html)中添加一个按钮，并对这个按钮增加相应的点击事件处理函数openSecond()<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6gzb3mod8j20ds07ct9m.jpg" alt=""></p>
<p>在app/new-page/new-page.ts中添加这个跳转时间的方法内容。我们可以通过<br>this.nav.push()这个方法来跳转到新的页面，并且可以传递一些数据，如图：</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6gzfbqyoxj20l50k6tdz.jpg" alt=""></p>
<p>在app/pages/second-page/second-page.ts中，增加如下代码，用于获取从上个页面传递过来的数据<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6gzh6uds1j20ix0dyn05.jpg" alt=""></p>
<p>将传递过来的数据进行展示,app/second-page/second-page.html中：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6gzhn130gj207u05m0sy.jpg" alt=""></p>
<p>输入命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功显示：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6gzvxds6kg20db0flwgx.gif" alt=""></p>
<p>此外，我们在第二个页面添加一个返回按钮，返回到上一个页面，在app/pages/second-page/second-page.html添加代码：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6h01juoqrj20f406y0te.jpg" alt=""></p>
<p>我们在app/pages/second-page/second-page.ts中添加处理返回的代码：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6h048aw5sj20al07t0th.jpg" alt=""></p>
<p>输入命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>显示：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6h080yd17g20db0dn0ze.gif" alt=""></p>
<h1 id="input"><a href="#input" class="headerlink" title="input"></a>input</h1><p>进入之前的主页代码app/pages/new-page/new-page.html,并修改代码：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6i545xwt3j20ec0b2gnc.jpg" alt=""></p>
<p>输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic serve</div></pre></td></tr></table></figure></p>
<p>显示成功：<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6i4ylhb0lj207y0ccaal.jpg" alt=""></p>
<p>下面我们来点击”登陆按钮”获取提交表单时候输入数据：</p>
<p>第一种：通过[(ngModel)]来获取参数值，修改new-page.html的代码为如下形式<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6i5bch40aj20eh0aymz5.jpg" alt=""></p>
<p>在./app/pages/new-page/new-page.ts文件中打印获取的数据：<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6i5khtiy8j20l80h5q5j.jpg" alt=""></p>
<p>最后再次运行命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功：<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6i5lbw6moj20ii0dewhh.jpg" alt=""></p>
<h1 id="ng2权威资料"><a href="#ng2权威资料" class="headerlink" title="ng2权威资料"></a>ng2权威资料</h1><p>中文官方：<a href="https://angular.cn/docs/ts/latest/quickstart.html" target="_blank" rel="external">https://angular.cn/docs/ts/latest/quickstart.html</a></p>
<p>官方网站：<a href="http://a2.hubwiz.com/docs/ts/latest/" target="_blank" rel="external">http://a2.hubwiz.com/docs/ts/latest/</a></p>
<h1 id="ionic2权威资料"><a href="#ionic2权威资料" class="headerlink" title="ionic2权威资料"></a>ionic2权威资料</h1><p><a href="https://github.com/driftyco/ionic" target="_blank" rel="external">https://github.com/driftyco/ionic</a></p>
<p><a href="http://ionicframework.com/docs/v2/getting-started/tutorial/" target="_blank" rel="external">http://ionicframework.com/docs/v2/getting-started/tutorial/</a></p>
<h3 id="ionic2组件"><a href="#ionic2组件" class="headerlink" title="ionic2组件"></a>ionic2组件</h3><p><a href="http://ionicframework.com/docs/v2/components/#overview" target="_blank" rel="external">http://ionicframework.com/docs/v2/components/#overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/&quot;&gt;ionic2菜鸟学习笔记《一》&lt;/a
    
    </summary>
    
    
      <category term="ionic2" scheme="http://meiminjun.github.io/tags/ionic2/"/>
    
      <category term="angular2" scheme="http://meiminjun.github.io/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>ionic2菜鸟学习笔记《一》</title>
    <link href="http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/"/>
    <id>http://meiminjun.github.io/2016/08/01/ionic2学习笔记《一》/</id>
    <published>2016-08-01T07:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/">ionic2菜鸟学习笔记《一》</a></p>
<p><a href="http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/">ionic2菜鸟学习笔记《二》</a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>nodeV5版本以上(官方推荐)</li>
<li>cordova</li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">android 开发环境（jdk,android SDK,eclipse或者android studio）</a></li>
</ul>
<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><blockquote>
<p>npm install -g ionic@beta</p>
</blockquote>
<h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ionic <span class="keyword">start</span> MyFirstIonicApp <span class="comment">--v2  //注意，当从github下载的zip下载完成之后一直停留了很久，就停止（可能是国内被墙的缘故）</span></div><div class="line"></div><div class="line">并直接</div><div class="line">cd MyFirstIonicApp </div><div class="line"></div><div class="line">npm <span class="keyword">install</span> </div><div class="line"></div><div class="line">ionic serve</div></pre></td></tr></table></figure>
<h2 id="在设备中打开"><a href="#在设备中打开" class="headerlink" title="在设备中打开"></a>在设备中打开</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">npm install -g cordova</div><div class="line"></div><div class="line">ionic platform <span class="keyword">add</span><span class="bash"> ios</span></div><div class="line"></div><div class="line">ionic platform <span class="keyword">add</span><span class="bash"> android</span></div><div class="line"></div><div class="line">ionic <span class="keyword">run</span><span class="bash"> android</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="新建一个page"><a href="#新建一个page" class="headerlink" title="新建一个page"></a>新建一个page</h1><p>进入项目目录：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g page NewPage  <span class="comment">// 新建立一个页面</span></div></pre></td></tr></table></figure></p>
<p>会出现：</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f862gmtxj20av05hq3j.jpg" alt=""></p>
<p>控制台提示一句话：</p>
<p>Don’t forget to add an import for new-page.scss in app\themes\app.core.scss:</p>
<p>@import “..\pages\new-page\new-page.scss”;</p>
<p>在项目中找到:./app/theme/app.core.scss这个文件</p>
<p>在里面新增加一句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"../pages/new-page/new-page.scss"</span>;</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6f89ew5mbj20b20440ta.jpg" alt=""></p>
<p>现在，我们就新建了一个页面，在.pages/目录下面会看到new-page文件夹，这个就是新增的页面</p>
<p>我们找到new-page.html中写一些代码:</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f8i8omj1j208g07fglz.jpg" alt=""></p>
<p>找到./app/pages/new-page/new-page.ts文件，将类名NewPagePage改为”NewPage”;</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6i5w4qu2hj20fd0d7q5m.jpg" alt=""></p>
<p>找到./app/app.ts ，修改app.ts页面的入口文件</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6f8kvt5acj20eg09j767.jpg" alt=""></p>
<p>命令行输入：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功了！<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f8mj6wi2j20hn08waan.jpg" alt=""></p>
<p><strong>恭喜你成功跨入第一步，万事开头难！</strong></p>
<h1 id="新建自定义组件"><a href="#新建自定义组件" class="headerlink" title="新建自定义组件"></a>新建自定义组件</h1><p>ionic官网有很多组件</p>
<blockquote>
<p>地址：<a href="http://ionicframework.com/docs/v2/components/#overview" target="_blank" rel="external">http://ionicframework.com/docs/v2/components/#overview</a></p>
</blockquote>
<p>进入项目目录<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g component NewComponent  <span class="comment">// 新建立组件</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6f9a9jv32j20dj03kt8z.jpg" alt=""></p>
<p>目录中会新增一个components，其中会生成一个new-component的组件目录</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f9ou0tyij207h05j0t0.jpg" alt=""></p>
<p>编辑new-component里面的内容，找到../app/components/new-component/new-component.html, 修改其中的内容为：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6f9rwt6wnj209r0axwfc.jpg" alt=""></p>
<p>找到../app/components/new-component/new-component.ts, 修改其中的内容为：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6faetaj5pj20bj077wfi.jpg" alt=""></p>
<p>在你需要这个组件的页面中添加组件，这里以之前的new-page页面为例<br>找到./pages/new-page/new-page.ts,在其中添加：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6fag344v9j20el0bvjtz.jpg" alt=""></p>
<p>将组件插入到html中，找到./pages/new-page/new-page.html,添加：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6faj20um3j20bx0810ta.jpg" alt=""></p>
<p><strong>注意：看下./app.ts中是不是</strong><br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6famcp1knj20co098ta9.jpg" alt=""></p>
<p>启动项目：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure>
<p>大功告成：</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6fakrgsiej20b006odfv.jpg" alt=""></p>
<h1 id="生成pipe"><a href="#生成pipe" class="headerlink" title="生成pipe"></a>生成pipe</h1><p>pipe类似于一个过滤器，将渲染页面的数据进行过滤，例如：<br>后端传递给我门的数据时{value：”hello”},前端展示的时候要讲hello 转换为HELLO WORLD</p>
<p>下面是一个生成pipe的例子：</p>
<p>进入项目，新建一个pipe：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g pipe NewPipe</div></pre></td></tr></table></figure></p>
<p>之后会生成一个pipes文件目录，如图：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6fepp1dqgj205k04w74c.jpg" alt=""></p>
<p>打开pipes/NewPipes.ts,修改其中的transform方法</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6fetuwrufj20ba09vq4a.jpg" alt=""></p>
<p>在../app/pages/new-page/new-page.ts中引入这个pipe</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6feyqp9e9j20bb0ap40e.jpg" alt=""></p>
<p>在./pages/new-page/new-age.html中增加字符显示：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6ff3nnhq3j20ac0c9wfr.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6frhuup6pj20am07rq3p.jpg" alt=""></p>
<p>注意在./pipes/NewPipe中设置的NewPipe对应的new-page.html中对应的要一致<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6frm44yk7j206q08pjs2.jpg" alt=""></p>
<p>运行命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功显示：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6fs6yoyoqj208l08i3ym.jpg" alt=""></p>
<h1 id="号"><a href="#号" class="headerlink" title="*号"></a>*号</h1><p>在ionic2页面中会出现*，如：</p>
<h2 id="号的第一种情况-if语句-："><a href="#号的第一种情况-if语句-：" class="headerlink" title="*号的第一种情况(if语句)："></a>*号的第一种情况(if语句)：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">"someValue"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>表示的意思指：</p>
<blockquote>
<p>如果someValue的值为true,则显示</p><p></p>,否则不显示<p></p><p></p>
</blockquote>
<h2 id="号的第二种情况-for循环-："><a href="#号的第二种情况-for循环-：" class="headerlink" title="*号的第二种情况(for循环)："></a>*号的第二种情况(for循环)：</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngFor</span>=<span class="string">"let item of items"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.value&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>表示的意思指：</p>
<blockquote>
<p>获取一个列表items，并遍历其中的元素item，然后显示这个元素的value属性的值</p>
</blockquote>
<h2 id="号的第三种情况-switch语句"><a href="#号的第三种情况-switch语句" class="headerlink" title="*号的第三种情况(switch语句)"></a>*号的第三种情况(switch语句)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">"paragraphNumber"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">"1"</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">"2"</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">"3"</span>&gt;</span>Paragraph 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>表示的意思指：</p>
<p>paragraphNumber=1时，显示: Paragraph 1</p>
<p>paragraphNumber=2时，显示: Paragraph 2</p>
<p>依次类推</p>
<p>默认显示：Paragraph</p>
<h1 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h1><p>Provider是一种为App提供数据源请求的方式</p>
<p>举个栗子：</p>
<p>请求地址：<a href="https://www.reddit.com/r/gifs/top/.json?limit=10&amp;sort=hot" target="_blank" rel="external">https://www.reddit.com/r/gifs/top/.json?limit=10&amp;sort=hot</a> </p>
<p>获取Json格式的数据，并在程序启动的时候，在控制台打印获取的数据信息：</p>
<p>进入项目，新建一个provider：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g provider NewProvider</div></pre></td></tr></table></figure></p>
<p>在目录中会新增一个目录，如下：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6fswjsg79j206i05kdg1.jpg" alt=""></p>
<p>然后修改.providers/new-provider/new-provider.ts中的代码</p>
<p>默认接受的是json数据</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6ft1nrnabj20gi06swh7.jpg" alt=""></p>
<p>在需要的页面中调用，这里我们在之前的new-page.ts这个页面渲染时打印出来</p>
<p>修改代码：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6fti8h1ukj20i30gntc9.jpg" alt=""></p>
<p>启动项目：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功返回：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6ftgl1mgbj20em09sgmd.jpg" alt=""></p>
<p>最后截一下几个示例写完的整个目录方便大家对照：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6ftw2nocuj20560fat9j.jpg" alt=""></p>
<p>今天先写到这里。。2016-08-02-23-25</p>
<p>后续会有持续更新，敬请期待！</p>
<h1 id="ng2权威资料"><a href="#ng2权威资料" class="headerlink" title="ng2权威资料"></a>ng2权威资料</h1><p>中文官方：<a href="https://angular.cn/docs/ts/latest/quickstart.html" target="_blank" rel="external">https://angular.cn/docs/ts/latest/quickstart.html</a></p>
<p>官方网站：<a href="http://a2.hubwiz.com/docs/ts/latest/" target="_blank" rel="external">http://a2.hubwiz.com/docs/ts/latest/</a></p>
<h1 id="ionic2权威资料"><a href="#ionic2权威资料" class="headerlink" title="ionic2权威资料"></a>ionic2权威资料</h1><p><a href="https://github.com/driftyco/ionic" target="_blank" rel="external">https://github.com/driftyco/ionic</a></p>
<p><a href="http://ionicframework.com/docs/v2/getting-started/tutorial/" target="_blank" rel="external">http://ionicframework.com/docs/v2/getting-started/tutorial/</a></p>
<h3 id="ionic2组件"><a href="#ionic2组件" class="headerlink" title="ionic2组件"></a>ionic2组件</h3><p><a href="http://ionicframework.com/docs/v2/components/#overview" target="_blank" rel="external">http://ionicframework.com/docs/v2/components/#overview</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/&quot;&gt;ionic2菜鸟学习笔记《一》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/&quot;&gt;ionic2菜鸟学习笔记《二》&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nodeV5版本以上(官方推荐)&lt;/li&gt;
&lt;li&gt;cordova&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.androiddevtools.cn/&quot;&gt;android 开发环境（jdk,android SDK,eclipse或者android studio）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令&quot;&gt;&lt;/a&gt;安装命令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;npm install -g ionic@beta&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建一个项目&quot;&gt;&lt;a href=&quot;#创建一个项目&quot; class=&quot;headerlink&quot; title=&quot;创建一个项目&quot;&gt;&lt;/a&gt;创建一个项目&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ionic &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; MyFirstIonicApp &lt;span class=&quot;comment&quot;&gt;--v2  //注意，当从github下载的zip下载完成之后一直停留了很久，就停止（可能是国内被墙的缘故）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;并直接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd MyFirstIonicApp &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ionic serve&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;在设备中打开&quot;&gt;&lt;a href=&quot;#在设备中打开&quot; class=&quot;headerlink&quot; title=&quot;在设备中打开&quot;&gt;&lt;/a&gt;在设备中打开&lt;/h2&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g cordova&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ionic platform &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; ios&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ionic platform &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; android&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ionic &lt;span class=&quot;keyword&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; android&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ionic2" scheme="http://meiminjun.github.io/tags/ionic2/"/>
    
      <category term="angular2" scheme="http://meiminjun.github.io/tags/angular2/"/>
    
  </entry>
  
  <entry>
    <title>史上最强Sublime 笔记系列---vim常用命令笔记</title>
    <link href="http://meiminjun.github.io/2016/07/31/SublimeText-vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/"/>
    <id>http://meiminjun.github.io/2016/07/31/SublimeText-vim常用命令笔记/</id>
    <published>2016-07-31T03:30:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6cyydkhdjj20sd0hsabg.jpg" alt=""></p>
<p>这篇文章主要讲的Sublime Text 3 的<strong>vim</strong>命令说明，勤加练习之后，方可解放你的双手</p>
<a id="more"></a>
<ol>
<li><p><strong> <a href="/2016/06/24/SublimeText-常用快捷键/">史上最强Sublime 笔记系列—常用快捷键</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/23/SublimeText-常用插件和主题/">史上最强Sublime 笔记系列—精选插件和UI主题</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/22/SublimeText-我的常用配置/">史上最强Sublime 笔记系列—我的常用配置</a>(持续更新中。。。)  </strong></p>
</li>
</ol>
<h2 id="sulimeText-的vim模式"><a href="#sulimeText-的vim模式" class="headerlink" title="sulimeText 的vim模式"></a>sulimeText 的vim模式</h2><p>sublime 默认是禁用vim模式的</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"ignored_packages"</span>: [<span class="string">"Vintage"</span>]</div></pre></td></tr></table></figure>
<p>开启vim模式要配置成：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"ignored_packages"</span>: [<span class="string">""</span>]</div></pre></td></tr></table></figure>
<p>在用户配置中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"vintage_start_in_command_mode"</span>: <span class="literal">true</span> <span class="comment">//启动时，开启vim命令模式</span></div></pre></td></tr></table></figure>
<p>在用户快捷键中添加配置(进入vim模式)：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"keys"</span>: [<span class="string">"j"</span>, <span class="string">"j"</span>],</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"exit_insert_mode"</span>,</div><div class="line">    <span class="attr">"context"</span>:</div><div class="line">    [</div><div class="line">        &#123; <span class="attr">"key"</span>: <span class="string">"setting.command_mode"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span> &#125;,</div><div class="line">        &#123; <span class="attr">"key"</span>: <span class="string">"setting.is_widget"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="vim-sublime命令（必记）"><a href="#vim-sublime命令（必记）" class="headerlink" title="vim-sublime命令（必记）"></a>vim-sublime命令（必记）</h2><p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6kg9eegv9j20e703w74s.jpg" alt=""></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">// 启动命令</div><div class="line">jj → 进入命令行模式(必须配置好上面的操作)</div><div class="line">i → <span class="symbol">Insert</span> 模式</div><div class="line"></div><div class="line">//选取</div><div class="line">v 开启选取模式，关闭选取模式</div><div class="line"></div><div class="line"></div><div class="line">// 简单的移动光标</div><div class="line">w →移动光标到下一个单词的词首</div><div class="line">e →移动光标到下一个单词结尾</div><div class="line">b →移动光标到上一个单词的词首</div><div class="line">k 向上移动</div><div class="line">j 向下移动</div><div class="line">h 向左移动光标</div><div class="line">l 向右移动光标</div><div class="line"><span class="number">10</span>l 向右移动<span class="number">10</span>个字符（依此类推）</div><div class="line"><span class="number">0</span> → 数字零，到行头</div><div class="line">$ → 到本行行尾</div><div class="line">gg → 到顶部</div><div class="line"><span class="symbol">G</span>  → 到尾部</div><div class="line"><span class="symbol">H</span> →移动光标到屏幕的首行.</div><div class="line"><span class="symbol">M</span> →移动光标到屏幕的中间一行.</div><div class="line"><span class="symbol">L</span> → 移动光标到屏幕的尾行.</div><div class="line"></div><div class="line"></div><div class="line">n空格(n代表数字) → 光标向右移动n个字符</div><div class="line"></div><div class="line"><span class="symbol">H</span>/<span class="symbol">M</span>/<span class="symbol">L</span>:分别顶部、中间、和底部</div><div class="line"></div><div class="line">[相对于光标滚屏]</div><div class="line">”zt“、”zz“和”zb“:把光标所在行移动窗口的顶端、中间或底部</div><div class="line"></div><div class="line">// 各种插入 </div><div class="line">i → 在光标前输入</div><div class="line"><span class="symbol">I</span> → 在当前行首插入</div><div class="line">a → 在光标后插入</div><div class="line"><span class="symbol">A</span> → 在当前行尾插入</div><div class="line">o → 在当前行后插入一个新行</div><div class="line"><span class="symbol">O</span> → 在当前行前插入一个新行</div><div class="line">cw → 替换从光标所在位置后到一个单词结尾的字符</div><div class="line"></div><div class="line">// 删除</div><div class="line">x →删除当前光标所在的一个字符。</div><div class="line"><span class="symbol">X</span> →删除前一个字符</div><div class="line">nx(n代表数字) → 向后删除n个字符</div><div class="line">cc → 删除一行并进入插入模式。(更常用一些)</div><div class="line">dd → 删除当前行（还有剪切功能）</div><div class="line"><span class="symbol">D</span> → 删除当前字符到后面的所有字符(如果后面没有字符，则向前删除)</div><div class="line">ndd(n代表数字) → 删除n行</div><div class="line">d1G → 删除光标所在行到第一行的所有数据</div><div class="line">dG → 删除光标以后所有行数据</div><div class="line"></div><div class="line">// 拷贝、粘贴</div><div class="line"><span class="symbol">P</span> → 粘贴(p/<span class="symbol">P</span>都可以，p是表示在当前位置之后，<span class="symbol">P</span>表示在当前位置之前)</div><div class="line">yw  → 表示拷贝从当前光标到光标所在单词结尾的内容.</div><div class="line">dw  → 表示删除从当前光标到光标所在单词结尾的内容.</div><div class="line">y0  → 表示拷贝从当前光标到光标所在行首的内容.</div><div class="line">d0  → 表示删除从当前光标到光标所在行首的内容.</div><div class="line">y$  → 表示拷贝从当前光标到光标所在行尾的内容.</div><div class="line">d$/<span class="symbol">D</span>  → 表示删除从当前光标到光标所在行尾的内容.</div><div class="line">yfa → 表示拷贝从当前光标到光标后面的第一个a字符之间的内容.</div><div class="line">dfa → 表示删除从当前光标到光标后面的第一个a字符之间的内容.</div><div class="line">yy → 拷贝当前行当行</div><div class="line">dd → 表示删除光标所在行.</div><div class="line"></div><div class="line">yG →复制光标所在行到最后一行的所有数据</div><div class="line">yj →复制光标当前行和其下一行，共两行</div><div class="line">yk →复制光标当前行和其上一行，共两行</div><div class="line"><span class="symbol">J</span> →将光标所在行与下一行的数据结合成一行 </div><div class="line"><span class="number">3</span>p → 粘贴文本<span class="number">3</span>次</div><div class="line">. → 重复上一个命令—— <span class="number">100</span> “desu “.</div><div class="line"><span class="number">3.</span> → 重复 <span class="number">3</span> 次 “desu” (注意：不是 <span class="number">300</span>，你看，<span class="symbol">VIM</span>多聪明啊).</div><div class="line"></div><div class="line">//匹配括号移动</div><div class="line"><span class="comment">% → 匹配括号移动，包括 (, &#123;, [. （陈皓注：你需要把光标先移到括号上）</span></div><div class="line">* 和 # → 匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</div><div class="line">/word → 在光标之后查找word字符串  word的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个，按shift+n到上一个）</div><div class="line">?word → 在光标之前查找word字符串   </div><div class="line"></div><div class="line">// 回退</div><div class="line">u → 回退</div><div class="line"></div><div class="line">// 打开/保存/退出/改变文件</div><div class="line">:w → 存盘</div><div class="line"><span class="symbol">ZZ</span> → 快速保存退出</div></pre></td></tr></table></figure>
<h2 id="移动到指定字符"><a href="#移动到指定字符" class="headerlink" title="[ 移动到指定字符 ]"></a>[ 移动到指定字符 ]</h2><p>上面的命令都是行间移动(除h, l外)，也就是从当前行移动到另外一行。如果我们想在当前行内快速移动，可以使用f, t, F, T命令。</p>
<p>“f“命令移动到光标右边的指定字符上，例如，”fx“，会把移动到光标右边的第一个’x’字符上。”F“命令则反方向查找，也就是移动到光标左边的指定字符上。(<strong>这个更常用</strong>)</p>
<p>“t“命令和”f“命令的区别在于，它移动到光标右边的指定字符之前。例如，”tx“会移动到光标右边第一个’x’字符的前面。”T“命令是”t“命令的反向版本，它移动到光标右边的指定字符之后。</p>
<p>这四个命令只在当前行中移动光标，光标不会跨越回车换行符。</p>
<p>可以在命令前面使用数字，表示倍数。例如，”3fx“表示移动到光标右边的第3个’x’字符上。</p>
<p>“;“命令重复前一次输入的f, t, F, T命令，而”,“命令会反方向重复前一次输入的f, t, F, T命令。这两个命令前也可以使用数字来表示倍数。</p>
<p>更多请参考：<br><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">http://coolshell.cn/articles/5426.html</a><br><a href="http://feliving.github.io/Sublime-Text-3-Documentation/vintage.html" target="_blank" rel="external">http://feliving.github.io/Sublime-Text-3-Documentation/vintage.html</a><br><a href="http://easwy.com/blog/archives/advanced-vim-skills-basic-move-method/" target="_blank" rel="external">http://easwy.com/blog/archives/advanced-vim-skills-basic-move-method/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/69a9ed59gw1f6cyydkhdjj20sd0hsabg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这篇文章主要讲的Sublime Text 3 的&lt;strong&gt;vim&lt;/strong&gt;命令说明，勤加练习之后，方可解放你的双手&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://meiminjun.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://meiminjun.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="sublime" scheme="http://meiminjun.github.io/tags/sublime/"/>
    
      <category term="vim" scheme="http://meiminjun.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>浅谈javacript 笔记系列--- 继承与原型链</title>
    <link href="http://meiminjun.github.io/2016/07/26/javascript-%E4%B8%A4%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    <id>http://meiminjun.github.io/2016/07/26/javascript-两种继承方式/</id>
    <published>2016-07-26T10:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#使用_class_关键字" target="_blank" rel="external">继承与原型链</a></h1><p>对于那些熟悉基于类的面向对象语言（Java 或者 C++）的开发者来说，JavaScript 的语法是比较怪异的，这是由于 JavaScript 是一门动态语言，而且它没有类的概念（ ES6 新增了class 关键字，但只是语法糖，JavaScript 仍旧是基于原型）。</p>
<p>涉及到继承这一块，Javascript 只有一种结构，那就是：对象。在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p>
<p>虽然，原型继承经常被视作 JavaScript 的一个弱点，但事实上，原型继承模型比经典的继承模型更强大。尽管在原型模型上构建一个标准的类模型是相当琐碎的，但如果采取其他方式实现的话会更加困难。</p>
<a id="more"></a>
<h2 id="javascript-之-原型继承"><a href="#javascript-之-原型继承" class="headerlink" title="javascript 之 原型继承"></a>javascript 之 原型继承</h2><p>原型继承是让父对象作为子对象的原型，从而达到继承的目的：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  F.prototype = o;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 要继承的父对象</span></div><div class="line"><span class="built_in">var</span> <span class="built_in">parent</span> = &#123;</div><div class="line">  <span class="attribute">name</span>: <span class="string">"Papa"</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 新对象</span></div><div class="line"><span class="built_in">var</span> child = object(<span class="built_in">parent</span>);</div><div class="line"><span class="comment">// 测试</span></div><div class="line"><span class="built_in">console</span>.log(child.name); <span class="comment">// "Papa"</span></div><div class="line"></div><div class="line"><span class="comment">// 父构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// an "own" property</span></div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"Adam"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 给原型添加新属性</span></div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 创建新person</span></div><div class="line"><span class="built_in">var</span> papa = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="comment">// 继承</span></div><div class="line"><span class="built_in">var</span> kid = object(papa);</div><div class="line"><span class="built_in">console</span>.log(kid.getName()); <span class="comment">// "Adam"</span></div><div class="line"></div><div class="line"><span class="comment">// 父构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; </div><div class="line">   <span class="comment">// an "own" property  </span></div><div class="line">     <span class="keyword">this</span>.name = <span class="string">"Adam"</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 给原型添加新属性</span></div><div class="line"> Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;;</div><div class="line"> </div><div class="line"> <span class="comment">// 继承</span></div><div class="line"> <span class="built_in">var</span> kid = object(Person.prototype);</div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> kid.getName); <span class="comment">// "function",因为是在原型里定义的</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> kid.name);  <span class="comment">// "undefined", 因为只继承了原型</span></div></pre></td></tr></table></figure>
<p>同时，ECMAScript5也提供了类似的一个方法叫做Object.create用于继承对象，用法如下：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 使用新版的ECMAScript 5提供的功能 */</span></div><div class="line"><span class="built_in">var</span> child = <span class="built_in">Object</span>.create(<span class="built_in">parent</span>);</div><div class="line"><span class="built_in">var</span> child = <span class="built_in">Object</span>.create(<span class="built_in">parent</span>, &#123; </div><div class="line">   <span class="attribute">age</span>: &#123; <span class="attribute">value</span>: <span class="number">2</span>&#125; <span class="comment">// ECMA5 descriptor</span></div><div class="line">   &#125;);</div><div class="line"><span class="built_in">console</span>.log(child.hasOwnProperty(<span class="string">"age"</span>)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>而且，也可以更细粒度地在第二个参数上定义属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.varA = a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，</span></div><div class="line"><span class="comment">// 那么将 varA 加入到原型（prototype）中的目的是什么？</span></div><div class="line">A.prototype = &#123;</div><div class="line">  <span class="attr">varA</span> : <span class="literal">null</span>,  <span class="comment">// 既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉？</span></div><div class="line">      <span class="comment">// 也许作为一种在隐藏类中优化分配空间的考虑？</span></div><div class="line">      <span class="comment">// https://developers.google.com/speed/articles/optimizing-javascript#Initializing instance variables</span></div><div class="line">      <span class="comment">// 将会验证如果 varA 在每个实例不被特别初始化会是什么情况。</span></div><div class="line">  doSomething : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">11123</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  A.call(<span class="keyword">this</span>, a);</div><div class="line">  <span class="keyword">this</span>.varB = b;</div><div class="line">&#125;</div><div class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype, &#123;</div><div class="line">  <span class="attr">varB</span> : &#123;</div><div class="line">    <span class="attr">value</span>: <span class="literal">null</span>, </div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span> </div><div class="line">  &#125;,</div><div class="line">  <span class="attr">doSomething</span> : &#123; </div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// override</span></div><div class="line">      A.prototype.doSomething.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// call super</span></div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">B.prototype.constructor = B;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</div><div class="line">b.doSomething();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b);</div></pre></td></tr></table></figure>
<h2 id="javascript-之-类继承-构造函数继承-示例"><a href="#javascript-之-类继承-构造函数继承-示例" class="headerlink" title="javascript 之 类继承(构造函数继承)示例"></a>javascript 之 类继承(构造函数继承)示例</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"Shape moved."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">rect</span> = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Rectangle <span class="comment">//true.</span></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Shape <span class="comment">//true.</span></div><div class="line"></div><div class="line"><span class="built_in">rect</span>.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//Outputs, "Shape moved."</span></div></pre></td></tr></table></figure>
<p>深入理解继承：</p>
<p>参考：深入理解JavaScript系列（46）：代码复用模式（推荐篇）</p>
<ul>
<li><a href="http://www.ituring.com.cn/article/56184" target="_blank" rel="external">http://www.ituring.com.cn/article/56184</a></li>
</ul>
<p>阮一峰之面向对象：</p>
<ul>
<li><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank" rel="external">Javascript 面向对象编程（一）：封装</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">Javascript面向对象编程（二）：构造函数的继承</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="external">Javascript面向对象编程（三）：非构造函数的继承</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继承与原型链&quot;&gt;&lt;a href=&quot;#继承与原型链&quot; class=&quot;headerlink&quot; title=&quot;继承与原型链&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#使用_class_关键字&quot;&gt;继承与原型链&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;对于那些熟悉基于类的面向对象语言（Java 或者 C++）的开发者来说，JavaScript 的语法是比较怪异的，这是由于 JavaScript 是一门动态语言，而且它没有类的概念（ ES6 新增了class 关键字，但只是语法糖，JavaScript 仍旧是基于原型）。&lt;/p&gt;
&lt;p&gt;涉及到继承这一块，Javascript 只有一种结构，那就是：对象。在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。&lt;/p&gt;
&lt;p&gt;虽然，原型继承经常被视作 JavaScript 的一个弱点，但事实上，原型继承模型比经典的继承模型更强大。尽管在原型模型上构建一个标准的类模型是相当琐碎的，但如果采取其他方式实现的话会更加困难。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://meiminjun.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈javacript 笔记系列--- object-assign方法</title>
    <link href="http://meiminjun.github.io/2016/07/26/javascript-object-assign%E6%96%B9%E6%B3%95/"/>
    <id>http://meiminjun.github.io/2016/07/26/javascript-object-assign方法/</id>
    <published>2016-07-26T01:57:14.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-之-object-assign-的方法介绍和示例"><a href="#javascript-之-object-assign-的方法介绍和示例" class="headerlink" title="javascript 之 object-assign 的方法介绍和示例"></a>javascript 之 object-assign 的方法介绍和示例</h1><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign()</a></h2><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>Object.assign(target, …sources)</p>
</blockquote>
<p>target：目标对象。</p>
<p>sources：任意多个对象</p>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>目标对象会被返回。</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象身上。该方法使用源对象的 [ [ Get ] ] 和目标对象的 [ [ Set ] ]，所以它会调用相关 getter 和 setter。因此，它分配属性不仅仅是复制或定义新的属性。如果合并源包含了 getter，那么该方法就不适合将新属性合并到原型里。假如是拷贝属性定义到原型里，包括它们的可枚举性，那么应该使用 Object.getOwnPropertyDescriptor() 和 Object.defineProperty() 。</p>
<p>String类型和 Symbol 类型的属性都会被拷贝。</p>
<p>注意，在属性拷贝过程中可能会产生异常，比如目标对象的某个只读属性和源对象的某个属性同名，这时该方法会抛出一个 TypeError 异常，拷贝过程中断，已经拷贝成功的属性不会受到影响，还未拷贝的属性将不会再被拷贝。</p>
<blockquote>
<p>注意， Object.assign 会跳过那些值为 null 或 undefined 的源对象。</p>
</blockquote>
<a id="more"></a>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>复制一个object</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="comment">&#123; a: 1 &#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="keyword">copy</span> = Object.assign(<span class="comment">&#123;&#125;</span>, obj);</div><div class="line">console.log(<span class="keyword">copy</span>); <span class="comment">// &#123; a: 1 &#125;</span></div></pre></td></tr></table></figure>
<p>合并 objects</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);</div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></div></pre></td></tr></table></figure>
<p>继承属性和不可枚举属性是不能拷贝的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;, &#123; <span class="comment">// foo 是个继承属性。</span></div><div class="line">    bar: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">2</span>  <span class="comment">// bar 是个不可枚举属性。</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">baz</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">3</span>,</div><div class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>  <span class="comment">// baz 是个自身可枚举属性。</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</div><div class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; baz: 3 &#125;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-之-object-assign-的方法介绍和示例&quot;&gt;&lt;a href=&quot;#javascript-之-object-assign-的方法介绍和示例&quot; class=&quot;headerlink&quot; title=&quot;javascript 之 object-assign 的方法介绍和示例&quot;&gt;&lt;/a&gt;javascript 之 object-assign 的方法介绍和示例&lt;/h1&gt;&lt;h2 id=&quot;Object-assign&quot;&gt;&lt;a href=&quot;#Object-assign&quot; class=&quot;headerlink&quot; title=&quot;Object.assign()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign()&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Object.assign(target, …sources)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;target：目标对象。&lt;/p&gt;
&lt;p&gt;sources：任意多个对象&lt;/p&gt;
&lt;h3 id=&quot;返回值&quot;&gt;&lt;a href=&quot;#返回值&quot; class=&quot;headerlink&quot; title=&quot;返回值&quot;&gt;&lt;/a&gt;返回值&lt;/h3&gt;&lt;p&gt;目标对象会被返回。&lt;/p&gt;
&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象身上。该方法使用源对象的 [ [ Get ] ] 和目标对象的 [ [ Set ] ]，所以它会调用相关 getter 和 setter。因此，它分配属性不仅仅是复制或定义新的属性。如果合并源包含了 getter，那么该方法就不适合将新属性合并到原型里。假如是拷贝属性定义到原型里，包括它们的可枚举性，那么应该使用 Object.getOwnPropertyDescriptor() 和 Object.defineProperty() 。&lt;/p&gt;
&lt;p&gt;String类型和 Symbol 类型的属性都会被拷贝。&lt;/p&gt;
&lt;p&gt;注意，在属性拷贝过程中可能会产生异常，比如目标对象的某个只读属性和源对象的某个属性同名，这时该方法会抛出一个 TypeError 异常，拷贝过程中断，已经拷贝成功的属性不会受到影响，还未拷贝的属性将不会再被拷贝。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意， Object.assign 会跳过那些值为 null 或 undefined 的源对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://meiminjun.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
      <category term="es-2015" scheme="http://meiminjun.github.io/tags/es-2015/"/>
    
  </entry>
  
  <entry>
    <title>浅谈javacript 笔记系列--- object-create方法</title>
    <link href="http://meiminjun.github.io/2016/07/26/javascript-object-create%E6%96%B9%E6%B3%95/"/>
    <id>http://meiminjun.github.io/2016/07/26/javascript-object-create方法/</id>
    <published>2016-07-26T00:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-之-object-create的方法介绍和示例"><a href="#javascript-之-object-create的方法介绍和示例" class="headerlink" title="javascript 之 object-create的方法介绍和示例"></a>javascript 之 object-create的方法介绍和示例</h1><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">Object.create()</a></h2><p>Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>Object.create(proto, [ propertiesObject ])</p>
</blockquote>
<p>proto：一个对象，作为新创建对象的原型。。</p>
<p>propertiesObject：可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>如果 proto 参数不是 null 或一个对象值，则抛出一个 TypeError 异常。</p>
<a id="more"></a>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>使用Object.create实现类式继承</li>
</ul>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"Shape moved."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">rect</span> = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Rectangle <span class="comment">//true.</span></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Shape <span class="comment">//true.</span></div><div class="line"></div><div class="line"><span class="built_in">rect</span>.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//Outputs, "Shape moved."</span></div></pre></td></tr></table></figure>
<ul>
<li>使用Object.create 的 propertyObject 参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o;</div><div class="line"></div><div class="line"><span class="comment">// 创建一个原型为null的空对象</span></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line"></div><div class="line"></div><div class="line">o = &#123;&#125;;</div><div class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</div><div class="line"></div><div class="line"></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</div><div class="line">  <span class="comment">// foo会成为所创建对象的数据属性</span></div><div class="line">  foo: &#123; <span class="attr">writable</span>:<span class="literal">true</span>, <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="attr">value</span>: <span class="string">"hello"</span> &#125;,</div><div class="line">  <span class="comment">// bar会成为所创建对象的访问器属性</span></div><div class="line">  bar: &#123;</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"Setting `o.bar` to"</span>, value) &#125;</div><div class="line">&#125;&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">o = <span class="keyword">new</span> Constructor();</div><div class="line"><span class="comment">// 上面的一句就相当于:</span></div><div class="line">o = <span class="built_in">Object</span>.create(Constructor.prototype);</div><div class="line"><span class="comment">// 当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></div><div class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></div><div class="line">o.p = <span class="number">24</span></div><div class="line">o.p</div><div class="line"><span class="comment">//42</span></div><div class="line"></div><div class="line">o.q = <span class="number">12</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</div><div class="line">   <span class="built_in">console</span>.log(prop)</div><div class="line">&#125;</div><div class="line"><span class="comment">//"q"</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> o.p</div><div class="line"><span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="comment">//创建一个可写的,可枚举的,可配置的属性p</span></div><div class="line">o2 = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125; &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript-之-object-create的方法介绍和示例&quot;&gt;&lt;a href=&quot;#javascript-之-object-create的方法介绍和示例&quot; class=&quot;headerlink&quot; title=&quot;javascript 之 object-create的方法介绍和示例&quot;&gt;&lt;/a&gt;javascript 之 object-create的方法介绍和示例&lt;/h1&gt;&lt;h2 id=&quot;Object-create&quot;&gt;&lt;a href=&quot;#Object-create&quot; class=&quot;headerlink&quot; title=&quot;Object.create()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;Object.create()&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。&lt;/p&gt;
&lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Object.create(proto, [ propertiesObject ])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;proto：一个对象，作为新创建对象的原型。。&lt;/p&gt;
&lt;p&gt;propertiesObject：可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。&lt;/p&gt;
&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;如果 proto 参数不是 null 或一个对象值，则抛出一个 TypeError 异常。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://meiminjun.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://meiminjun.github.io/tags/javascript/"/>
    
      <category term="es-2015" scheme="http://meiminjun.github.io/tags/es-2015/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令清单</title>
    <link href="http://meiminjun.github.io/2016/07/24/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>http://meiminjun.github.io/2016/07/24/常用git命令清单/</id>
    <published>2016-07-24T13:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="http://image.beekka.com/blog/2014/bg2014061202.jpg" alt=""></p>
<ul>
<li>git clone：<br><strong>远程操作的第一步，通常是从远程主机克隆一个版本库</strong></li>
<li>git remote：<br><strong>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</strong></li>
<li>git fetch：<br><strong>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</strong></li>
<li>git pull：<br><strong>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。</strong></li>
<li>git push：<br><strong>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</strong></li>
</ul>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<a id="more"></a>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></div><div class="line">git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></div><div class="line">git init [project-name]</div><div class="line"></div><div class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></div><div class="line">git <span class="keyword">clone</span> <span class="title">[url</span>]</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的Git配置</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span><span class="built_in">--list</span></div><div class="line"></div><div class="line"><span class="comment"># 编辑Git配置文件</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span>-e [<span class="built_in">--global]</span></div><div class="line"></div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span>[<span class="built_in">--global]</span> <span class="string">user.</span><span class="string">name </span><span class="string">"[name]"</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span>[<span class="built_in">--global]</span> <span class="string">user.</span><span class="string">email </span><span class="string">"[email address]"</span></div></pre></td></tr></table></figure>
<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> [file1] [file2] ...</span></div><div class="line"></div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> [dir]</span></div><div class="line"></div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line"></div><div class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></div><div class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> -p</span></div><div class="line"></div><div class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 提交暂存区到仓库区</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="meta"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="meta"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"><span class="meta"># 提交时显示所有diff信息</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="meta"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="meta"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="meta"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有本地分支</span></div><div class="line"><span class="variable">$ </span>git branch</div><div class="line"></div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line"><span class="variable">$ </span>git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line"><span class="variable">$ </span>git branch -a</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></div><div class="line"><span class="variable">$ </span>git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></div><div class="line"><span class="variable">$ </span>git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向指定commit</span></div><div class="line"><span class="variable">$ </span>git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line"><span class="variable">$ </span>git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line"><span class="variable">$ </span>git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line"><span class="variable">$ </span>git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line"><span class="variable">$ </span>git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line"><span class="variable">$ </span>git merge [branch]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line"><span class="variable">$ </span>git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line"><span class="variable">$ </span>git branch -d [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line"><span class="variable">$ </span>git push origin --delete [branch-name]</div><div class="line"><span class="variable">$ </span>git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git <span class="keyword">tag</span></div><div class="line"></div><div class="line"><span class="title"># 新建一个tag</span>在当前commit</div><div class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程tag</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 提交指定tag</span></div><div class="line">$ git push [remote] [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 提交所有tag</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向某个tag</span></div><div class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</div></pre></td></tr></table></figure>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> <span class="comment">--stat</span></div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD <span class="comment">--pretty=format:%s</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD <span class="comment">--grep feature</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> <span class="comment">--follow [file]</span></div><div class="line">$ git whatchanged [<span class="built_in">file</span>]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [<span class="built_in">file</span>]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> <span class="number">-5</span> <span class="comment">--pretty --oneline</span></div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [<span class="built_in">file</span>]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff <span class="comment">--cached [file]</span></div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [<span class="keyword">first</span>-branch]...[<span class="keyword">second</span>-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff <span class="comment">--shortstat "@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show <span class="comment">--name-only [commit]</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 下载远程仓库的所有变动</span></div><div class="line"><span class="variable">$ </span>git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程仓库</span></div><div class="line"><span class="variable">$ </span>git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程仓库的信息</span></div><div class="line"><span class="variable">$ </span>git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line"><span class="variable">$ </span>git remote add [shortname] [url]</div><div class="line"></div><div class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line"><span class="variable">$ </span>git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line"><span class="variable">$ </span>git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line"><span class="variable">$ </span>git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line"><span class="variable">$ </span>git push [remote] --all</div></pre></td></tr></table></figure>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></div><div class="line"><span class="variable">$ </span>git checkout [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line"><span class="variable">$ </span>git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line"><span class="variable">$ </span>git checkout .</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line"><span class="variable">$ </span>git reset [file]</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line"><span class="variable">$ </span>git reset --hard</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line"><span class="variable">$ </span>git reset [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line"><span class="variable">$ </span>git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line"><span class="variable">$ </span>git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line"><span class="variable">$ </span>git revert [commit]</div><div class="line"></div><div class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></div><div class="line"><span class="variable">$ </span>git stash</div><div class="line"><span class="variable">$ </span>git stash pop</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line"><span class="variable">$ </span>git archive</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.beekka.com/blog/2014/bg2014061202.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git clone：&lt;br&gt;&lt;strong&gt;远程操作的第一步，通常是从远程主机克隆一个版本库&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;git remote：&lt;br&gt;&lt;strong&gt;为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;git fetch：&lt;br&gt;&lt;strong&gt;一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;git pull：&lt;br&gt;&lt;strong&gt;git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;git push：&lt;br&gt;&lt;strong&gt;git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Workspace：工作区&lt;/li&gt;
&lt;li&gt;Index / Stage：暂存区&lt;/li&gt;
&lt;li&gt;Repository：仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote：远程仓库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="tool" scheme="http://meiminjun.github.io/categories/tool/"/>
    
    
      <category term="git" scheme="http://meiminjun.github.io/tags/git/"/>
    
      <category term="github" scheme="http://meiminjun.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>npm 模块管理器</title>
    <link href="http://meiminjun.github.io/2016/07/13/npm%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://meiminjun.github.io/2016/07/13/npm命令行/</id>
    <published>2016-07-13T03:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-模块管理器"><a href="#npm-模块管理器" class="headerlink" title="npm 模块管理器"></a>npm 模块管理器</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p>
<ul>
<li><p>npm命令列表：npm help</p>
</li>
<li><p>查看各个命令的简单用法：npm l</p>
</li>
</ul>
<a id="more"></a>
<h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><p>npm init用来初始化生成一个新的package.json文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。</p>
<p>如果使用了-f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的package.json文件。</p>
<h2 id="npm-set"><a href="#npm-set" class="headerlink" title="npm set"></a>npm set</h2><p>npm set用来设置环境变量。</p>
<blockquote>
<p> npm set init-author-name ‘Your name’<br> npm set init-author-email ‘Your email’<br> npm set init-author-url ‘<a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a>‘<br> npm set init-license ‘MIT’</p>
</blockquote>
<p>上面命令等于为npm init设置了默认值，以后执行npm init的时候，package.json的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行npm config。</p>
<p>$ npm set save-exact true<br>上面命令设置加入模块时，package.json将记录模块的确切版本，而不是一个可选的版本范围。</p>
<h2 id="npm-info"><a href="#npm-info" class="headerlink" title="npm info"></a>npm info</h2><p>npm info命令可以查看每个模块的具体信息。比如，查看underscore模块的信息。</p>
<ul>
<li>全局更新：npm update -g gulp</li>
</ul>
<blockquote>
<p>npm info underscore</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">name</span>: <span class="string">'underscore'</span>,</div><div class="line">  <span class="attribute">description</span>: <span class="string">'JavaScript\'</span>s functional programming helper library.',</div><div class="line">  <span class="string">'dist-tags'</span>: &#123; <span class="attribute">latest</span>: <span class="string">'1.5.2'</span>, <span class="attribute">stable</span>: <span class="string">'1.5.2'</span> &#125;,</div><div class="line">  <span class="attribute">repository</span>:</div><div class="line">   &#123; <span class="attribute">type</span>: <span class="string">'git'</span>,</div><div class="line">     <span class="attribute">url</span>: <span class="string">'git://github.com/jashkenas/underscore.git'</span> &#125;,</div><div class="line">  <span class="attribute">homepage</span>: <span class="string">'http://underscorejs.org'</span>,</div><div class="line">  <span class="attribute">main</span>: <span class="string">'underscore.js'</span>,</div><div class="line">  <span class="attribute">version</span>: <span class="string">'1.5.2'</span>,</div><div class="line">  <span class="attribute">devDependencies</span>: &#123; <span class="attribute">phantomjs</span>: <span class="string">'1.9.0-1'</span> &#125;,</div><div class="line">  <span class="attribute">licenses</span>:</div><div class="line">   &#123; <span class="attribute">type</span>: <span class="string">'MIT'</span>,</div><div class="line">     <span class="attribute">url</span>: <span class="string">'https://raw.github.com/jashkenas/underscore/master/LICENSE'</span> &#125;,</div><div class="line">  <span class="attribute">files</span>:</div><div class="line">   [ <span class="string">'underscore.js'</span>,</div><div class="line">     <span class="string">'underscore-min.js'</span>,</div><div class="line">     <span class="string">'LICENSE'</span> ],</div><div class="line">  <span class="attribute">readmeFilename</span>: <span class="string">'README.md'</span>&#125;</div></pre></td></tr></table></figure>
<p>上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">info</span> underscore description</div><div class="line">JavaScript's functional programming helper library.</div><div class="line"></div><div class="line">$ npm <span class="built_in">info</span> underscore homepage</div><div class="line">ht<span class="symbol">tp:</span>//underscorejs.org</div><div class="line"></div><div class="line">$ npm <span class="built_in">info</span> underscore version</div><div class="line"><span class="number">1.5</span>.<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h2><p>npm search命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p>
<p>$ npm search &lt;搜索词&gt;&lt;/搜索词&gt;</p>
<p>下面是一个例子。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm search <span class="keyword">node</span><span class="title">-gyp</span></div><div class="line">// NAME                  DESCRIPTION</div><div class="line">// autogypi              Autogypi handles dependencies for <span class="keyword">node</span><span class="title">-gyp</span> projects.</div><div class="line">// grunt-<span class="keyword">node</span><span class="title">-gyp</span>        Run <span class="keyword">node</span><span class="title">-gyp</span> commands from Grunt.</div><div class="line">// gyp-io                Temporary solution to let <span class="keyword">node</span><span class="title">-gyp</span> run `rebuild` under…</div><div class="line">// ...</div></pre></td></tr></table></figure></p>
<h2 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h2><p>npm list命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p>
<blockquote>
<p>npm list</p>
</blockquote>
<p>加上global参数，会列出全局安装的模块。</p>
<blockquote>
<p>npm list -global</p>
</blockquote>
<h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Node模块采用npm install命令安装。</p>
<p>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如npm和grunt。“本地安装”指的是将一个模块下载到当前项目的node_modules子目录，然后只有在项目目录之中，才能调用这个模块。</p>
<p>本地安装</p>
<blockquote>
<p>npm install <package></package></p>
</blockquote>
<p>全局安装</p>
<blockquote>
<p>npm install -global <package><br>npm install -g <package></package></package></p>
</blockquote>
<p><strong>npm install也支持直接输入Github代码库地址。</strong></p>
<blockquote>
<p>npm install git://github.com/package/path.git<br>npm install git://github.com/package/path.git#0.1.0</p>
</blockquote>
<p>安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>
<p>如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用-f或–force参数。</p>
<blockquote>
<p>npm install <packagename> –force</packagename></p>
</blockquote>
<p>如果你希望，所有模块都要强制重新安装，那就删除node_modules目录，重新执行npm install。</p>
<blockquote>
<p>rm -rf node_modules<br>npm install</p>
</blockquote>
<h3 id="安装不同版本"><a href="#安装不同版本" class="headerlink" title="安装不同版本"></a>安装不同版本</h3><p>install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。</p>
<blockquote>
<p>npm install sax@latest<br>npm install sax@0.1.1<br>npm install sax@”&gt;=0.1.0 </p>
</blockquote>
<p>如果使用–save-exact参数，会在package.json文件指定安装模块的确切版本。</p>
<blockquote>
<p>npm install readable-stream –save –save-exact</p>
</blockquote>
<p>install命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中。</p>
<ul>
<li>–save：模块名将被添加到dependencies，可以简化为参数-S。</li>
<li>–save-dev: 模块名将被添加到devDependencies，可以简化为参数-D。</li>
</ul>
<blockquote>
<p>npm install sax –save<br>npm install node-tap –save-dev</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>npm install sax -S<br>npm install node-tap -D</p>
</blockquote>
<p>如果要安装beta版本的模块，需要使用下面的命令。</p>
<p>安装最新的beta版</p>
<blockquote>
<p>npm install <module-name>@beta (latest beta)</module-name></p>
</blockquote>
<p>安装指定的beta版</p>
<blockquote>
<p>npm install <module-name>@1.3.1-beta.3</module-name></p>
</blockquote>
<p>npm install默认会安装dependencies字段和devDependencies字段中的所有模块，如果使用production参数，可以只安装dependencies字段的模块。</p>
<blockquote>
<p>npm install –production</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>NODE_ENV=production npm install</p>
</blockquote>
<p>一旦安装了某个模块，就可以在代码中用require命令调用这个模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;npm-模块管理器&quot;&gt;&lt;a href=&quot;#npm-模块管理器&quot; class=&quot;headerlink&quot; title=&quot;npm 模块管理器&quot;&gt;&lt;/a&gt;npm 模块管理器&lt;/h1&gt;&lt;p&gt;NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许用户从NPM服务器下载别人编写的第三方包到本地使用。&lt;/li&gt;
&lt;li&gt;允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。&lt;/li&gt;
&lt;li&gt;允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm命令列表：npm help&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看各个命令的简单用法：npm l&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="tool" scheme="http://meiminjun.github.io/categories/tool/"/>
    
    
      <category term="npm" scheme="http://meiminjun.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Chrome常用设置</title>
    <link href="http://meiminjun.github.io/2016/07/09/chrome%E5%BC%80%E5%8F%91/"/>
    <id>http://meiminjun.github.io/2016/07/09/chrome开发/</id>
    <published>2016-07-09T13:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本地导入书签-避免那种傻瓜式导入会另建立一个文件夹"><a href="#本地导入书签-避免那种傻瓜式导入会另建立一个文件夹" class="headerlink" title="本地导入书签(避免那种傻瓜式导入会另建立一个文件夹)"></a>本地导入书签(避免那种傻瓜式导入会另建立一个文件夹)</h2><p>当更新到最新版本的chrome时候，经常要导入以前版本的chrome书签</p>
<p>以下是本地bookmark地址，直接替换到你新的chrome对应的安装包位置就可以生效</p>
<p>xp/2003:<br>C:\Documents and Settings\Administrator\Local Settings\Application Data\Google\Chrome\User Data\Default\Bookmarks</p>
<p>win7:<br>C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\Bookmarks</p>
<h2 id="跨域设置"><a href="#跨域设置" class="headerlink" title="跨域设置"></a>跨域设置</h2><p>老版本：</p>
<p>–disable-web-security</p>
<p>chrome49版本以后需加入：</p>
<p>–disable-web-security –user-data-dir</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本地导入书签-避免那种傻瓜式导入会另建立一个文件夹&quot;&gt;&lt;a href=&quot;#本地导入书签-避免那种傻瓜式导入会另建立一个文件夹&quot; class=&quot;headerlink&quot; title=&quot;本地导入书签(避免那种傻瓜式导入会另建立一个文件夹)&quot;&gt;&lt;/a&gt;本地导入书签(避免那
    
    </summary>
    
      <category term="chrome" scheme="http://meiminjun.github.io/categories/chrome/"/>
    
    
      <category term="chrome" scheme="http://meiminjun.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>windows常用快捷键</title>
    <link href="http://meiminjun.github.io/2016/07/09/window%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://meiminjun.github.io/2016/07/09/window快捷键/</id>
    <published>2016-07-09T13:57:13.000Z</published>
    <updated>2016-12-19T03:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows-常用快捷键"><a href="#windows-常用快捷键" class="headerlink" title="windows 常用快捷键"></a>windows 常用快捷键</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>删除： ctrl +　d<br>新建文件夹： ctrl + shift + d<br>返回上层目录： backspace</p>
<h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><p>锁屏： win + l<br>运行界面： win + r<br>快速打开文件系统： win + e<br>Win + D：显示桌面。<br>Win + space：显示桌面<br>Win + M：最小化所有窗口。<br>Win + SHIFT + M：还原最小化窗口到桌面上。<br>Win + E：打开我的电脑<br>Win + F：搜索文件或文件夹。</p>
<h2 id="Windows-Explorer相关快捷键"><a href="#Windows-Explorer相关快捷键" class="headerlink" title="Windows Explorer相关快捷键"></a>Windows Explorer相关快捷键</h2><p>Alt+D 选中地址栏（搭配Clover 的ctrl+t 新建标签  非常不错）<br>Ctrl+E 选中搜索框（定位到搜索框）<br>Ctrl+N 打开新窗口<br>Ctrl+Shift+N 新建文件夹</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows-常用快捷键&quot;&gt;&lt;a href=&quot;#windows-常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;windows 常用快捷键&quot;&gt;&lt;/a&gt;windows 常用快捷键&lt;/h1&gt;&lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot;
    
    </summary>
    
      <category term="tool" scheme="http://meiminjun.github.io/categories/tool/"/>
    
    
      <category term="快捷键" scheme="http://meiminjun.github.io/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="windows" scheme="http://meiminjun.github.io/tags/windows/"/>
    
  </entry>
  
</feed>
