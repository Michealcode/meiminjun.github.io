<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[前端自动化工程搭建]]></title>
      <url>http://meiminjun.github.io/2017/01/01/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>安装条件：</p>
<ol>
<li>首先要安装 Java 7 或更高</li>
<li>Node.JS , 而且要确保 npm 命令可用，我想应该其实不用提醒的 ~</li>
</ol>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>找一个目录，起名字为“AutoTest”,然后输入命令<code>npm init -y</code>生成项目文件<code>package.json</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  AutoTest <span class="string">git:</span>(master) npm init -y</div><div class="line">Wrote to <span class="regexp">/Users/</span>apple<span class="regexp">/Documents/</span>github<span class="regexp">/AutoTest/</span><span class="keyword">package</span>.<span class="string">json:</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"AutoTest"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [],</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>然后我们将安装 Selenium 与 Nightwatch。</p>
<ul>
<li>安装 selenium-standalone：<ul>
<li><code>npm install selenium-standalone --save-dev</code></li>
</ul>
</li>
<li>安装 Nightwatch:<ul>
<li><code>npm install nightwatch --save-dev</code> </li>
</ul>
</li>
</ul>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>我们先开始配置 Nightwatch，之前提到这是一款 Test Runner 来着，它负责读取我们的测试脚本，为我们提供 API 来操作浏览器，帮我们控制 Selenium。</p>
<p><strong>一. 配置 Nightwatch</strong></p>
<ol>
<li>首先，在项目根目录建立文件 “nightwatch.json”，这个文件用来存放 Nightwatch 的配置信息。创建完毕之后，在文件内写入以下内容：</li>
</ol>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"src_folders"</span>: [<span class="string">"tests"</span>],</div><div class="line">     <span class="attr">"output_folder"</span>: <span class="string">"reports"</span>,</div><div class="line">     <span class="attr">"custom_commands_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"custom_assertions_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"page_objects_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"globals_path"</span>: <span class="string">""</span>,</div><div class="line"></div><div class="line">     <span class="attr">"selenium"</span>: &#123;</div><div class="line">       <span class="attr">"start_process"</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">"server_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"log_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">       <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">       <span class="attr">"cli_args"</span>: &#123;</div><div class="line">         <span class="attr">"webdriver.chrome.driver"</span>: <span class="string">""</span></div><div class="line">       &#125;</div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     <span class="attr">"test_settings"</span>: &#123;</div><div class="line">       <span class="attr">"default"</span>: &#123;</div><div class="line">         <span class="attr">"launch_url"</span>: <span class="string">"http://localhost"</span>,</div><div class="line">         <span class="attr">"selenium_port"</span>: <span class="number">4444</span>,</div><div class="line">         <span class="attr">"selenium_host"</span>: <span class="string">"localhost"</span>,</div><div class="line">         <span class="attr">"silent"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"screenshots"</span>: &#123;</div><div class="line">           <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">           <span class="attr">"path"</span>: <span class="string">""</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"firefox"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">"chrome"</span> : &#123;</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nightwatch.json 的文件名是 不可以 修改的，因为 Nightwatch 每次启动的时候都是从它读取配置喔！这里的配置项很多，不过先不管它，我们接着创建文件。如果您希望查看 Nightwatch 的详细配置，请点 <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">这里</a>。</p>
<ol>
<li>接着在项目根目录下创建文件 “nightwatch.conf.js” ，同样此文件名也是不可以修改的，因为 Nightwatch 每次启动也会从它这里读取配置喔~ (´･_･`)</li>
</ol>
<p>创建完毕后，打开文件，并写入如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> settings;</div><div class="line">&#125;)(<span class="built_in">require</span>(<span class="string">'./nightwatch.json'</span>))</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *  Nightwatch 会从 nightwatch.json 中读取配置。</div><div class="line"> *  不过如果存在 nightwatch.conf.js，将会变为首先从后者中读取配置。</div><div class="line"> *  nightwatch.conf.js 存在的意义是使用 JavaScript 动态生成配置信息。</div><div class="line"> *  如果配置信息是不需要代码修改的，直接使用 nightwatch.json 就可以啦。</div><div class="line"> */</div></pre></td></tr></table></figure>
<ol>
<li>再次在项目根目录建立文件 “startup.js”，然后在文件内部写入：</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">require</span><span class="params">(<span class="string">'nightwatch/bin/runner.js'</span>)</span></span></div></pre></td></tr></table></figure>
<p>这个文件就是我们测试的入口文件，以后我们要执行测试就要运行这个文件，命令为 node ./startup。入口文件的名字是可以按照喜好更改的，只要运行它就好啦。不过每次输入 node ./startup 太麻烦了，所以我们将这条命令写入 npm scripts 中 ~~~ 打开 “package.json”，在 JSON 对象中建立 “script” 属性，并写入内容：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以后每次运行测试只要在项目根目录中执行 npm start 就好了！(･∀･)<br>Nightwatch 的配置暂时告一段落（其实马上就会回来………），接下来我们来处理 Selenium.</p>
<p><strong>二. 配置 Selenium</strong></p>
<p>Selenium 是自动化测试环境，它提供了测试服务器、启动浏览器、网页自动操作等功能，同时暴露 API 给 Nightwatch 供我们使用。</p>
<p>我们接下来将要告诉 Nightwatch 我们的 Selenium 安装在哪里，启动浏览器的 Driver 程序在哪里，然后建立 Selenium 的安装脚本与手工启动脚本，以便不时之需 ~~</p>
<blockquote>
<p>Driver 是让 Selenium 打开系统上已安装的浏览器的程序。</p>
</blockquote>
<ol>
<li>建立 Selenium 的配置信息</li>
</ol>
<p>在项目根目录下建立文件夹 “build”，并在其中创建文件 “selenium-conf.js”，并写入如下信息：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const process = require('process')</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    // <span class="attribute">Selenium 的版本配置信息。请在下方链接查询最新版本。升级版本只需修改版本号即可。</span></div><div class="line">    // https://selenium-release<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>/index<span class="variable">.html</span></div><div class="line">    selenium: &#123;</div><div class="line">        version: '2.53.1',</div><div class="line">        baseURL: 'https://selenium-release<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>'</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // Driver 用来启动系统中安装的浏览器，Selenium 默认使用 Firefox，如果不需要使用其他浏览器，则不需要额外安装 Driver。</div><div class="line">    // 在此我们安装 Chrome 的 driver 以便使用 Chrome 进行测试。</div><div class="line">    driver: &#123;</div><div class="line">        chrome: &#123;</div><div class="line">            // Chrome 浏览器启动 Driver，请在下方链接查询最新版本。</div><div class="line">            // https://chromedriver<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>/index<span class="variable">.html</span></div><div class="line">            version: '2.25',</div><div class="line">            arch: process<span class="variable">.arch</span>,</div><div class="line">            baseURL: 'https://chromedriver<span class="variable">.storage</span><span class="variable">.googleapis</span><span class="variable">.com</span>'</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本配置信息包含 Selenium 本体配置与 Driver 配置。我们将在稍后动态载入这些配置。 本文件的目的是为了更好管理 Selenium 的版本。</p>
<ol>
<li>告诉 Nightwatch，我的 Selenium 与 Driver 在哪里。</li>
</ol>
<p>再次打开项目根目录下的 “nightwatch.conf.js” 文件，并这样编辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./build/selenium-conf'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 告诉 Nightwatch 我的 Selenium 在哪里。</span></div><div class="line">    settings.selenium.server_path = <span class="string">`<span class="subst">$&#123;path.resolve()&#125;</span>/node_modules/selenium-standalone/.selenium/selenium-server/<span class="subst">$&#123;seleniumConfig.selenium.version&#125;</span>-server.jar`</span></div><div class="line"></div><div class="line">    <span class="comment">// 设置 Chrome Driver, 让 Selenium 有打开 Chrome 浏览器的能力。</span></div><div class="line">    settings.selenium.cli_args[<span class="string">'webdriver.chrome.driver'</span>] = <span class="string">`<span class="subst">$&#123;path.resolve()&#125;</span>/node_modules/selenium-standalone/.selenium/chromedriver/<span class="subst">$&#123;seleniumConfig.driver.chrome.version&#125;</span>-<span class="subst">$&#123;seleniumConfig.driver.chrome.arch&#125;</span>-chromedriver`</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> settings;</div><div class="line">&#125;)(<span class="built_in">require</span>(<span class="string">'./nightwatch.json'</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>我们新加了两行配置，它们的作用如注释所示。<br>同样的，如果您希望查看更多的配置项，请点击 <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<ol>
<li>建立 Selenium 安装脚本，一键安装 Selenium。</li>
</ol>
<p>selenium-standalone 只是用来安装和管理 Selenium 的工具么？所以现在是时候用它来安装 Selenium 了。我们将通过调取 selenium-standalone 的内置方法来实现自动安装。在 “build” 文件夹中建立文件 “selenium-setup.js”，并写入如下信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">'selenium-standalone'</span>)</div><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./selenium-conf.js'</span>)</div><div class="line"></div><div class="line">selenium.install(&#123;</div><div class="line">    <span class="attr">version</span>: seleniumConfig.selenium.version,</div><div class="line">    <span class="attr">baseURL</span>: seleniumConfig.selenium.baseURL,</div><div class="line">    <span class="attr">drivers</span>: seleniumConfig.driver,</div><div class="line">    <span class="attr">logger</span>: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; <span class="built_in">console</span>.log(message) &#125;,</div><div class="line">    <span class="attr">progressCb</span>: <span class="function"><span class="keyword">function</span> (<span class="params">totalLength, progressLength, chunkLength</span>) </span>&#123;&#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Selenium 安装错误: <span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Selenium 安装完成.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>同样为了方便，我们将安装命令写入 npm scripts 中：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span>,</div><div class="line">        <span class="string">"selenium-setup"</span>: <span class="string">"node ./build/selenium-setup.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在项目根目录执行 npm run selenium-setup 安装 Selenium.<br>当提示安装完成后，一切就绪！(･∀･)</p>
<blockquote>
<p>Selenium 与其 Driver 会安装到 “node_modules/selenium-standalone/.selenium” 中。</p>
</blockquote>
<ol>
<li>想要手工启动 Selenium？</li>
</ol>
<p>默认情况下，Selenium 是由 Nightwatch 启动的，不需要手工干预，不过如果想要手工启动当然是可以的啦。<br>在 build 文件夹中建立文件 “selenium-start.js”，并写入如下信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">'selenium-standalone'</span>)</div><div class="line"><span class="keyword">const</span> seleniumConfig = <span class="built_in">require</span>(<span class="string">'./selenium-conf.js'</span>)</div><div class="line"></div><div class="line">selenium.start(&#123;</div><div class="line">    <span class="attr">drivers</span>: seleniumConfig.driver</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, child</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Selenium 启动失败: <span class="subst">$&#123;err&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Selenium 已手工启动，进程 PID: <span class="subst">$&#123;child.pid&#125;</span>`</span>)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'当不再需要运行 Selenium 时可关闭此 PID 进程.'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后同样添加启动命令至 npm scripts 中：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="string">"scripts"</span>: &#123;</div><div class="line">        <span class="string">"start"</span>: <span class="string">"node ./startup.js"</span>,</div><div class="line">        <span class="string">"selenium-setup"</span>: <span class="string">"node ./build/selenium-setup.js"</span>,</div><div class="line">        <span class="string">"selenium-start"</span>: <span class="string">"node ./build/selenium-start.js"</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以后使用命令 npm run selenium-start 就可以手工启动 Selenium 了。</p>
<h2 id="环境配置完成"><a href="#环境配置完成" class="headerlink" title="环境配置完成"></a>环境配置完成</h2><p>目录如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> -- build</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-conf.js        # Selenium 版本信息配置。</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-setup.js       # Selenium 安装命令脚本。</span></div><div class="line">|<span class="string">      </span>|<span class="string"> -- selenium-start.js       # Selenium 启动命令脚本。</span></div><div class="line">|</div><div class="line">|<span class="string"> -- nightwatch.conf.js             # Nightwatch 动态配置文件。</span></div><div class="line">|<span class="string"> -- nightwatch.json                # Nightwatch 配置文件。</span></div><div class="line">|<span class="string"> -- package.json                   # 项目信息配置文件。</span></div><div class="line">|<span class="string"> -- startup.js                     # 测试启动入口文件。</span></div></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>nightwatch.json文件中</p>
<ul>
<li>请注意 “desiredCapabilities” 下的 “browserName” 项，这是测试时将使用的浏览器，您可以修改为 chrome、internet explorer、phantomjs，本文在介绍时只安装了 Chrome 的 Driver，如果您需要使用其他浏览器，要安装相应的 Driver 才可以正常使用。</li>
<li>默认浏览器为 Firefox，如果您使用 Firefox 的话，不需要额外进行 Driver 的配置。</li>
<li>所以，如果您需要使用 Chrome 的话请将 “browserName” 修改为 “chrome” 喔！<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"src_folders"</span>: [<span class="string">"tests"</span>],</div><div class="line">     <span class="attr">"output_folder"</span>: <span class="string">"reports"</span>,</div><div class="line">     <span class="attr">"custom_commands_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"custom_assertions_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"page_objects_path"</span>: <span class="string">""</span>,</div><div class="line">     <span class="attr">"globals_path"</span>: <span class="string">""</span>,</div><div class="line"></div><div class="line">     <span class="attr">"selenium"</span>: &#123;</div><div class="line">       <span class="attr">"start_process"</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">"server_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"log_path"</span>: <span class="string">""</span>,</div><div class="line">       <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">       <span class="attr">"port"</span>: <span class="number">4444</span>,</div><div class="line">       <span class="attr">"cli_args"</span>: &#123;</div><div class="line">         <span class="attr">"webdriver.chrome.driver"</span>: <span class="string">""</span></div><div class="line">       &#125;</div><div class="line">     &#125;,</div><div class="line"></div><div class="line">     <span class="attr">"test_settings"</span>: &#123;</div><div class="line">       <span class="attr">"default"</span>: &#123;</div><div class="line">         <span class="attr">"launch_url"</span>: <span class="string">"http://localhost"</span>,</div><div class="line">         <span class="attr">"selenium_port"</span>: <span class="number">4444</span>,</div><div class="line">         <span class="attr">"selenium_host"</span>: <span class="string">"localhost"</span>,</div><div class="line">         <span class="attr">"silent"</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">"screenshots"</span>: &#123;</div><div class="line">           <span class="attr">"enabled"</span>: <span class="literal">false</span>,</div><div class="line">           <span class="attr">"path"</span>: <span class="string">""</span></div><div class="line">         &#125;,</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">"chrome"</span> : &#123;</div><div class="line">         <span class="attr">"desiredCapabilities"</span>: &#123;</div><div class="line">           <span class="attr">"browserName"</span>: <span class="string">"chrome"</span>,</div><div class="line">           <span class="attr">"javascriptEnabled"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"acceptSslCerts"</span>: <span class="literal">true</span></div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Driver 的文档可参考<a href="http://nightwatchjs.org/guide#selenium-settings" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h2 id="开始编写测试用例"><a href="#开始编写测试用例" class="headerlink" title="开始编写测试用例"></a>开始编写测试用例</h2><h3 id="创建目录存放测试用例"><a href="#创建目录存放测试用例" class="headerlink" title="创建目录存放测试用例"></a>创建目录存放测试用例</h3><p>在项目根目录新建一个名为 “tests” 的目录，然后这里就用来存放我们即将编写的测试用例文件。<br>那么这个文件夹能不能指向到其他地方去呢？当然可以，不过要修改一个小地方。</p>
<p>还记得 “ nightwatch.json “ 文件么？打开看看，第一项是不是叫 src_folders，然后值为 [“tests”]？<br>我相信您已经懂了，这里就是定义测试用例存放目录的地方，然后改成自己想要的目录吧！</p>
<blockquote>
<p>您可以在目录中存放多个测试用例文件，且命名随意，Nightwatch 将读取目录中所有的 JS 文件，如果符合测试用例格式，将会自动执行。</p>
</blockquote>
<h3 id="编写一个简单的测试用例"><a href="#编写一个简单的测试用例" class="headerlink" title="编写一个简单的测试用例"></a>编写一个简单的测试用例</h3><p>在 “tests” 目录中建立一个测试用例文件 “demo.js”，然后我们来写一个没什么用的小 demo！</p>
<p>这个 Demo 将打开 Bing，搜索 “what is microsoft”，然后保存成截图后退出。</p>
<p>OK，打开 “demo.js”，添加以下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">'Find the answer.'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</div><div class="line">    <span class="comment">// TODO...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>module.exports 导出一个对象，对象的 Key 即为测试用例名称，您可以编写多个测试用例，Nightwatch 将依次执行。</p>
</blockquote>
<p>您可以在测试用例中导入其他模块并直接使用在测试逻辑中</p>
<p>先写到这里，您可能会对 cilent 感到陌生，所以还是要简单介绍一下。</p>
<p>client 是代码运行时 Nightwatch 提供的对象，所有对浏览器进行的操作都将使用此对象调取，比如 client.click(“CSS Selector”)、client.getCookie(function () {…})，我们第一章说过的 “可以简单理解为 Selenium 的控制软件” 就是通过它体现的喔！</p>
<blockquote>
<p>client 的所有 API 详情见 <a href="http://nightwatchjs.org/api#commands" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>大致了解这东西的意思之后，就可以接着完善测试逻辑了：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  '<span class="attribute">Find the answer.'</span>: function (client) &#123;</div><div class="line">    // 定义 Bing 页面中的节点.</div><div class="line">    const searchInput = '#sb_form_q'</div><div class="line">    const searchBtn = '#sb_form_go'</div><div class="line">    const question = 'what is microsoft'</div><div class="line"></div><div class="line">    // 启动浏览器并打开 bing<span class="variable">.com</span>.</div><div class="line">    client<span class="variable">.url</span>('http://bing<span class="variable">.com</span>')<span class="variable">.maximizeWindow</span>()</div><div class="line"></div><div class="line">    // 确保 "body" 和输入框可以使用.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span></div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>(searchInput)<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line">    client<span class="variable">.pause</span>(2000)  // 稍等两秒.</div><div class="line"></div><div class="line">    // 输入 "what is microsoft" 然后搜索.</div><div class="line">    client<span class="variable">.setValue</span>(searchInput, question)</div><div class="line">    client<span class="variable">.click</span>(searchBtn)</div><div class="line">    client<span class="variable">.pause</span>(2000)</div><div class="line"></div><div class="line">    // 截一张图然后保存到 "reports/answer<span class="variable">.png</span>". </div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span></div><div class="line">    client<span class="variable">.saveScreenshot</span>('reports/answers<span class="variable">.png</span>')</div><div class="line">    client<span class="variable">.end</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来关注一下 expect ，是不是看起来很像自然语言？这些语句就是测试结果的验证语句，就是我们希望得到的结果。比如 client.expect.element(‘body’).to.be.present.before(3000)，意思就是 “希望 body 元素能在 3000 毫秒内初始化完毕”。</p>
<blockquote>
<p>Nightwatch 支持 BDD-Style 与 Assert 断言两种风格，文档可见 <a href="http://nightwatchjs.org/api#expect-api" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<p>是不是确实没什么用？毕竟是个简单的 Demo 而已，哈哈。那么添加一个稍微复杂点的测试用例。</p>
<h3 id="编写另一个简单的测试用例"><a href="#编写另一个简单的测试用例" class="headerlink" title="编写另一个简单的测试用例"></a>编写另一个简单的测试用例</h3><p>这个 demo 将打开 <a href="http://live.bilibili.com/" target="_blank" rel="external">Bilibili 直播</a> ，然后执行：</p>
<ul>
<li>打开首页并等待加载完毕；</li>
<li>检查登陆按钮是否存在；</li>
<li>点击登陆按钮；</li>
<li>填写用户名与密码；</li>
<li>点击登陆；</li>
<li>等待页面加载；</li>
<li>通过 Cookie 检查是否已登陆；</li>
<li>确保登陆后的用户导航面板存在；</li>
<li>鼠标移至头像处打开导航面板；</li>
<li>点击退出登陆；</li>
<li>等待页面刷新后检查 Cookie 是否已退出登陆；</li>
<li>结束测试。</li>
</ul>
<p>代码：<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">// Account setting.</div><div class="line">const accountConfig = &#123;</div><div class="line">  <span class="attribute">username</span>: 'USERNAME',</div><div class="line">  password: 'PASSWORD',</div><div class="line">  uid: '10000'</div><div class="line">&#125;</div><div class="line"></div><div class="line">module<span class="variable">.exports</span> = &#123;</div><div class="line">  'Bilibili Live Login Test': function (client) &#123;</div><div class="line">    client<span class="variable">.url</span>('http://live<span class="variable">.bilibili</span><span class="variable">.com</span>')<span class="variable">.maximizeWindow</span>()</div><div class="line"></div><div class="line">    // Page Init.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('<span class="variable">.top-nav-login-btn</span><span class="variable">.last</span>')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line"></div><div class="line">    // Login.</div><div class="line">    client<span class="variable">.click</span>('<span class="variable">.top-nav-login-btn</span><span class="variable">.last</span>')</div><div class="line">    client<span class="variable">.waitForElementVisible</span>('#bilibili-quick-login', 2000)</div><div class="line">    client<span class="variable">.frame</span>(0)</div><div class="line">    client<span class="variable">.pause</span>(2000)</div><div class="line">    client<span class="variable">.setValue</span>('#login-username', accountConfig<span class="variable">.username</span>)</div><div class="line">    client<span class="variable">.setValue</span>('#login-passwd', accountConfig<span class="variable">.password</span>)</div><div class="line">    client<span class="variable">.click</span>('#login-submit')</div><div class="line"></div><div class="line">    // Wait and check page has been reloaded.</div><div class="line">    client<span class="variable">.frameParent</span>()</div><div class="line">    client<span class="variable">.pause</span>(4000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line"></div><div class="line">    // Check cookies to ensure we are signed in.</div><div class="line">    client<span class="variable">.getCookies</span>(function (result) &#123;</div><div class="line">      result<span class="variable">.value</span><span class="variable">.forEach</span>((value, index, array) =&gt; &#123;</div><div class="line">        if (value<span class="variable">.name</span> === 'DedeUserID') client<span class="variable">.assert</span><span class="variable">.equal</span>(parseInt(value<span class="variable">.value</span>, 10), accountConfig<span class="variable">.uid</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    // Move to User Avatar.</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('<span class="variable">.user-avatar-link</span>')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line">    client<span class="variable">.moveToElement</span>('<span class="variable">.user-avatar-link</span>', 5, 5)</div><div class="line">    client<span class="variable">.pause</span>(800)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('#top-nav-user-panel')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.visible</span></div><div class="line"></div><div class="line">    // Logout.</div><div class="line">    client<span class="variable">.click</span>('#top-nav-logout-link')</div><div class="line">    client<span class="variable">.pause</span>(5000)</div><div class="line">    client<span class="variable">.expect</span><span class="variable">.element</span>('body')<span class="variable">.to</span><span class="variable">.be</span><span class="variable">.present</span><span class="variable">.before</span>(3000)</div><div class="line"></div><div class="line">    // Check cookies again to ensure we are off.</div><div class="line">    client<span class="variable">.getCookies</span>(function (result) &#123;</div><div class="line">      var logout = true</div><div class="line">      result<span class="variable">.value</span><span class="variable">.forEach</span>((value, index, array) =&gt; &#123;</div><div class="line">        if (value<span class="variable">.name</span> === 'LIVE_LOGIN_DATA') logout = false</div><div class="line">      &#125;)</div><div class="line">      client<span class="variable">.assert</span><span class="variable">.equal</span>(logout, true)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    client<span class="variable">.pause</span>(1000)</div><div class="line">    client<span class="variable">.end</span>()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>您可以新建一个文件，或者在之前的文件中继续编写。</p>
</blockquote>
<h3 id="运行测试用例"><a href="#运行测试用例" class="headerlink" title="运行测试用例"></a>运行测试用例</h3><p>回到项目根目录，执行 npm start，然后就可以看到浏览器自己测试了！</p>
<h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><ul>
<li><p>在填写<code>selenium-conf.js</code>的时候不要写最新版本（3.0版本）,不然在跑案例脚本时候会报找不到element的错误</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">selenium</span>: &#123;</div><div class="line">        <span class="attribute">version</span>: <span class="string">'2.53.1'</span>,  </div><div class="line">        baseURL: <span class="string">'https://selenium-release.storage.googleapis.com'</span></div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>其次，配置chromedriver的时候也不要写最新的版本，在mac中会报找不到mac64的错误，写成如下版本即可：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">driver</span>: &#123;</div><div class="line">        <span class="attribute">chrome</span>: &#123;</div><div class="line">            <span class="comment">// Chrome 浏览器启动 Driver，请在下方链接查询最新版本。</span></div><div class="line">            <span class="comment">// https://chromedriver.storage.googleapis.com/index.html</span></div><div class="line">            <span class="attribute">version</span>: <span class="string">'2.25'</span>,</div><div class="line">            <span class="attribute">arch</span>: process.arch,</div><div class="line">            <span class="attribute">baseURL</span>: <span class="string">'https://chromedriver.storage.googleapis.com'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>源文件项目地址:</em></p>
<blockquote>
<p><a href="https://github.com/meiminjun/AutoTest" target="_blank" rel="external">https://github.com/meiminjun/AutoTest</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git常用操作-回滚代码]]></title>
      <url>http://meiminjun.github.io/2016/12/01/git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="git常用操作-回滚代码"><a href="#git常用操作-回滚代码" class="headerlink" title="git常用操作-回滚代码"></a>git常用操作-回滚代码</h1><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><ul>
<li>git init 初始化一个git仓库</li>
<li>git add readme.txt 把文件添加到仓库(可以后面添加多个文件)</li>
<li>git add . 提交当前目录到缓存区</li>
<li>git commit -m “wrote a readme file” 把文件提交到仓库：</li>
<li>git status命令可以让我们时刻掌握仓库当前的状态</li>
<li>git diff 查看修改记录(按q退出)</li>
<li>git diff test.js 查看test.js修改记录(按q退出)</li>
<li>git checkout – file 在add之前修改过的记录撤销到与仓库一致</li>
<li>git reset HEAD file 把你add到缓存区的文件撤销到add之前</li>
<li>git diff HEAD – file 查看当前文件与仓库文件的区别</li>
</ul>
<h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><p>你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>
<p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：</p>
<p>打印日志：</p>
<p>git log 显示从最近到最远的提交日志</p>
<p>git log –pretty=oneline 显示简要版本</p>
<p>git reflog 显示所有分支的<strong>全部提交记录</strong> </p>
<p>开始穿梭到之前存盘（commit）的版本</p>
<p>git reset –hard HEAD^ </p>
<p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>git reset –hard d50672e 回滚到特定版本</p>
<p>总结：</p>
<ul>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</p>
</li>
<li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p>
</li>
<li><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>
</li>
</ul>
<h2 id="工作区与缓存区"><a href="#工作区与缓存区" class="headerlink" title="工作区与缓存区"></a>工作区与缓存区</h2><p>工作区：就是你电脑里看到的目录,也就是你的项目目录</p>
<p>版本库（Repository）:工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1faxekavuo1j20cq06iaa8.jpg" alt="缓存区"></p>
<p>前面我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch <span class="keyword">man</span>.js</div><div class="line"></div><div class="line"><span class="keyword">cat</span> &gt; <span class="keyword">man</span>.js</div><div class="line">输入管理</div><div class="line"></div><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div></pre></td></tr></table></figure>
<p>然后，<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">add</span> man.js</div><div class="line">git status</div><div class="line">Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div><div class="line"></div><div class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   man.js</div></pre></td></tr></table></figure></p>
<p>然后再次修改man.js，<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div><div class="line">测试一个内容</div><div class="line">测试</div><div class="line">新增修改</div></pre></td></tr></table></figure></p>
<p>提交：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"新增修改"</span></div><div class="line">[feature/git学习 <span class="number">4</span>f8114c] 新增修改</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">2</span> insertions(+)</div><div class="line"> create mode <span class="number">100644</span> git/man.js</div></pre></td></tr></table></figure></p>
<p>提交后，再看看状态：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>咦，怎么第二次的修改没有被提交？</p>
<p>我们回顾一下操作过程：</p>
<p>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</p>
<blockquote>
<p>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
</blockquote>
<p>提交后，用git diff HEAD – readme.txt命令可以查看工作区和版本库里面最新版本的区别：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git diff HEAD --man.js</div><div class="line"></div><div class="line">diff --git a/git/man.js b/git/man.js</div><div class="line">index 5884356..f434b08 100644</div><div class="line"><span class="comment">--- a/git/man.js</span></div><div class="line"><span class="comment">+++ b/git/man.js</span></div><div class="line"><span class="meta">@@ -1,2 +1,3 @@</span></div><div class="line"> 测试一个内容</div><div class="line"> 测试</div><div class="line"><span class="addition">+新增修改</span></div></pre></td></tr></table></figure></p>
<p>可见，第二次修改确实没有被提交。<br>如果提交完毕了则显示的是：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nothing <span class="built_in">to</span> commit, working <span class="built_in">directory</span> clean</div></pre></td></tr></table></figure></p>
<p>总结：<br>Git是如何跟踪修改的？每次修改，如果不add到暂存区，那就不会加入到commit中</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>举例说明：</p>
<p>目前的最新文件：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div><div class="line">测试一个内容</div><div class="line">测试</div><div class="line">新增修改</div></pre></td></tr></table></figure></p>
<p>这时候你新增了一行</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> <span class="keyword">man</span>.js</div><div class="line">测试一个内容</div><div class="line">测试</div><div class="line">新增修改</div><div class="line">新增一行代码</div></pre></td></tr></table></figure>
<p>突然，你发现新增的代码有点问题你想回退到之前版本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
<p>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--</span> <span class="selector-tag">man</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<p>命令git checkout – man.js意思就是，把man.js文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是man.js自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是man.js已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<blockquote>
<p>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令</p>
</blockquote>
<p>下面一种情况是当你已经add到缓存区了，你想撤销<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">add</span> man.js</div><div class="line">git status</div><div class="line">Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div><div class="line"></div><div class="line">        modified:   man.js</div></pre></td></tr></table></figure></p>
<p>Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> man.js</div></pre></td></tr></table></figure>
<p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>
<p>再用git status查看一下，现在暂存区是干净的，工作区有修改：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>如果想丢弃工作区的修改,则继续<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--</span> <span class="selector-tag">man</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure></p>
<p>小结：</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>场景说明：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add man.js</div><div class="line">git commit -m <span class="string">"测试删除"</span></div><div class="line">[feature/git学习 fe3e350] 测试删除</div><div class="line"> <span class="number">1</span> file <span class="section">changed</span>, <span class="number">1</span> insertion(+), <span class="number">3</span> deletions(-)</div></pre></td></tr></table></figure></p>
<p>一般情况下如果你删除文件的时候，就直接把文件给删了，或者rm 命令删除了</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">rm</span> <span class="keyword">man</span>.js</div></pre></td></tr></table></figure>
<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line">On branch feature/git学习</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add/rm &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        deleted:    man.js</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure></p>
<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">rm</span> <span class="keyword">man</span>.js</div><div class="line"><span class="keyword">rm</span> 'git/<span class="keyword">man</span>.js'</div><div class="line">git commit -<span class="keyword">m</span> <span class="string">"remove man.js"</span></div><div class="line">feature/git学习 8a1abac] remove <span class="keyword">man</span>.js</div><div class="line"> 1 <span class="keyword">file</span> changed, 1 deletion(-)</div><div class="line"> delete mode 100644 git/<span class="keyword">man</span>.js</div></pre></td></tr></table></figure></p>
<p>文件就从版本库中被删除了。</p>
<p>另一种情况，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> <span class="selector-tag">--</span> <span class="selector-tag">man</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[chrome神器之postman]]></title>
      <url>http://meiminjun.github.io/2016/08/18/chrome-postman/</url>
      <content type="html"><![CDATA[<h2 id="postman简介"><a href="#postman简介" class="headerlink" title="postman简介"></a>postman简介</h2><p>这个是一个接口调试神器（<strong>前端开发必备</strong>），不用再每次运行app再来调试接口，任意修改入参，方便与后端人员联调。</p>
<p>##离线安装(简易版)</p>
<p>内部地址：<br>\10.14.47.51\share\临时存放\梅敏君\tool\Postman-REST-Client_v0.8.1</p>
<p>外部地址：<br>链接：<a href="http://share.weiyun.com/6d9d61e3c3ec595f61ab58886e14c280" target="_blank" rel="external">http://share.weiyun.com/6d9d61e3c3ec595f61ab58886e14c280</a> （密码：9rFJ）<br>链接: <a href="http://pan.baidu.com/s/1o7BTKt8" target="_blank" rel="external">http://pan.baidu.com/s/1o7BTKt8</a> 密码: h6t6</p>
<p>安装方法如下：</p>
<a id="more"></a>
<p>打开chrome,输入”chrome://extensions/“进入扩展程序，勾选”开发者模式”</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6y0047jrrj20fe0c5gmy.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6y00hz3u9j20fe02zt8w.jpg" alt=""></p>
<p>将”Postman-REST-Client_v0.8.1”源码引入到chrome</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y010h30nj20fe0almyp.jpg" alt=""></p>
<p>引入后，就能显示<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y027gymcj20fe05amxp.jpg" alt=""></p>
<p>打开postman<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y03b9ajnj20f107owf1.jpg" alt=""></p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6y03s6yq6j20fe0bgq3b.jpg" alt=""></p>
<p>可以开始使用<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6y04dplabj20fe054jrp.jpg" alt=""></p>
<h3 id="常用快捷键操作"><a href="#常用快捷键操作" class="headerlink" title="常用快捷键操作"></a>常用快捷键操作</h3><ol>
<li>新增加一个请求：alt + n</li>
<li>收藏请求：a</li>
</ol>
<p>更多请参考，<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6y0al4gfnj20hd0elta9.jpg" alt=""></p>
<h2 id="在线安装postman-完整版本"><a href="#在线安装postman-完整版本" class="headerlink" title="在线安装postman(完整版本)"></a>在线安装postman(完整版本)</h2><ul>
<li>打开chrome,输入”chrome://extensions/“进入扩展程序，点击”获取更多扩展程序”.</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6xyt0d1pgj20e00hhtb4.jpg" alt=""></p>
<ul>
<li>进入chrome商店（这里是要翻墙才可以，请参见），搜索postman</li>
</ul>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6xze0tokdj20x7061ta6.jpg" alt=""></p>
<ul>
<li>使用方法基本和”简易版”一样</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[google之翻越长城]]></title>
      <url>http://meiminjun.github.io/2016/08/18/chrome-%E7%BF%BB%E5%A2%99/</url>
      <content type="html"><![CDATA[<p>先上图<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6y0m99wxqj20qj0fomzi.jpg" alt=""></p>
<h2 id="翻墙你能干嘛呢？"><a href="#翻墙你能干嘛呢？" class="headerlink" title="翻墙你能干嘛呢？"></a>翻墙你能干嘛呢？</h2><ul>
<li>查询到最优质的知识和技能（比百度强大的多）</li>
<li>可以facebook、YouTube(这个比土豆、优酷资源大的多)</li>
<li>对于前端开发者来说，可以直接通过chrome调试android的webview（用过的人都知道比safari强大的多）</li>
<li>喜欢看各种电影的同学，哎，不说了。。太多了</li>
</ul>
<a id="more"></a>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>链接: <a href="http://pan.baidu.com/s/1sliXC4l" target="_blank" rel="external">http://pan.baidu.com/s/1sliXC4l</a> 密码: wsny (不行就用下面的)<br>链接：<a href="http://share.weiyun.com/13800b0a86b3dcf10f986903d131d31b" target="_blank" rel="external">http://share.weiyun.com/13800b0a86b3dcf10f986903d131d31b</a> （密码：sEKu）</p>
<h2 id="替换host文件"><a href="#替换host文件" class="headerlink" title="替换host文件"></a>替换host文件</h2><blockquote>
<p><strong>注意：替换之前先备份一下你的hosts文件</strong></p>
</blockquote>
<p>替换位置：</p>
<p>Windows系统hosts位于 C:\Windows\System32\drivers\etc\hosts</p>
<p>Android（安卓）系统hosts位于 /system/etc/hosts</p>
<p>Mac（苹果电脑）系统hosts跟Linux一样位于 /etc/hosts（找不到的自行百度）</p>
<h2 id="重启chrome-就可以了"><a href="#重启chrome-就可以了" class="headerlink" title="重启chrome 就可以了"></a>重启chrome 就可以了</h2><p>鉴于国内长城封锁的很死，对.com 的 google还是走不了的</p>
<p>一般走香港的google<br><a href="https://www.google.com.hk/?gws_rd=ssl" target="_blank" rel="external">https://www.google.com.hk/?gws_rd=ssl</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ionic2菜鸟学习笔记《二》]]></title>
      <url>http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><a href="http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/">ionic2菜鸟学习笔记《一》</a></p>
<p><a href="http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/">ionic2菜鸟学习笔记《二》</a></p>
<h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p>在ionic2中相互跳转就要用到navigation,<br>下面我们在主页添加一个按钮，点击按钮跳转到一个新的页面，然后将一个页面中的数据传递到另外一个页面。</p>
<p>进入项目，并创建一个新的页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g page SecondPage</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6gxeqo0s3j20hp052gmb.jpg" alt=""></p>
<p>将 @import “../pages/second-page/second-page.scss”;添加到app/theme/app.core.scss</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6gylsrhlmj20ci04ut98.jpg" alt=""></p>
<p>接着，在我们的主页面(app/new-page/new-page.html)中添加一个按钮，并对这个按钮增加相应的点击事件处理函数openSecond()<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6gzb3mod8j20ds07ct9m.jpg" alt=""></p>
<p>在app/new-page/new-page.ts中添加这个跳转时间的方法内容。我们可以通过<br>this.nav.push()这个方法来跳转到新的页面，并且可以传递一些数据，如图：</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6gzfbqyoxj20l50k6tdz.jpg" alt=""></p>
<p>在app/pages/second-page/second-page.ts中，增加如下代码，用于获取从上个页面传递过来的数据<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6gzh6uds1j20ix0dyn05.jpg" alt=""></p>
<p>将传递过来的数据进行展示,app/second-page/second-page.html中：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6gzhn130gj207u05m0sy.jpg" alt=""></p>
<p>输入命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功显示：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6gzvxds6kg20db0flwgx.gif" alt=""></p>
<p>此外，我们在第二个页面添加一个返回按钮，返回到上一个页面，在app/pages/second-page/second-page.html添加代码：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6h01juoqrj20f406y0te.jpg" alt=""></p>
<p>我们在app/pages/second-page/second-page.ts中添加处理返回的代码：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6h048aw5sj20al07t0th.jpg" alt=""></p>
<p>输入命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>显示：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6h080yd17g20db0dn0ze.gif" alt=""></p>
<h1 id="input"><a href="#input" class="headerlink" title="input"></a>input</h1><p>进入之前的主页代码app/pages/new-page/new-page.html,并修改代码：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6i545xwt3j20ec0b2gnc.jpg" alt=""></p>
<p>输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic serve</div></pre></td></tr></table></figure></p>
<p>显示成功：<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6i4ylhb0lj207y0ccaal.jpg" alt=""></p>
<p>下面我们来点击”登陆按钮”获取提交表单时候输入数据：</p>
<p>第一种：通过[(ngModel)]来获取参数值，修改new-page.html的代码为如下形式<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6i5bch40aj20eh0aymz5.jpg" alt=""></p>
<p>在./app/pages/new-page/new-page.ts文件中打印获取的数据：<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6i5khtiy8j20l80h5q5j.jpg" alt=""></p>
<p>最后再次运行命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功：<br><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6i5lbw6moj20ii0dewhh.jpg" alt=""></p>
<h1 id="ng2权威资料"><a href="#ng2权威资料" class="headerlink" title="ng2权威资料"></a>ng2权威资料</h1><p>中文官方：<a href="https://angular.cn/docs/ts/latest/quickstart.html" target="_blank" rel="external">https://angular.cn/docs/ts/latest/quickstart.html</a></p>
<p>官方网站：<a href="http://a2.hubwiz.com/docs/ts/latest/" target="_blank" rel="external">http://a2.hubwiz.com/docs/ts/latest/</a></p>
<h1 id="ionic2权威资料"><a href="#ionic2权威资料" class="headerlink" title="ionic2权威资料"></a>ionic2权威资料</h1><p><a href="https://github.com/driftyco/ionic" target="_blank" rel="external">https://github.com/driftyco/ionic</a></p>
<p><a href="http://ionicframework.com/docs/v2/getting-started/tutorial/" target="_blank" rel="external">http://ionicframework.com/docs/v2/getting-started/tutorial/</a></p>
<h3 id="ionic2组件"><a href="#ionic2组件" class="headerlink" title="ionic2组件"></a>ionic2组件</h3><p><a href="http://ionicframework.com/docs/v2/components/#overview" target="_blank" rel="external">http://ionicframework.com/docs/v2/components/#overview</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ionic2菜鸟学习笔记《一》]]></title>
      <url>http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/</url>
      <content type="html"><![CDATA[<p><a href="http://meiminjun.github.io/2016/08/01/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%B8%80%E3%80%8B/">ionic2菜鸟学习笔记《一》</a></p>
<p><a href="http://meiminjun.github.io/2016/08/03/ionic2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8A%E4%BA%8C%E3%80%8B/">ionic2菜鸟学习笔记《二》</a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>nodeV5版本以上(官方推荐)</li>
<li>cordova</li>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">android 开发环境（jdk,android SDK,eclipse或者android studio）</a></li>
</ul>
<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><blockquote>
<p>npm install -g ionic@beta</p>
</blockquote>
<h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ionic <span class="keyword">start</span> MyFirstIonicApp <span class="comment">--v2  //注意，当从github下载的zip下载完成之后一直停留了很久，就停止（可能是国内被墙的缘故）</span></div><div class="line"></div><div class="line">并直接</div><div class="line">cd MyFirstIonicApp </div><div class="line"></div><div class="line">npm <span class="keyword">install</span> </div><div class="line"></div><div class="line">ionic serve</div></pre></td></tr></table></figure>
<h2 id="在设备中打开"><a href="#在设备中打开" class="headerlink" title="在设备中打开"></a>在设备中打开</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">npm install -g cordova</div><div class="line"></div><div class="line">ionic platform <span class="keyword">add</span><span class="bash"> ios</span></div><div class="line"></div><div class="line">ionic platform <span class="keyword">add</span><span class="bash"> android</span></div><div class="line"></div><div class="line">ionic <span class="keyword">run</span><span class="bash"> android</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="新建一个page"><a href="#新建一个page" class="headerlink" title="新建一个page"></a>新建一个page</h1><p>进入项目目录：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g page NewPage  <span class="comment">// 新建立一个页面</span></div></pre></td></tr></table></figure></p>
<p>会出现：</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f862gmtxj20av05hq3j.jpg" alt=""></p>
<p>控制台提示一句话：</p>
<p>Don’t forget to add an import for new-page.scss in app\themes\app.core.scss:</p>
<p>@import “..\pages\new-page\new-page.scss”;</p>
<p>在项目中找到:./app/theme/app.core.scss这个文件</p>
<p>在里面新增加一句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"../pages/new-page/new-page.scss"</span>;</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6f89ew5mbj20b20440ta.jpg" alt=""></p>
<p>现在，我们就新建了一个页面，在.pages/目录下面会看到new-page文件夹，这个就是新增的页面</p>
<p>我们找到new-page.html中写一些代码:</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f8i8omj1j208g07fglz.jpg" alt=""></p>
<p>找到./app/pages/new-page/new-page.ts文件，将类名NewPagePage改为”NewPage”;</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6i5w4qu2hj20fd0d7q5m.jpg" alt=""></p>
<p>找到./app/app.ts ，修改app.ts页面的入口文件</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6f8kvt5acj20eg09j767.jpg" alt=""></p>
<p>命令行输入：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功了！<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f8mj6wi2j20hn08waan.jpg" alt=""></p>
<p><strong>恭喜你成功跨入第一步，万事开头难！</strong></p>
<h1 id="新建自定义组件"><a href="#新建自定义组件" class="headerlink" title="新建自定义组件"></a>新建自定义组件</h1><p>ionic官网有很多组件</p>
<blockquote>
<p>地址：<a href="http://ionicframework.com/docs/v2/components/#overview" target="_blank" rel="external">http://ionicframework.com/docs/v2/components/#overview</a></p>
</blockquote>
<p>进入项目目录<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g component NewComponent  <span class="comment">// 新建立组件</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6f9a9jv32j20dj03kt8z.jpg" alt=""></p>
<p>目录中会新增一个components，其中会生成一个new-component的组件目录</p>
<p><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6f9ou0tyij207h05j0t0.jpg" alt=""></p>
<p>编辑new-component里面的内容，找到../app/components/new-component/new-component.html, 修改其中的内容为：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6f9rwt6wnj209r0axwfc.jpg" alt=""></p>
<p>找到../app/components/new-component/new-component.ts, 修改其中的内容为：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6faetaj5pj20bj077wfi.jpg" alt=""></p>
<p>在你需要这个组件的页面中添加组件，这里以之前的new-page页面为例<br>找到./pages/new-page/new-page.ts,在其中添加：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6fag344v9j20el0bvjtz.jpg" alt=""></p>
<p>将组件插入到html中，找到./pages/new-page/new-page.html,添加：</p>
<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6faj20um3j20bx0810ta.jpg" alt=""></p>
<p><strong>注意：看下./app.ts中是不是</strong><br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6famcp1knj20co098ta9.jpg" alt=""></p>
<p>启动项目：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure>
<p>大功告成：</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6fakrgsiej20b006odfv.jpg" alt=""></p>
<h1 id="生成pipe"><a href="#生成pipe" class="headerlink" title="生成pipe"></a>生成pipe</h1><p>pipe类似于一个过滤器，将渲染页面的数据进行过滤，例如：<br>后端传递给我门的数据时{value：”hello”},前端展示的时候要讲hello 转换为HELLO WORLD</p>
<p>下面是一个生成pipe的例子：</p>
<p>进入项目，新建一个pipe：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g pipe NewPipe</div></pre></td></tr></table></figure></p>
<p>之后会生成一个pipes文件目录，如图：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6fepp1dqgj205k04w74c.jpg" alt=""></p>
<p>打开pipes/NewPipes.ts,修改其中的transform方法</p>
<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6fetuwrufj20ba09vq4a.jpg" alt=""></p>
<p>在../app/pages/new-page/new-page.ts中引入这个pipe</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6feyqp9e9j20bb0ap40e.jpg" alt=""></p>
<p>在./pages/new-page/new-age.html中增加字符显示：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6ff3nnhq3j20ac0c9wfr.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6frhuup6pj20am07rq3p.jpg" alt=""></p>
<p>注意在./pipes/NewPipe中设置的NewPipe对应的new-page.html中对应的要一致<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f6frm44yk7j206q08pjs2.jpg" alt=""></p>
<p>运行命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功显示：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6fs6yoyoqj208l08i3ym.jpg" alt=""></p>
<h1 id="号"><a href="#号" class="headerlink" title="*号"></a>*号</h1><p>在ionic2页面中会出现*，如：</p>
<h2 id="号的第一种情况-if语句-："><a href="#号的第一种情况-if语句-：" class="headerlink" title="*号的第一种情况(if语句)："></a>*号的第一种情况(if语句)：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">"someValue"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>表示的意思指：</p>
<blockquote>
<p>如果someValue的值为true,则显示</p><p></p>,否则不显示<p></p><p></p>
</blockquote>
<h2 id="号的第二种情况-for循环-："><a href="#号的第二种情况-for循环-：" class="headerlink" title="*号的第二种情况(for循环)："></a>*号的第二种情况(for循环)：</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngFor</span>=<span class="string">"let item of items"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.value&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>表示的意思指：</p>
<blockquote>
<p>获取一个列表items，并遍历其中的元素item，然后显示这个元素的value属性的值</p>
</blockquote>
<h2 id="号的第三种情况-switch语句"><a href="#号的第三种情况-switch语句" class="headerlink" title="*号的第三种情况(switch语句)"></a>*号的第三种情况(switch语句)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">"paragraphNumber"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">"1"</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">"2"</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">"3"</span>&gt;</span>Paragraph 3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>表示的意思指：</p>
<p>paragraphNumber=1时，显示: Paragraph 1</p>
<p>paragraphNumber=2时，显示: Paragraph 2</p>
<p>依次类推</p>
<p>默认显示：Paragraph</p>
<h1 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h1><p>Provider是一种为App提供数据源请求的方式</p>
<p>举个栗子：</p>
<p>请求地址：<a href="https://www.reddit.com/r/gifs/top/.json?limit=10&amp;sort=hot" target="_blank" rel="external">https://www.reddit.com/r/gifs/top/.json?limit=10&amp;sort=hot</a> </p>
<p>获取Json格式的数据，并在程序启动的时候，在控制台打印获取的数据信息：</p>
<p>进入项目，新建一个provider：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="built_in">cd</span> MyFirstIonicApp</div><div class="line"></div><div class="line">ionic g provider NewProvider</div></pre></td></tr></table></figure></p>
<p>在目录中会新增一个目录，如下：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f6fswjsg79j206i05kdg1.jpg" alt=""></p>
<p>然后修改.providers/new-provider/new-provider.ts中的代码</p>
<p>默认接受的是json数据</p>
<p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6ft1nrnabj20gi06swh7.jpg" alt=""></p>
<p>在需要的页面中调用，这里我们在之前的new-page.ts这个页面渲染时打印出来</p>
<p>修改代码：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6fti8h1ukj20i30gntc9.jpg" alt=""></p>
<p>启动项目：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ionic serve</span></div></pre></td></tr></table></figure></p>
<p>成功返回：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6ftgl1mgbj20em09sgmd.jpg" alt=""></p>
<p>最后截一下几个示例写完的整个目录方便大家对照：<br><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6ftw2nocuj20560fat9j.jpg" alt=""></p>
<p>今天先写到这里。。2016-08-02-23-25</p>
<p>后续会有持续更新，敬请期待！</p>
<h1 id="ng2权威资料"><a href="#ng2权威资料" class="headerlink" title="ng2权威资料"></a>ng2权威资料</h1><p>中文官方：<a href="https://angular.cn/docs/ts/latest/quickstart.html" target="_blank" rel="external">https://angular.cn/docs/ts/latest/quickstart.html</a></p>
<p>官方网站：<a href="http://a2.hubwiz.com/docs/ts/latest/" target="_blank" rel="external">http://a2.hubwiz.com/docs/ts/latest/</a></p>
<h1 id="ionic2权威资料"><a href="#ionic2权威资料" class="headerlink" title="ionic2权威资料"></a>ionic2权威资料</h1><p><a href="https://github.com/driftyco/ionic" target="_blank" rel="external">https://github.com/driftyco/ionic</a></p>
<p><a href="http://ionicframework.com/docs/v2/getting-started/tutorial/" target="_blank" rel="external">http://ionicframework.com/docs/v2/getting-started/tutorial/</a></p>
<h3 id="ionic2组件"><a href="#ionic2组件" class="headerlink" title="ionic2组件"></a>ionic2组件</h3><p><a href="http://ionicframework.com/docs/v2/components/#overview" target="_blank" rel="external">http://ionicframework.com/docs/v2/components/#overview</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[史上最强Sublime 笔记系列---vim常用命令笔记]]></title>
      <url>http://meiminjun.github.io/2016/07/31/SublimeText-vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1f6cyydkhdjj20sd0hsabg.jpg" alt=""></p>
<p>这篇文章主要讲的Sublime Text 3 的<strong>vim</strong>命令说明，勤加练习之后，方可解放你的双手</p>
<a id="more"></a>
<ol>
<li><p><strong> <a href="/2016/06/24/SublimeText-常用快捷键/">史上最强Sublime 笔记系列—常用快捷键</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/23/SublimeText-常用插件和主题/">史上最强Sublime 笔记系列—精选插件和UI主题</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/22/SublimeText-我的常用配置/">史上最强Sublime 笔记系列—我的常用配置</a>(持续更新中。。。)  </strong></p>
</li>
</ol>
<h2 id="sulimeText-的vim模式"><a href="#sulimeText-的vim模式" class="headerlink" title="sulimeText 的vim模式"></a>sulimeText 的vim模式</h2><p>sublime 默认是禁用vim模式的</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"ignored_packages"</span>: [<span class="string">"Vintage"</span>]</div></pre></td></tr></table></figure>
<p>开启vim模式要配置成：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"ignored_packages"</span>: [<span class="string">""</span>]</div></pre></td></tr></table></figure>
<p>在用户配置中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"vintage_start_in_command_mode"</span>: <span class="literal">true</span> <span class="comment">//启动时，开启vim命令模式</span></div></pre></td></tr></table></figure>
<p>在用户快捷键中添加配置(进入vim模式)：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"keys"</span>: [<span class="string">"j"</span>, <span class="string">"j"</span>],</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"exit_insert_mode"</span>,</div><div class="line">    <span class="attr">"context"</span>:</div><div class="line">    [</div><div class="line">        &#123; <span class="attr">"key"</span>: <span class="string">"setting.command_mode"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span> &#125;,</div><div class="line">        &#123; <span class="attr">"key"</span>: <span class="string">"setting.is_widget"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="vim-sublime命令（必记）"><a href="#vim-sublime命令（必记）" class="headerlink" title="vim-sublime命令（必记）"></a>vim-sublime命令（必记）</h2><p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1f6kg9eegv9j20e703w74s.jpg" alt=""></p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">// 启动命令</div><div class="line">jj → 进入命令行模式(必须配置好上面的操作)</div><div class="line">i → <span class="symbol">Insert</span> 模式</div><div class="line"></div><div class="line">//选取</div><div class="line">v 开启选取模式，关闭选取模式</div><div class="line"></div><div class="line"></div><div class="line">// 简单的移动光标</div><div class="line">w →移动光标到下一个单词的词首</div><div class="line">e →移动光标到下一个单词结尾</div><div class="line">b →移动光标到上一个单词的词首</div><div class="line">k 向上移动</div><div class="line">j 向下移动</div><div class="line">h 向左移动光标</div><div class="line">l 向右移动光标</div><div class="line"><span class="number">10</span>l 向右移动<span class="number">10</span>个字符（依此类推）</div><div class="line"><span class="number">0</span> → 数字零，到行头</div><div class="line">$ → 到本行行尾</div><div class="line">gg → 到顶部</div><div class="line"><span class="symbol">G</span>  → 到尾部</div><div class="line"><span class="symbol">H</span> →移动光标到屏幕的首行.</div><div class="line"><span class="symbol">M</span> →移动光标到屏幕的中间一行.</div><div class="line"><span class="symbol">L</span> → 移动光标到屏幕的尾行.</div><div class="line"></div><div class="line"></div><div class="line">n空格(n代表数字) → 光标向右移动n个字符</div><div class="line"></div><div class="line"><span class="symbol">H</span>/<span class="symbol">M</span>/<span class="symbol">L</span>:分别顶部、中间、和底部</div><div class="line"></div><div class="line">[相对于光标滚屏]</div><div class="line">”zt“、”zz“和”zb“:把光标所在行移动窗口的顶端、中间或底部</div><div class="line"></div><div class="line">// 各种插入 </div><div class="line">i → 在光标前输入</div><div class="line"><span class="symbol">I</span> → 在当前行首插入</div><div class="line">a → 在光标后插入</div><div class="line"><span class="symbol">A</span> → 在当前行尾插入</div><div class="line">o → 在当前行后插入一个新行</div><div class="line"><span class="symbol">O</span> → 在当前行前插入一个新行</div><div class="line">cw → 替换从光标所在位置后到一个单词结尾的字符</div><div class="line"></div><div class="line">// 删除</div><div class="line">x →删除当前光标所在的一个字符。</div><div class="line"><span class="symbol">X</span> →删除前一个字符</div><div class="line">nx(n代表数字) → 向后删除n个字符</div><div class="line">cc → 删除一行并进入插入模式。(更常用一些)</div><div class="line">dd → 删除当前行（还有剪切功能）</div><div class="line"><span class="symbol">D</span> → 删除当前字符到后面的所有字符(如果后面没有字符，则向前删除)</div><div class="line">ndd(n代表数字) → 删除n行</div><div class="line">d1G → 删除光标所在行到第一行的所有数据</div><div class="line">dG → 删除光标以后所有行数据</div><div class="line"></div><div class="line">// 拷贝、粘贴</div><div class="line"><span class="symbol">P</span> → 粘贴(p/<span class="symbol">P</span>都可以，p是表示在当前位置之后，<span class="symbol">P</span>表示在当前位置之前)</div><div class="line">yw  → 表示拷贝从当前光标到光标所在单词结尾的内容.</div><div class="line">dw  → 表示删除从当前光标到光标所在单词结尾的内容.</div><div class="line">y0  → 表示拷贝从当前光标到光标所在行首的内容.</div><div class="line">d0  → 表示删除从当前光标到光标所在行首的内容.</div><div class="line">y$  → 表示拷贝从当前光标到光标所在行尾的内容.</div><div class="line">d$/<span class="symbol">D</span>  → 表示删除从当前光标到光标所在行尾的内容.</div><div class="line">yfa → 表示拷贝从当前光标到光标后面的第一个a字符之间的内容.</div><div class="line">dfa → 表示删除从当前光标到光标后面的第一个a字符之间的内容.</div><div class="line">yy → 拷贝当前行当行</div><div class="line">dd → 表示删除光标所在行.</div><div class="line"></div><div class="line">yG →复制光标所在行到最后一行的所有数据</div><div class="line">yj →复制光标当前行和其下一行，共两行</div><div class="line">yk →复制光标当前行和其上一行，共两行</div><div class="line"><span class="symbol">J</span> →将光标所在行与下一行的数据结合成一行 </div><div class="line"><span class="number">3</span>p → 粘贴文本<span class="number">3</span>次</div><div class="line">. → 重复上一个命令—— <span class="number">100</span> “desu “.</div><div class="line"><span class="number">3.</span> → 重复 <span class="number">3</span> 次 “desu” (注意：不是 <span class="number">300</span>，你看，<span class="symbol">VIM</span>多聪明啊).</div><div class="line"></div><div class="line">//匹配括号移动</div><div class="line"><span class="comment">% → 匹配括号移动，包括 (, &#123;, [. （陈皓注：你需要把光标先移到括号上）</span></div><div class="line">* 和 # → 匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）</div><div class="line">/word → 在光标之后查找word字符串  word的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个，按shift+n到上一个）</div><div class="line">?word → 在光标之前查找word字符串   </div><div class="line"></div><div class="line">// 回退</div><div class="line">u → 回退</div><div class="line"></div><div class="line">// 打开/保存/退出/改变文件</div><div class="line">:w → 存盘</div><div class="line"><span class="symbol">ZZ</span> → 快速保存退出</div></pre></td></tr></table></figure>
<h2 id="移动到指定字符"><a href="#移动到指定字符" class="headerlink" title="[ 移动到指定字符 ]"></a>[ 移动到指定字符 ]</h2><p>上面的命令都是行间移动(除h, l外)，也就是从当前行移动到另外一行。如果我们想在当前行内快速移动，可以使用f, t, F, T命令。</p>
<p>“f“命令移动到光标右边的指定字符上，例如，”fx“，会把移动到光标右边的第一个’x’字符上。”F“命令则反方向查找，也就是移动到光标左边的指定字符上。(<strong>这个更常用</strong>)</p>
<p>“t“命令和”f“命令的区别在于，它移动到光标右边的指定字符之前。例如，”tx“会移动到光标右边第一个’x’字符的前面。”T“命令是”t“命令的反向版本，它移动到光标右边的指定字符之后。</p>
<p>这四个命令只在当前行中移动光标，光标不会跨越回车换行符。</p>
<p>可以在命令前面使用数字，表示倍数。例如，”3fx“表示移动到光标右边的第3个’x’字符上。</p>
<p>“;“命令重复前一次输入的f, t, F, T命令，而”,“命令会反方向重复前一次输入的f, t, F, T命令。这两个命令前也可以使用数字来表示倍数。</p>
<p>更多请参考：<br><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">http://coolshell.cn/articles/5426.html</a><br><a href="http://feliving.github.io/Sublime-Text-3-Documentation/vintage.html" target="_blank" rel="external">http://feliving.github.io/Sublime-Text-3-Documentation/vintage.html</a><br><a href="http://easwy.com/blog/archives/advanced-vim-skills-basic-move-method/" target="_blank" rel="external">http://easwy.com/blog/archives/advanced-vim-skills-basic-move-method/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- 继承与原型链]]></title>
      <url>http://meiminjun.github.io/2016/07/26/javascript-%E4%B8%A4%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#使用_class_关键字" target="_blank" rel="external">继承与原型链</a></h1><p>对于那些熟悉基于类的面向对象语言（Java 或者 C++）的开发者来说，JavaScript 的语法是比较怪异的，这是由于 JavaScript 是一门动态语言，而且它没有类的概念（ ES6 新增了class 关键字，但只是语法糖，JavaScript 仍旧是基于原型）。</p>
<p>涉及到继承这一块，Javascript 只有一种结构，那就是：对象。在 javaScript 中，每个对象都有一个指向它的原型（prototype）对象的内部链接。这个原型对象又有自己的原型，直到某个对象的原型为 null 为止（也就是不再有原型指向），组成这条链的最后一环。这种一级一级的链结构就称为原型链（prototype chain）。</p>
<p>虽然，原型继承经常被视作 JavaScript 的一个弱点，但事实上，原型继承模型比经典的继承模型更强大。尽管在原型模型上构建一个标准的类模型是相当琐碎的，但如果采取其他方式实现的话会更加困难。</p>
<a id="more"></a>
<h2 id="javascript-之-原型继承"><a href="#javascript-之-原型继承" class="headerlink" title="javascript 之 原型继承"></a>javascript 之 原型继承</h2><p>原型继承是让父对象作为子对象的原型，从而达到继承的目的：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  F.prototype = o;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 要继承的父对象</span></div><div class="line"><span class="built_in">var</span> <span class="built_in">parent</span> = &#123;</div><div class="line">  <span class="attribute">name</span>: <span class="string">"Papa"</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 新对象</span></div><div class="line"><span class="built_in">var</span> child = object(<span class="built_in">parent</span>);</div><div class="line"><span class="comment">// 测试</span></div><div class="line"><span class="built_in">console</span>.log(child.name); <span class="comment">// "Papa"</span></div><div class="line"></div><div class="line"><span class="comment">// 父构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// an "own" property</span></div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"Adam"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 给原型添加新属性</span></div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 创建新person</span></div><div class="line"><span class="built_in">var</span> papa = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="comment">// 继承</span></div><div class="line"><span class="built_in">var</span> kid = object(papa);</div><div class="line"><span class="built_in">console</span>.log(kid.getName()); <span class="comment">// "Adam"</span></div><div class="line"></div><div class="line"><span class="comment">// 父构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; </div><div class="line">   <span class="comment">// an "own" property  </span></div><div class="line">     <span class="keyword">this</span>.name = <span class="string">"Adam"</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 给原型添加新属性</span></div><div class="line"> Person.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="keyword">return</span> <span class="keyword">this</span>.name;&#125;;</div><div class="line"> </div><div class="line"> <span class="comment">// 继承</span></div><div class="line"> <span class="built_in">var</span> kid = object(Person.prototype);</div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> kid.getName); <span class="comment">// "function",因为是在原型里定义的</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> kid.name);  <span class="comment">// "undefined", 因为只继承了原型</span></div></pre></td></tr></table></figure>
<p>同时，ECMAScript5也提供了类似的一个方法叫做Object.create用于继承对象，用法如下：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 使用新版的ECMAScript 5提供的功能 */</span></div><div class="line"><span class="built_in">var</span> child = <span class="built_in">Object</span>.create(<span class="built_in">parent</span>);</div><div class="line"><span class="built_in">var</span> child = <span class="built_in">Object</span>.create(<span class="built_in">parent</span>, &#123; </div><div class="line">   <span class="attribute">age</span>: &#123; <span class="attribute">value</span>: <span class="number">2</span>&#125; <span class="comment">// ECMA5 descriptor</span></div><div class="line">   &#125;);</div><div class="line"><span class="built_in">console</span>.log(child.hasOwnProperty(<span class="string">"age"</span>)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>而且，也可以更细粒度地在第二个参数上定义属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.varA = a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，</span></div><div class="line"><span class="comment">// 那么将 varA 加入到原型（prototype）中的目的是什么？</span></div><div class="line">A.prototype = &#123;</div><div class="line">  <span class="attr">varA</span> : <span class="literal">null</span>,  <span class="comment">// 既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉？</span></div><div class="line">      <span class="comment">// 也许作为一种在隐藏类中优化分配空间的考虑？</span></div><div class="line">      <span class="comment">// https://developers.google.com/speed/articles/optimizing-javascript#Initializing instance variables</span></div><div class="line">      <span class="comment">// 将会验证如果 varA 在每个实例不被特别初始化会是什么情况。</span></div><div class="line">  doSomething : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">11123</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  A.call(<span class="keyword">this</span>, a);</div><div class="line">  <span class="keyword">this</span>.varB = b;</div><div class="line">&#125;</div><div class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype, &#123;</div><div class="line">  <span class="attr">varB</span> : &#123;</div><div class="line">    <span class="attr">value</span>: <span class="literal">null</span>, </div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span> </div><div class="line">  &#125;,</div><div class="line">  <span class="attr">doSomething</span> : &#123; </div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// override</span></div><div class="line">      A.prototype.doSomething.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// call super</span></div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, </div><div class="line">    <span class="attr">writable</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">B.prototype.constructor = B;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</div><div class="line">b.doSomething();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b);</div></pre></td></tr></table></figure>
<h2 id="javascript-之-类继承-构造函数继承-示例"><a href="#javascript-之-类继承-构造函数继承-示例" class="headerlink" title="javascript 之 类继承(构造函数继承)示例"></a>javascript 之 类继承(构造函数继承)示例</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"Shape moved."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">rect</span> = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Rectangle <span class="comment">//true.</span></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Shape <span class="comment">//true.</span></div><div class="line"></div><div class="line"><span class="built_in">rect</span>.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//Outputs, "Shape moved."</span></div></pre></td></tr></table></figure>
<p>深入理解继承：</p>
<p>参考：深入理解JavaScript系列（46）：代码复用模式（推荐篇）</p>
<ul>
<li><a href="http://www.ituring.com.cn/article/56184" target="_blank" rel="external">http://www.ituring.com.cn/article/56184</a></li>
</ul>
<p>阮一峰之面向对象：</p>
<ul>
<li><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank" rel="external">Javascript 面向对象编程（一）：封装</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">Javascript面向对象编程（二）：构造函数的继承</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="external">Javascript面向对象编程（三）：非构造函数的继承</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- object-assign方法]]></title>
      <url>http://meiminjun.github.io/2016/07/26/javascript-object-assign%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="javascript-之-object-assign-的方法介绍和示例"><a href="#javascript-之-object-assign-的方法介绍和示例" class="headerlink" title="javascript 之 object-assign 的方法介绍和示例"></a>javascript 之 object-assign 的方法介绍和示例</h1><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign()</a></h2><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>Object.assign(target, …sources)</p>
</blockquote>
<p>target：目标对象。</p>
<p>sources：任意多个对象</p>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>目标对象会被返回。</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象身上。该方法使用源对象的 [ [ Get ] ] 和目标对象的 [ [ Set ] ]，所以它会调用相关 getter 和 setter。因此，它分配属性不仅仅是复制或定义新的属性。如果合并源包含了 getter，那么该方法就不适合将新属性合并到原型里。假如是拷贝属性定义到原型里，包括它们的可枚举性，那么应该使用 Object.getOwnPropertyDescriptor() 和 Object.defineProperty() 。</p>
<p>String类型和 Symbol 类型的属性都会被拷贝。</p>
<p>注意，在属性拷贝过程中可能会产生异常，比如目标对象的某个只读属性和源对象的某个属性同名，这时该方法会抛出一个 TypeError 异常，拷贝过程中断，已经拷贝成功的属性不会受到影响，还未拷贝的属性将不会再被拷贝。</p>
<blockquote>
<p>注意， Object.assign 会跳过那些值为 null 或 undefined 的源对象。</p>
</blockquote>
<a id="more"></a>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>复制一个object</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="comment">&#123; a: 1 &#125;</span>;</div><div class="line"><span class="keyword">var</span> <span class="keyword">copy</span> = Object.assign(<span class="comment">&#123;&#125;</span>, obj);</div><div class="line">console.log(<span class="keyword">copy</span>); <span class="comment">// &#123; a: 1 &#125;</span></div></pre></td></tr></table></figure>
<p>合并 objects</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);</div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></div></pre></td></tr></table></figure>
<p>继承属性和不可枚举属性是不能拷贝的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;, &#123; <span class="comment">// foo 是个继承属性。</span></div><div class="line">    bar: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">2</span>  <span class="comment">// bar 是个不可枚举属性。</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">baz</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">3</span>,</div><div class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>  <span class="comment">// baz 是个自身可枚举属性。</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</div><div class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; baz: 3 &#125;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- object-create方法]]></title>
      <url>http://meiminjun.github.io/2016/07/26/javascript-object-create%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="javascript-之-object-create的方法介绍和示例"><a href="#javascript-之-object-create的方法介绍和示例" class="headerlink" title="javascript 之 object-create的方法介绍和示例"></a>javascript 之 object-create的方法介绍和示例</h1><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">Object.create()</a></h2><p>Object.create() 方法创建一个拥有指定原型和若干个指定属性的对象。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>Object.create(proto, [ propertiesObject ])</p>
</blockquote>
<p>proto：一个对象，作为新创建对象的原型。。</p>
<p>propertiesObject：可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。</p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>如果 proto 参数不是 null 或一个对象值，则抛出一个 TypeError 异常。</p>
<a id="more"></a>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>使用Object.create实现类式继承</li>
</ul>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"Shape moved."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="built_in">rect</span> = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Rectangle <span class="comment">//true.</span></div><div class="line"><span class="built_in">rect</span> <span class="keyword">instanceof</span> Shape <span class="comment">//true.</span></div><div class="line"></div><div class="line"><span class="built_in">rect</span>.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//Outputs, "Shape moved."</span></div></pre></td></tr></table></figure>
<ul>
<li>使用Object.create 的 propertyObject 参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o;</div><div class="line"></div><div class="line"><span class="comment">// 创建一个原型为null的空对象</span></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line"></div><div class="line"></div><div class="line">o = &#123;&#125;;</div><div class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</div><div class="line"></div><div class="line"></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</div><div class="line">  <span class="comment">// foo会成为所创建对象的数据属性</span></div><div class="line">  foo: &#123; <span class="attr">writable</span>:<span class="literal">true</span>, <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="attr">value</span>: <span class="string">"hello"</span> &#125;,</div><div class="line">  <span class="comment">// bar会成为所创建对象的访问器属性</span></div><div class="line">  bar: &#123;</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"Setting `o.bar` to"</span>, value) &#125;</div><div class="line">&#125;&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">o = <span class="keyword">new</span> Constructor();</div><div class="line"><span class="comment">// 上面的一句就相当于:</span></div><div class="line">o = <span class="built_in">Object</span>.create(Constructor.prototype);</div><div class="line"><span class="comment">// 当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></div><div class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></div><div class="line">o.p = <span class="number">24</span></div><div class="line">o.p</div><div class="line"><span class="comment">//42</span></div><div class="line"></div><div class="line">o.q = <span class="number">12</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;</div><div class="line">   <span class="built_in">console</span>.log(prop)</div><div class="line">&#125;</div><div class="line"><span class="comment">//"q"</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> o.p</div><div class="line"><span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="comment">//创建一个可写的,可枚举的,可配置的属性p</span></div><div class="line">o2 = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125; &#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git常用命令清单]]></title>
      <url>http://meiminjun.github.io/2016/07/24/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p><img src="http://image.beekka.com/blog/2014/bg2014061202.jpg" alt=""></p>
<ul>
<li>git clone：<br><strong>远程操作的第一步，通常是从远程主机克隆一个版本库</strong></li>
<li>git remote：<br><strong>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。</strong></li>
<li>git fetch：<br><strong>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</strong></li>
<li>git pull：<br><strong>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。</strong></li>
<li>git push：<br><strong>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</strong></li>
</ul>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<a id="more"></a>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></div><div class="line">git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></div><div class="line">git init [project-name]</div><div class="line"></div><div class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></div><div class="line">git <span class="keyword">clone</span> <span class="title">[url</span>]</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的Git配置</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span><span class="built_in">--list</span></div><div class="line"></div><div class="line"><span class="comment"># 编辑Git配置文件</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span>-e [<span class="built_in">--global]</span></div><div class="line"></div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span>[<span class="built_in">--global]</span> <span class="string">user.</span><span class="string">name </span><span class="string">"[name]"</span></div><div class="line">$ <span class="string">git </span><span class="string">config </span>[<span class="built_in">--global]</span> <span class="string">user.</span><span class="string">email </span><span class="string">"[email address]"</span></div></pre></td></tr></table></figure>
<h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> [file1] [file2] ...</span></div><div class="line"></div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> [dir]</span></div><div class="line"></div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line"></div><div class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></div><div class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line">$ git <span class="keyword">add</span><span class="bash"> -p</span></div><div class="line"></div><div class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 提交暂存区到仓库区</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="meta"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="meta"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"><span class="meta"># 提交时显示所有diff信息</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="meta"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="meta"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="meta"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有本地分支</span></div><div class="line"><span class="variable">$ </span>git branch</div><div class="line"></div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line"><span class="variable">$ </span>git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line"><span class="variable">$ </span>git branch -a</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></div><div class="line"><span class="variable">$ </span>git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></div><div class="line"><span class="variable">$ </span>git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向指定commit</span></div><div class="line"><span class="variable">$ </span>git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line"><span class="variable">$ </span>git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line"><span class="variable">$ </span>git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line"><span class="variable">$ </span>git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line"><span class="variable">$ </span>git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line"><span class="variable">$ </span>git merge [branch]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line"><span class="variable">$ </span>git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line"><span class="variable">$ </span>git branch -d [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line"><span class="variable">$ </span>git push origin --delete [branch-name]</div><div class="line"><span class="variable">$ </span>git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git <span class="keyword">tag</span></div><div class="line"></div><div class="line"><span class="title"># 新建一个tag</span>在当前commit</div><div class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程tag</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 提交指定tag</span></div><div class="line">$ git push [remote] [<span class="keyword">tag</span>]</div><div class="line"></div><div class="line"><span class="comment"># 提交所有tag</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向某个tag</span></div><div class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</div></pre></td></tr></table></figure>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> <span class="comment">--stat</span></div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD <span class="comment">--pretty=format:%s</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD <span class="comment">--grep feature</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> <span class="comment">--follow [file]</span></div><div class="line">$ git whatchanged [<span class="built_in">file</span>]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [<span class="built_in">file</span>]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> <span class="number">-5</span> <span class="comment">--pretty --oneline</span></div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [<span class="built_in">file</span>]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff <span class="comment">--cached [file]</span></div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [<span class="keyword">first</span>-branch]...[<span class="keyword">second</span>-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff <span class="comment">--shortstat "@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show <span class="comment">--name-only [commit]</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># 下载远程仓库的所有变动</span></div><div class="line"><span class="variable">$ </span>git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程仓库</span></div><div class="line"><span class="variable">$ </span>git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程仓库的信息</span></div><div class="line"><span class="variable">$ </span>git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line"><span class="variable">$ </span>git remote add [shortname] [url]</div><div class="line"></div><div class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line"><span class="variable">$ </span>git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line"><span class="variable">$ </span>git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line"><span class="variable">$ </span>git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line"><span class="variable">$ </span>git push [remote] --all</div></pre></td></tr></table></figure>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></div><div class="line"><span class="variable">$ </span>git checkout [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line"><span class="variable">$ </span>git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line"><span class="variable">$ </span>git checkout .</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line"><span class="variable">$ </span>git reset [file]</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line"><span class="variable">$ </span>git reset --hard</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line"><span class="variable">$ </span>git reset [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line"><span class="variable">$ </span>git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line"><span class="variable">$ </span>git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line"><span class="variable">$ </span>git revert [commit]</div><div class="line"></div><div class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></div><div class="line"><span class="variable">$ </span>git stash</div><div class="line"><span class="variable">$ </span>git stash pop</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line"><span class="variable">$ </span>git archive</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm 模块管理器]]></title>
      <url>http://meiminjun.github.io/2016/07/13/npm%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h1 id="npm-模块管理器"><a href="#npm-模块管理器" class="headerlink" title="npm 模块管理器"></a>npm 模块管理器</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功</p>
<ul>
<li><p>npm命令列表：npm help</p>
</li>
<li><p>查看各个命令的简单用法：npm l</p>
</li>
</ul>
<a id="more"></a>
<h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><p>npm init用来初始化生成一个新的package.json文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。</p>
<p>如果使用了-f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的package.json文件。</p>
<h2 id="npm-set"><a href="#npm-set" class="headerlink" title="npm set"></a>npm set</h2><p>npm set用来设置环境变量。</p>
<blockquote>
<p> npm set init-author-name ‘Your name’<br> npm set init-author-email ‘Your email’<br> npm set init-author-url ‘<a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a>‘<br> npm set init-license ‘MIT’</p>
</blockquote>
<p>上面命令等于为npm init设置了默认值，以后执行npm init的时候，package.json的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行npm config。</p>
<p>$ npm set save-exact true<br>上面命令设置加入模块时，package.json将记录模块的确切版本，而不是一个可选的版本范围。</p>
<h2 id="npm-info"><a href="#npm-info" class="headerlink" title="npm info"></a>npm info</h2><p>npm info命令可以查看每个模块的具体信息。比如，查看underscore模块的信息。</p>
<ul>
<li>全局更新：npm update -g gulp</li>
</ul>
<blockquote>
<p>npm info underscore</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">name</span>: <span class="string">'underscore'</span>,</div><div class="line">  <span class="attribute">description</span>: <span class="string">'JavaScript\'</span>s functional programming helper library.',</div><div class="line">  <span class="string">'dist-tags'</span>: &#123; <span class="attribute">latest</span>: <span class="string">'1.5.2'</span>, <span class="attribute">stable</span>: <span class="string">'1.5.2'</span> &#125;,</div><div class="line">  <span class="attribute">repository</span>:</div><div class="line">   &#123; <span class="attribute">type</span>: <span class="string">'git'</span>,</div><div class="line">     <span class="attribute">url</span>: <span class="string">'git://github.com/jashkenas/underscore.git'</span> &#125;,</div><div class="line">  <span class="attribute">homepage</span>: <span class="string">'http://underscorejs.org'</span>,</div><div class="line">  <span class="attribute">main</span>: <span class="string">'underscore.js'</span>,</div><div class="line">  <span class="attribute">version</span>: <span class="string">'1.5.2'</span>,</div><div class="line">  <span class="attribute">devDependencies</span>: &#123; <span class="attribute">phantomjs</span>: <span class="string">'1.9.0-1'</span> &#125;,</div><div class="line">  <span class="attribute">licenses</span>:</div><div class="line">   &#123; <span class="attribute">type</span>: <span class="string">'MIT'</span>,</div><div class="line">     <span class="attribute">url</span>: <span class="string">'https://raw.github.com/jashkenas/underscore/master/LICENSE'</span> &#125;,</div><div class="line">  <span class="attribute">files</span>:</div><div class="line">   [ <span class="string">'underscore.js'</span>,</div><div class="line">     <span class="string">'underscore-min.js'</span>,</div><div class="line">     <span class="string">'LICENSE'</span> ],</div><div class="line">  <span class="attribute">readmeFilename</span>: <span class="string">'README.md'</span>&#125;</div></pre></td></tr></table></figure>
<p>上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="built_in">info</span> underscore description</div><div class="line">JavaScript's functional programming helper library.</div><div class="line"></div><div class="line">$ npm <span class="built_in">info</span> underscore homepage</div><div class="line">ht<span class="symbol">tp:</span>//underscorejs.org</div><div class="line"></div><div class="line">$ npm <span class="built_in">info</span> underscore version</div><div class="line"><span class="number">1.5</span>.<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h2><p>npm search命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p>
<p>$ npm search &lt;搜索词&gt;&lt;/搜索词&gt;</p>
<p>下面是一个例子。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm search <span class="keyword">node</span><span class="title">-gyp</span></div><div class="line">// NAME                  DESCRIPTION</div><div class="line">// autogypi              Autogypi handles dependencies for <span class="keyword">node</span><span class="title">-gyp</span> projects.</div><div class="line">// grunt-<span class="keyword">node</span><span class="title">-gyp</span>        Run <span class="keyword">node</span><span class="title">-gyp</span> commands from Grunt.</div><div class="line">// gyp-io                Temporary solution to let <span class="keyword">node</span><span class="title">-gyp</span> run `rebuild` under…</div><div class="line">// ...</div></pre></td></tr></table></figure></p>
<h2 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h2><p>npm list命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p>
<blockquote>
<p>npm list</p>
</blockquote>
<p>加上global参数，会列出全局安装的模块。</p>
<blockquote>
<p>npm list -global</p>
</blockquote>
<h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Node模块采用npm install命令安装。</p>
<p>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如npm和grunt。“本地安装”指的是将一个模块下载到当前项目的node_modules子目录，然后只有在项目目录之中，才能调用这个模块。</p>
<p>本地安装</p>
<blockquote>
<p>npm install <package></package></p>
</blockquote>
<p>全局安装</p>
<blockquote>
<p>npm install -global <package><br>npm install -g <package></package></package></p>
</blockquote>
<p><strong>npm install也支持直接输入Github代码库地址。</strong></p>
<blockquote>
<p>npm install git://github.com/package/path.git<br>npm install git://github.com/package/path.git#0.1.0</p>
</blockquote>
<p>安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>
<p>如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用-f或–force参数。</p>
<blockquote>
<p>npm install <packagename> –force</packagename></p>
</blockquote>
<p>如果你希望，所有模块都要强制重新安装，那就删除node_modules目录，重新执行npm install。</p>
<blockquote>
<p>rm -rf node_modules<br>npm install</p>
</blockquote>
<h3 id="安装不同版本"><a href="#安装不同版本" class="headerlink" title="安装不同版本"></a>安装不同版本</h3><p>install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。</p>
<blockquote>
<p>npm install sax@latest<br>npm install sax@0.1.1<br>npm install sax@”&gt;=0.1.0 </p>
</blockquote>
<p>如果使用–save-exact参数，会在package.json文件指定安装模块的确切版本。</p>
<blockquote>
<p>npm install readable-stream –save –save-exact</p>
</blockquote>
<p>install命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中。</p>
<ul>
<li>–save：模块名将被添加到dependencies，可以简化为参数-S。</li>
<li>–save-dev: 模块名将被添加到devDependencies，可以简化为参数-D。</li>
</ul>
<blockquote>
<p>npm install sax –save<br>npm install node-tap –save-dev</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>npm install sax -S<br>npm install node-tap -D</p>
</blockquote>
<p>如果要安装beta版本的模块，需要使用下面的命令。</p>
<p>安装最新的beta版</p>
<blockquote>
<p>npm install <module-name>@beta (latest beta)</module-name></p>
</blockquote>
<p>安装指定的beta版</p>
<blockquote>
<p>npm install <module-name>@1.3.1-beta.3</module-name></p>
</blockquote>
<p>npm install默认会安装dependencies字段和devDependencies字段中的所有模块，如果使用production参数，可以只安装dependencies字段的模块。</p>
<blockquote>
<p>npm install –production</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>NODE_ENV=production npm install</p>
</blockquote>
<p>一旦安装了某个模块，就可以在代码中用require命令调用这个模块。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows常用快捷键]]></title>
      <url>http://meiminjun.github.io/2016/07/09/window%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h1 id="windows-常用快捷键"><a href="#windows-常用快捷键" class="headerlink" title="windows 常用快捷键"></a>windows 常用快捷键</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>删除： ctrl +　d<br>新建文件夹： ctrl + shift + d<br>返回上层目录： backspace</p>
<h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><p>锁屏： win + l<br>运行界面： win + r<br>快速打开文件系统： win + e<br>Win + D：显示桌面。<br>Win + space：显示桌面<br>Win + M：最小化所有窗口。<br>Win + SHIFT + M：还原最小化窗口到桌面上。<br>Win + E：打开我的电脑<br>Win + F：搜索文件或文件夹。</p>
<h2 id="Windows-Explorer相关快捷键"><a href="#Windows-Explorer相关快捷键" class="headerlink" title="Windows Explorer相关快捷键"></a>Windows Explorer相关快捷键</h2><p>Alt+D 选中地址栏（搭配Clover 的ctrl+t 新建标签  非常不错）<br>Ctrl+E 选中搜索框（定位到搜索框）<br>Ctrl+N 打开新窗口<br>Ctrl+Shift+N 新建文件夹</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome神器Vimium快捷键学习记录]]></title>
      <url>http://meiminjun.github.io/2016/07/09/Chrome%E7%A5%9E%E5%99%A8Vimium%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f5nohpact9j20m40glq77.jpg" alt=""></p>
<h1 id="Vimium使用快捷键总结"><a href="#Vimium使用快捷键总结" class="headerlink" title="Vimium使用快捷键总结"></a>Vimium使用快捷键总结</h1><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>F6 ：在当前的标签页直接输入一个新的网址</p>
<p><strong>o：打开 URl、书签或历史记录 </strong><br><strong> O：在新标签页中打开 URl、书签或历史记录</strong></p>
<p><strong> b：在当前页打开一个书签。（只会查找书签）</strong><br><strong> B：在新的标签页打开一个书签 </strong></p>
<p>F：在新的页面打开一个新的链接。<br>f：在当前的页面打开一个新的链接。</p>
<h2 id="标签页操作"><a href="#标签页操作" class="headerlink" title="标签页操作"></a>标签页操作</h2><p>K，gt：跳转到右边的一个标签页<br>J，gT：跳转到左边的一个标签页<br>x：关闭当前的标签页<br>X：恢复刚刚关闭的标签页<br>t：创建一个新的标签页<br>？：显示命令的帮助提示（再按一次关闭）</p>
<h2 id="页面浏览"><a href="#页面浏览" class="headerlink" title="页面浏览"></a>页面浏览</h2><p>r：重新刷新<br>j、k、h、l：向下/上/左/右滚动<br>gg 和 G：移至页顶/页底<br>H：后退<br>L：前进<br>d：向下滚动（相当于pageDown）<br>u：向上滚动（相当于pageUp）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome常用设置]]></title>
      <url>http://meiminjun.github.io/2016/07/09/chrome%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="本地导入书签-避免那种傻瓜式导入会另建立一个文件夹"><a href="#本地导入书签-避免那种傻瓜式导入会另建立一个文件夹" class="headerlink" title="本地导入书签(避免那种傻瓜式导入会另建立一个文件夹)"></a>本地导入书签(避免那种傻瓜式导入会另建立一个文件夹)</h2><p>当更新到最新版本的chrome时候，经常要导入以前版本的chrome书签</p>
<p>以下是本地bookmark地址，直接替换到你新的chrome对应的安装包位置就可以生效</p>
<p>xp/2003:<br>C:\Documents and Settings\Administrator\Local Settings\Application Data\Google\Chrome\User Data\Default\Bookmarks</p>
<p>win7:<br>C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\Bookmarks</p>
<h2 id="跨域设置"><a href="#跨域设置" class="headerlink" title="跨域设置"></a>跨域设置</h2><p>老版本：</p>
<p>–disable-web-security</p>
<p>chrome49版本以后需加入：</p>
<p>–disable-web-security –user-data-dir</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端优化]]></title>
      <url>http://meiminjun.github.io/2016/07/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="Google-Developers：移动Web优化指南"><a href="#Google-Developers：移动Web优化指南" class="headerlink" title="Google Developers：移动Web优化指南"></a>Google Developers：移动Web优化指南</h1><h3 id="（原标题：用PageSpeed进行移动页面性能分析）"><a href="#（原标题：用PageSpeed进行移动页面性能分析）" class="headerlink" title="（原标题：用PageSpeed进行移动页面性能分析）"></a>（原标题：用PageSpeed进行移动页面性能分析）</h3><p>注：由于这篇文章单独拿出来看与PageSpeed几乎无关，故改为更合适的题目</p>
<p>PageSpeed Insights可以用于分析一个页面是否遵循了我们的建议——“在移动网络下一秒之内渲染完毕”。研究已经显示，超过一秒的渲染时间会打断用户的思绪流，造成糟糕的用户体验。我们的目标是，保持用户停留在页面上，并且提供最佳的体验，不管用户使用什么设备，或是在何种网络下浏览页面。</p>
<p>满足一秒渲染完毕的标准是很难的。但是幸运的是，我们没有必要让整个页面都满足这个条件，换句话说，<strong>我们要首屏（above the fold，ATF）满足一秒渲染的条件，这样可以让用户尽可能快的与页面进行交互</strong>。然后，当用户在阅读第一页的内容时，剩下的页面可在后台逐渐的加载。</p>
<a id="more"></a>
<h3 id="适应高延时的移动网络"><a href="#适应高延时的移动网络" class="headerlink" title="适应高延时的移动网络"></a>适应高延时的移动网络</h3><p>在移动设备上满足“一秒首屏渲染标准”（ATF）相对于在其他设备上是一个独特的挑战。用户可能会在2G、3G或4G的不同网络下访问你的网站。与有线网络相比，无线网络延迟可能会非常高，并且消耗掉1秒（1000ms）渲染首屏时间中的相当一部分：</p>
<ul>
<li>3G网络会有 200-300ms 的延迟</li>
<li>4G网络会有 50-100ms 的延迟</li>
</ul>
<p>目前3G网络在世界范围内占有统治性地位，虽然4G网络正在全世界部署，但是你仍然应该考虑到大部分的用户会在3G网络下浏览你的页面。所以，我们不得不假设每个请求平均平均会花费200ms。</p>
<p>考虑到这个因素，让我们反向的思考一下。如果我们看看一个浏览器与服务器之间通信的典型序列（sequence），我们会发现1000ms中的600ms已经被基本的网络开销占用了：DNS服务器查找域名（例如google.com）对应的IP地址的时间、用于完成TCP握手的网络延迟、还有最后发送一整条HTTP请求的网络延迟。我们只剩下了400ms！</p>
<p><img src="https://developers.google.com/speed/docs/insights/images/1stimeline.png" alt=""></p>
<h3 id="实现半秒的渲染体验"><a href="#实现半秒的渲染体验" class="headerlink" title="实现半秒的渲染体验"></a>实现半秒的渲染体验</h3><p>在减去网络延迟之后，我们的预算时间只剩下400ms，然而我们仍然有太多的事情要去做：服务器必须要去产生响应，客户端应用的代码必须要去执行，并且浏览器必须要去布局（layout）和渲染（render）内容。再考虑到这些，下面的一些标准将帮助我们在预算时间内完成任务：</p>
<dl><br><br><dt>(1) 服务器响应时间小于 200 ms </dt><br><dd>服务器响应时间是服务器向浏览器返回一个最初的HTML页面的时间，包括网络传输的用时。由于我们的时间预算非常紧张，这部分时间应该压缩到最小值——理想情况下是小于200ms，越小越好！</dd><br><br><dt>(2) 减少重定向的数量</dt><br><br><dd>额外的HTTP重定向会增加一到两个网络往返（如果需要额外的DNS查找的话就是两个），在3G网络下导致数百毫秒的延迟。因此，我们强烈建议站长减少，甚至理论上完全弃用重定向——这对于HTML文档来说尤其重要（尽可能避免“m.xxx.com”的这种重定向）</dd><br><br><dt>(3)尽可能减少首屏渲染所需要的请求数</dt><br><br><dd><br>由于TCP的慢启动算法(参考<a href="http://en.wikipedia.org/wiki/Slow-start" target="_blank" rel="external">TCP Slow Start</a>)，一个新的TCP连接不能立即使用客户端与服务器之间全部可用的带宽。因此，服务器在一个新连接的第一次数据往返时，最多可以发送10个TCP包（不超过14KB），接着服务器必须在它增加阻塞窗口和继续发送更多数据之前等待客户端确认（ACK）这些数据。<br><br>由于TCP 的这种行为，为了传输必要的数据来渲染首屏优化你的页面内容，减少需要的请求数是很重要的。理想情况下，首屏内容应该小于14KB——这允许了浏览器在第一次数据往返（roundtrip）之后就开始渲染页面。另外，我们也要注意所谓的“第一次数据往返最多10个TCP包”的限制是TCP标准的一次最近的更新：为了利用这个更新，你应该确保你的服务器升级到了最新版本。否则的话，可能受此数据往返的TCP包限制数量只有3-4个！<br></dd><br><br><dt>(4)避免在首屏部分中引入外部的阻塞的JavaScript和CSS</dt><br><br><dd><br><br>在浏览器渲染并展示一个页面给用户之前，它首先要解析这个页面。如果浏览器在解析过程中遇到了一个非异步的（同步的）或者是阻塞的外部脚本，它就不得不停止解析转而去加载这个资源。每次都遇到这种情况，都会增加一次网络往返时间，这会导致页面首次渲染的延迟。<br><br>所以说，首屏渲染所需的JavaScript和CSS需要写成行内（inline）形式，其他的JavaScript和CSS文件应该在首屏内容已经展现给用户之后再加载。<br><br></dd><br><br><dt>(5) 为浏览器的布局（layout）和渲染保留 200 ms 的时间</dt><br><br><dd>解析HTML、CSS和执行JavaScript的过程会耗费时间和客户端资源！取决于移动设备的速度和页面的复杂程度，这个过程可能会花费几百毫秒。我们的建议是为浏览器保留200ms的时间。</dd><br><br><dt>(6) 优化JavaScript的执行过程和渲染时间</dt><br><br><dd><br>复杂的脚本和低效的代码会花费几十甚至几百秒去执行——可以用内置的开发者工具去分析和优化你的代码。为了更好的入门开发者工具，看看我们的<a href="http://discover-devtools.codeschool.com/" target="_blank" rel="external">interactive course for Chrome Developer Tools.</a>吧！</dd><br><br></dl>

<aside><br><br><br><strong>注: </strong>以上并不是所有的优化手段——这只是一个实现移动端半秒渲染的最高级别标准——你也应该继续使用所有其他的优化技巧<a href="https://developers.google.com/speed/docs/insights/rules" target="_blank" rel="external">web performance best practices</a>。来<a href="https://developers.google.com/speed/pagespeed/insights" target="_blank" rel="external">PageSpeed Insights</a>去发现更进一步的优化建议吧。<br><br><br>为了更深层次的了解以上的移动端优化标准，你也可以阅读：<br><br><em> <a href="https://developers.google.com/web/fundamentals/documentation/performance/critical-rendering-path/index" target="_blank" rel="external">Web Fundamentals: Critical Rendering Path</a>.

</em> 优化关键渲染路径，打造极速移动站点 (<a href="http://bit.ly/mobilecrp" target="_blank" rel="external">slides</a>, <a href="http://www.youtube.com/watch?v=YV1nKLWoARQ" target="_blank" rel="external">video</a>).<br><br>* 极速移动站点: 技巧和最佳实践 (<a href="http://storage.googleapis.com/io-2013/presentations/239-%20Instant%20Mobile%20Websites-%20Techniques%20and%20Best%20Practices.pdf" target="_blank" rel="external">slides</a>, <a href="https://www.youtube.com/watch?v=Bzw8-ZLpwtw" target="_blank" rel="external">video</a>)<br><br></aside>


<h3 id="常见问题（FAQ）"><a href="#常见问题（FAQ）" class="headerlink" title="常见问题（FAQ）"></a>常见问题（FAQ）</h3><dl><br><br><dt>4G网络会如何影响以上的移动优化标准?</dt><br><br><dd>4G网络主要的进步之一就是更低的网络延迟。这降低了总的网络开销时间，对我们有巨大的帮助，要知道，在3G网络中，网络延迟几乎占我们“1秒钟”时间预算的一半。然而，3G目前仍然是全世界范围内主要的网络类型，并且这种情况仍然会持续几年时间——你必须用心去为3G用户优化你的页面。</dd><br><br><dt>我使用JavaScript库，比如JQuery，对此有什么建议吗？</dt><br><br><dd>许多JS库，例如JQuery，都被用来为页面添加附加的交互、动画和特效。但是，大部分的这些行为本可以在首屏内容渲染完毕之后再加入页面。可以考虑把这些JavaScript的执行和加载放在页面加载完毕之后。</dd><br><br><dt>我用JavaScript框架去构建页面，对此有什么建议吗？</dt><br><br><dd>如果页面的内容是由客户端JavaScript构建的，你应该考虑直接在页面中插入（inlining）相关的JavaScript模块，以避免额外的网络往返。类似的，使用服务端渲染可以显著提高首页（first page）的加载表现：在服务端渲染JS模板，在HTML中插入结果，然后当应用一加载完毕，就在客户端渲染模板。</dd><br><br><dt>SPDY和HTTP 2.0 会对此有什么帮助吗?</dt><br><br><dd>SPDY 和 HTTP 2.0 都旨在通过更有效的利用底层的TCP通信（多路复用、报头压缩、优先级请求）来降低页面加载的延迟时间。而且，服务端推送可以通过消除额外的网络延迟，大大地改善页面的表现。我们鼓励你考虑在你的服务器上增加对SPDY的支持，并且等标准一定稿，就切换到HTTP 2.0协议。<br>（译者注：谷歌目前已经宣布Chrome将不会继续支持SPDY协议，但是会加强支持HTTP/2。实际上，HTTP/2的内容受到SPDY极大的影响。）</dd><br><br><dt>我应该如何去找到那些关键的CSS代码?</dt><br><br><dd><br>在Chrome开发者工具中，打开“Audits”面板，运行“Web页面表现报告”（Web Page Performance report），在生成的报告中，找到“移除无效CSS规则”（Remove unused CSS rules）。或者使用任何其他的第三方工具或者脚本，去确定每个页面上应用了哪些CSS选择器。</dd><br><br><dt>这些最佳实践可以实现自动化吗?</dt><br><br><dd><br>当然可以。有许多商业的或是开源的Web性能优化产品能帮助你实现以上部分或是全部的优化标准。想找到开源的解决方案，不妨看看<a href="https://developers.google.com/speed/pagespeed/optimization" target="_blank" rel="external">PageSpeed optimization tools</a>。</dd><br><br><dt>我该如何调整我的服务器去适应这些优化标准呢？</dt><br><br><dd><br>首先，确保你的服务器运行了最新版的操作系统。为了从TCP协议的最初拥塞窗口数量的增加中获益，你需要Linux kernel 2.6.39+。对于其他的操作系统，请查阅文档。<br>为了优化服务器响应时间，审查（instrument）你的代码，或是使用一个应用监测方案去确定你的瓶颈——比如，脚本运行时、数据库调用、RPC请求、渲染等等。我们的目标是在200ms内渲染出HTML响应。</dd><br><br><dt>内容安全策略（Content Security Policy）怎么样？</dt><br><br><dd><br>如果你使用CSP，那么你需要更新你的默认策略。<br>首先，应该尽可能的在任何地方禁止行内的在HTML元素上的CSS特性（例如“&lt; p style=…&gt;”），因为这可能会导致不必要的代码重复，并且会被CSP默认屏蔽（通过”style-src”中的”unsafe inline”选项取消）。如果CSP是有效的，他将会默认屏蔽任何的行内脚本标签。如果你有行内脚本，那么你需要更新CSP策略，用<a href="http://www.w3.org/TR/CSP11/#script-src" target="_blank" rel="external">script hashes or nonces</a>或者是用”unsafe-inline”去使你所有的行内脚本可以执行。如果你有行内样式，那么你需要用<a href="http://www.w3.org/TR/CSP11/#style-src" target="_blank" rel="external">style hashes or nonces</a>或者还是用”unsafe-inline”去使你的行内样式可以使用。</dd><br><br></dl>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[史上最强Sublime 笔记系列---常用快捷键]]></title>
      <url>http://meiminjun.github.io/2016/06/24/SublimeText-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f56cg7zmfvj20hm08kdhc.jpg" alt=""></p>
<p>本人很喜欢折腾工具，所以下面罗列一下自己长期以来用Sublime Text 3 的一些<strong>精选的快捷键</strong>，<strong>非常高效率</strong>的一些插件、还有<strong>时尚精美</strong>的主题,分以下三篇:</p>
<ol>
<li><p><strong> <a href="/2016/06/24/SublimeText-常用快捷键/">史上最强Sublime 笔记系列—常用快捷键</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/23/SublimeText-常用插件和主题/">史上最强Sublime 笔记系列—精选插件和UI主题</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/22/SublimeText-我的常用配置/">史上最强Sublime 笔记系列—我的常用配置</a>(持续更新中。。。)  </strong></p>
</li>
</ol>
<p><strong>各位小伙伴们，还有没有<code>高效率</code>快捷键呢？有的请留言哦！谢谢。。O(∩_∩)O</strong></p>
<blockquote>
<p><strong>熟练俺所罗列的这些快捷键操作后，开发效率至少提升</strong>一至两倍<strong>(<code>平时2个小时的项目,1小时就可以搞定了,嗨不嗨？</code>) </strong></p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="编辑区"><a href="#编辑区" class="headerlink" title="编辑区"></a>编辑区</h2><blockquote>
<ul>
<li>ctrl（cmd⌘） + N 新建文件(按tab 键也可以新建文件，第一行是文件命名)</li>
<li>ctrl（cmd⌘） + F2 设置书签/删除标签</li>
<li>F2 跳转到下一标签</li>
<li>ctrl（cmd⌘） + shift⇧ + F2  删除所有标签</li>
<li>alt + F3 全选当前字段</li>
<li>ctrl（cmd⌘） + J 合并多行为一行</li>
<li>ctrl（cmd⌘） + shift⇧ + D 复制所在行</li>
<li>ctrl（cmd⌘） +  X 剪切当前行(个人觉得可以当删除当前行用效率更高)</li>
<li>ctrl（cmd⌘） + shift⇧ + K 删除当前行</li>
<li>ctrl（cmd⌘） + shift⇧ + [ 、] 折叠代码</li>
<li>ctrl（cmd⌘） + shift⇧ + T  恢复关闭Tab</li>
<li>ctrl（cmd⌘） + shift⇧ + UP/DOWN 快速切换当前行</li>
<li>ctrl（cmd⌘） + M 快速跳转到括号另外一端</li>
<li>ctrl（cmd⌘） + shift⇧ + M 选择括号（）、大括号{}的代码</li>
<li>ctrl（cmd⌘） + tab 最近两个tab快速切换</li>
<li>ctrl（cmd⌘） + shift⇧ + tab 快速切换tab</li>
</ul>
</blockquote>
<hr>
<h2 id="搜索区"><a href="#搜索区" class="headerlink" title="搜索区"></a>搜索区</h2><blockquote>
<ul>
<li>ctrl（cmd⌘） + D 快速查找并选中</li>
<li>ctrl（cmd⌘） + F 快速查找</li>
<li>ctrl（cmd⌘） + shift⇧ + F 全局搜索</li>
<li>ctrl（cmd⌘） + :  搜索变量</li>
<li>ctrl（cmd⌘） + R 查找函数</li>
<li>ctrl（cmd⌘） + P 查找文件</li>
</ul>
</blockquote>
<hr>
<h2 id="界面区"><a href="#界面区" class="headerlink" title="界面区"></a>界面区</h2><blockquote>
<ul>
<li>alt + shift⇧ + 2 左右分两屏幕</li>
<li>alt + shift⇧ + 8 垂直分两屏幕</li>
<li>ctrl（cmd⌘） + K + B 显示/隐藏侧边栏</li>
<li>F11 全屏</li>
<li>shift⇧ + F11 进入无干扰模式</li>
</ul>
</blockquote>
<hr>
<h2 id="我最常用快捷键"><a href="#我最常用快捷键" class="headerlink" title="我最常用快捷键"></a>我最常用快捷键</h2><blockquote>
<ul>
<li><strong>ctrl（cmd⌘） + N 新建文件(按tab 键也可以新建文件，第一行是文件命名)</strong></li>
<li><strong>ctrl（cmd⌘） + D 快速查找并选</strong></li>
<li><strong>ctrl（cmd⌘） + P 查找文件</strong></li>
<li><strong>ctrl（cmd⌘） + shift⇧ + F 全局搜索</strong></li>
<li><strong>ctrl（cmd⌘） + M 快速跳转到括号另外一端</strong></li>
<li><strong>ctrl（cmd⌘） +  X 剪切当前行(个人觉得可以当删除当前行用效率更高)</strong></li>
<li><strong>ctrl（cmd⌘） + shift⇧ + M 选择括号（）、大括号{}的代码</strong></li>
<li><strong>ctrl（cmd⌘） + F2 设置书签/删除标签</strong></li>
<li><strong>F2 跳转到下一标签</strong></li>
<li><strong>ctrl（cmd⌘） + shift⇧ + F2 清除所有书签</strong></li>
<li><strong>ctrl（cmd⌘） + shift⇧ + N 新建窗口</strong></li>
<li><strong>alt + - 光标回到上次位置(向后跳转)</strong></li>
<li><strong>alt + shift⇧ + - 光标向前跳转</strong></li>
<li><strong>ctrl（cmd⌘） + tab 最近两个tab快速切换</strong></li>
</ul>
</blockquote>
<hr>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><blockquote>
<ul>
<li>ctrl（cmd⌘） + c(复制)、ctrl（cmd⌘） + x(剪切)都是针对一行的</li>
<li>ctrl（cmd⌘） + shift⇧ + v 粘贴可以保留格式</li>
<li>选中单词，按住shift⇧+”  可以快速添加两边的双引号</li>
<li>快速列选择,鼠标右键 + Shift⇧</li>
</ul>
</blockquote>
<h2 id="分享一个国外牛人的关于Sublime-Text视频"><a href="#分享一个国外牛人的关于Sublime-Text视频" class="headerlink" title="分享一个国外牛人的关于Sublime Text视频"></a>分享一个国外牛人的关于Sublime Text视频</h2><blockquote>
<p>链接: <a href="http://pan.baidu.com/s/1c1SzZhQ" target="_blank" rel="external">http://pan.baidu.com/s/1c1SzZhQ</a> 密码: s569</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[史上最强Sublime 笔记系列---精选插件和UI主题]]></title>
      <url>http://meiminjun.github.io/2016/06/23/SublimeText-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f56cg7zmfvj20hm08kdhc.jpg" alt=""></p>
<p>这篇文章主要讲的是Sublime Text 3一些<code>高效率的插件</code>和<code>漂亮的主题</code>。</p>
<ol>
<li><p><strong> <a href="/2016/06/24/SublimeText-常用快捷键/">史上最强Sublime 笔记系列—常用快捷键</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/23/SublimeText-常用插件和主题/">史上最强Sublime 笔记系列—精选插件和UI主题</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/22/SublimeText-我的常用配置/">史上最强Sublime 笔记系列—我的常用配置</a>(持续更新中。。。)  </strong></p>
</li>
</ol>
<p><strong>各位小伙伴们，还有没有你心目中<code>酷炫时尚</code>的插件呢？有的请留言哦！谢谢。。O(∩_∩)O</strong></p>
<a id="more"></a>
<hr>
<h1 id="安装package-control插件-安装之后才能安装其他插件"><a href="#安装package-control插件-安装之后才能安装其他插件" class="headerlink" title="安装package control插件(安装之后才能安装其他插件)"></a>安装package control插件(安装之后才能安装其他插件)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</div></pre></td></tr></table></figure>
<p>打开sublime text 3，按 ctrl+~或者菜单 View &gt; Show Console打开命令窗口，粘贴以上代码并回车即可。</p>
<p>然后，<strong>ctrl + shift + p</strong>  下载相关插件<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1f568lvwdzug20b606o40a.gif" alt=""></p>
<h1 id="推荐插件-基本上都是插件官网前100名以内的插件"><a href="#推荐插件-基本上都是插件官网前100名以内的插件" class="headerlink" title="推荐插件(基本上都是插件官网前100名以内的插件)"></a>推荐插件(基本上都是插件官网前100名以内的插件)</h1><h2 id="1-JsFormat-javascript代码格式化"><a href="#1-JsFormat-javascript代码格式化" class="headerlink" title="1. JsFormat (javascript代码格式化)"></a>1. JsFormat (javascript代码格式化)</h2><blockquote>
<p><strong> 默认快捷键：ctrl + shift + f </strong></p>
</blockquote>
<h2 id="2-Terminal-快速打开cmd"><a href="#2-Terminal-快速打开cmd" class="headerlink" title="2. Terminal (快速打开cmd)"></a>2. Terminal (快速打开cmd)</h2><h3 id="由于默认快捷键-ctrl-shift-t-会发生冲突-替换为：ctrl-shift-c"><a href="#由于默认快捷键-ctrl-shift-t-会发生冲突-替换为：ctrl-shift-c" class="headerlink" title="由于默认快捷键 ctrl + shift + t 会发生冲突,替换为：ctrl + shift + c"></a>由于默认快捷键 <code>ctrl + shift + t</code> 会发生冲突,替换为：ctrl + shift + c</h3><p>添加快捷键，如下:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"keys"</span>: [<span class="string">"alt+m"</span>],</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"markdown_preview"</span>,</div><div class="line">    <span class="attr">"args"</span>: &#123;<span class="attr">"target"</span>: <span class="string">"browser"</span>, <span class="attr">"parser"</span>:<span class="string">"markdown"</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-docblockr-代码注释"><a href="#3-docblockr-代码注释" class="headerlink" title="3. docblockr(代码注释)"></a>3. <a href="https://packagecontrol.io/packages/DocBlockr" target="_blank" rel="external">docblockr</a>(代码注释)</h2><p><img src="/images/blogImg/2016/06/2016-06-22-01.gif" alt="docblockr"><br><img src="/images/blogImg/2016/06/2016-06-22-02.gif" alt="docblockr"><br><img src="/images/blogImg/2016/06/2016-06-22-03.gif" alt="docblockr"><br><img src="/images/blogImg/2016/06/2016-06-22-04.gif" alt="docblockr"></p>
<h2 id="4-SublimeTmpl-快速构建模板"><a href="#4-SublimeTmpl-快速构建模板" class="headerlink" title="4. SublimeTmpl(快速构建模板)"></a>4. <a href="https://packagecontrol.io/packages/SublimeTmpl" target="_blank" rel="external">SublimeTmpl</a>(快速构建模板)</h2><blockquote>
<p><strong> 默认快捷键：</strong>   </p>
<ul>
<li><strong>ctrl+alt+h 生成html </strong> </li>
<li><strong>ctrl+alt+j 生成javascript </strong></li>
<li><strong>ctrl+alt+c 生成css </strong></li>
<li><strong>ctrl+alt+p 生成php </strong></li>
<li><strong>ctrl+alt+r 生成ruby </strong></li>
<li><strong>ctrl+alt+shift+p 生成python </strong></li>
</ul>
</blockquote>
<p>中文文档地址:<strong><a href="http://www.fantxi.com/blog/archives/sublime-template-engine-sublimetmpl/" target="_blank" rel="external">http://www.fantxi.com/blog/archives/sublime-template-engine-sublimetmpl/</a></strong></p>
<h3 id="由于ctrl-alt-p-会发生冲突-暂时禁止"><a href="#由于ctrl-alt-p-会发生冲突-暂时禁止" class="headerlink" title="由于ctrl + alt + p 会发生冲突,暂时禁止"></a>由于<code>ctrl + alt + p</code> 会发生冲突,暂时禁止</h3><p>配置如下(首选项&gt;插件设置&gt;SublimeTmpl&gt;Settings-User):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"disable_keymap_actions"</span>: <span class="string">"php"</span>, // <span class="string">"all"</span>; <span class="string">"html,css"</span></div><div class="line">    <span class="string">"date_format"</span> : <span class="string">"%Y-%m-%d %H:%M:%S"</span>,</div><div class="line">    <span class="string">"attr"</span>: &#123;</div><div class="line">        <span class="string">"author"</span>: <span class="string">"Meiminjun"</span>,</div><div class="line">        <span class="string">"email"</span>: <span class="string">"251222845@qq.com"</span>,</div><div class="line">        <span class="string">"link"</span>: <span class="string">"http://example.org"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ctrl-alt-j-有可能会发生失效-所以我就切换成另外的快捷键"><a href="#ctrl-alt-j-有可能会发生失效-所以我就切换成另外的快捷键" class="headerlink" title="ctrl + alt + j 有可能会发生失效,所以我就切换成另外的快捷键"></a>ctrl + alt + j 有可能会发生失效,所以我就切换成另外的快捷键</h3><p>添加配置如下(首选项&gt;插件配置&gt;SublimeTmpl&gt;Key Bindings-User):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"ctrl+alt+s"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"sublime_tmpl"</span>,</div><div class="line">    <span class="string">"args"</span>: &#123;<span class="string">"type"</span>: <span class="string">"js"</span>&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="5-BracketHighlighter-语法高亮"><a href="#5-BracketHighlighter-语法高亮" class="headerlink" title="5. BracketHighlighter(语法高亮)"></a>5. <a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="external">BracketHighlighter</a>(语法高亮)</h2><p><img src="/images/blogImg/2016/06/2016-06-22-05.png" alt="图片"></p>
<h2 id="6-Markdown-Preview-Markdown-预览"><a href="#6-Markdown-Preview-Markdown-预览" class="headerlink" title="6. Markdown Preview(Markdown 预览)"></a>6. <a href="https://packagecontrol.io/packages/Markdown%20Preview" target="_blank" rel="external">Markdown Preview</a>(Markdown 预览)</h2><p>添加快捷键配置：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"keys"</span>: [<span class="string">"alt+m"</span>],</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"markdown_preview"</span>,</div><div class="line">    <span class="attr">"args"</span>: &#123;<span class="attr">"target"</span>: <span class="string">"browser"</span>, <span class="attr">"parser"</span>:<span class="string">"markdown"</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sublimeLinter-jshint-语法校验"><a href="#sublimeLinter-jshint-语法校验" class="headerlink" title="[sublimeLinter-jshint]:语法校验"></a>[sublimeLinter-jshint]:语法校验</h2><ul>
<li>需先安装SublimeLinter</li>
<li>安装Node.js </li>
<li>在cmd中输入 npm install -g jshint,等待安装就好了</li>
</ul>
<p>安装成功后，重启就可以检测代码风格了</p>
<p>当然还可以自定义校验规则，在项目目录下新建一个.jshintrc的配置文件<br>在其中使用JSON格式配置校验风格。</p>
<p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//建议使用===，不使用时会有提示。</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"eqeqeq"</span>:<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="sublimeLinter-elint"><a href="#sublimeLinter-elint" class="headerlink" title="sublimeLinter-elint"></a><a href="https://github.com/roadhump/SublimeLinter-eslint" target="_blank" rel="external">sublimeLinter-elint</a></h2><p>让sublime-text 支持es6和react</p>
<p>详细说明：<a href="http://cheng.logdown.com/posts/2015/09/15/linting-react-jsx-and-es6-javascript-with-eslint" target="_blank" rel="external">http://cheng.logdown.com/posts/2015/09/15/linting-react-jsx-and-es6-javascript-with-eslint</a></p>
<h2 id="HTML-CSS-JS-Prettify-代码格式化插件"><a href="#HTML-CSS-JS-Prettify-代码格式化插件" class="headerlink" title="HTML-CSS-JS Prettify(代码格式化插件)"></a><a href="https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify" target="_blank" rel="external">HTML-CSS-JS Prettify</a>(代码格式化插件)</h2><p>HTML-CSSS-JS Prettify插件使用的是node版的js-beautify，因此需要首先安装node，node的安装请自行搜索。<br>在node安装完成后，使用npm安装js-beautify，命令 npm install -g js-beautify<br>最后Ctrl+Shift+P输入Install Package，然后输入HTML-CSS-JS Prettify进行安装</p>
<h3 id="HTML-CSS-JS-Prettify配置"><a href="#HTML-CSS-JS-Prettify配置" class="headerlink" title="HTML-CSS-JS Prettify配置"></a>HTML-CSS-JS Prettify配置</h3><p>HTML-CSS-JS Prettify配置可使用.jsbeautifyrc文件，js-beautify会在被优化代码文件的当前目录查找，如果找不到会向上级目录查找。<br>因此，可以在项目的根目录新建.jsbeautifyrc文件来配置js-beautify<br>贴一下我的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // Details: https://github.com/victorporof/Sublime-HTMLPrettify<span class="comment">#using-your-own-jsbeautifyrc-options</span></div><div class="line">  // Documentation: https://github.com/einars/js-beautify/</div><div class="line">  <span class="string">"html"</span>: &#123;</div><div class="line">    <span class="string">"allowed_file_extensions"</span>: [<span class="string">"htm"</span>, <span class="string">"html"</span>, <span class="string">"xhtml"</span>, <span class="string">"shtml"</span>, <span class="string">"xml"</span>, <span class="string">"svg"</span>,<span class="string">"aspx"</span>,<span class="string">"jsp"</span>],</div><div class="line">    <span class="string">"brace_style"</span>: <span class="string">"collapse"</span>, // [collapse|expand|end-expand|none] Put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them <span class="built_in">where</span> they are</div><div class="line">    <span class="string">"end_with_newline"</span>: <span class="literal">false</span>, // End output with newline</div><div class="line">    <span class="string">"indent_char"</span>: <span class="string">" "</span>, // Indentation character</div><div class="line">    <span class="string">"indent_handlebars"</span>: <span class="literal">false</span>, // e.g. &#123;&#123;<span class="comment">#foo&#125;&#125;, &#123;&#123;/foo&#125;&#125;</span></div><div class="line">    <span class="string">"indent_inner_html"</span>: <span class="literal">false</span>, // Indent &lt;head&gt; and &lt;body&gt; sections</div><div class="line">    <span class="string">"indent_scripts"</span>: <span class="string">"keep"</span>, // [keep|separate|normal]</div><div class="line">    <span class="string">"indent_size"</span>: 2, // Indentation size</div><div class="line">    <span class="string">"max_preserve_newlines"</span>: 0, // Maximum number of line breaks to be preserved <span class="keyword">in</span> one chunk (0 disables)</div><div class="line">    <span class="string">"preserve_newlines"</span>: <span class="literal">true</span>, // Whether existing line breaks before elements should be preserved (only works before elements, not inside tags or <span class="keyword">for</span> text)</div><div class="line">    <span class="string">"unformatted"</span>: [<span class="string">"a"</span>, <span class="string">"span"</span>, <span class="string">"img"</span>, <span class="string">"code"</span>, <span class="string">"pre"</span>, <span class="string">"sub"</span>, <span class="string">"sup"</span>, <span class="string">"em"</span>, <span class="string">"strong"</span>, <span class="string">"b"</span>, <span class="string">"i"</span>, <span class="string">"u"</span>, <span class="string">"strike"</span>, <span class="string">"big"</span>, <span class="string">"small"</span>, <span class="string">"pre"</span>, <span class="string">"h1"</span>, <span class="string">"h2"</span>, <span class="string">"h3"</span>, <span class="string">"h4"</span>, <span class="string">"h5"</span>, <span class="string">"h6"</span>], // List of tags that should not be reformatted</div><div class="line">    <span class="string">"wrap_line_length"</span>: 0 // Lines should wrap at next opportunity after this number of characters (0 disables)</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"css"</span>: &#123;</div><div class="line">    <span class="string">"allowed_file_extensions"</span>: [<span class="string">"css"</span>, <span class="string">"scss"</span>, <span class="string">"sass"</span>, <span class="string">"less"</span>],</div><div class="line">    <span class="string">"end_with_newline"</span>: <span class="literal">false</span>, // End output with newline</div><div class="line">    <span class="string">"indent_char"</span>: <span class="string">" "</span>, // Indentation character</div><div class="line">    <span class="string">"indent_size"</span>: 2, // Indentation size</div><div class="line">    <span class="string">"newline_between_rules"</span>: <span class="literal">true</span>, // Add a new line after every css rule</div><div class="line">    <span class="string">"selector_separator"</span>: <span class="string">" "</span>,</div><div class="line">    <span class="string">"selector_separator_newline"</span>: <span class="literal">false</span> // Separate selectors with newline or not (e.g. <span class="string">"a,\nbr"</span> or <span class="string">"a, br"</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"js"</span>: &#123;</div><div class="line">    <span class="string">"allowed_file_extensions"</span>: [<span class="string">"js"</span>, <span class="string">"json"</span>, <span class="string">"jshintrc"</span>, <span class="string">"jsbeautifyrc"</span>, <span class="string">"csslintrc"</span>],</div><div class="line">    <span class="string">"brace_style"</span>: <span class="string">"collapse"</span>, // [collapse|expand|end-expand|none] Put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them <span class="built_in">where</span> they are</div><div class="line">    <span class="string">"break_chained_methods"</span>: <span class="literal">false</span>, // Break chained method calls across subsequent lines</div><div class="line">    <span class="string">"e4x"</span>: <span class="literal">false</span>, // Pass E4X xml literals through untouched</div><div class="line">    <span class="string">"end_with_newline"</span>: <span class="literal">false</span>, // End output with newline</div><div class="line">    <span class="string">"indent_char"</span>: <span class="string">" "</span>, // Indentation character</div><div class="line">    <span class="string">"indent_level"</span>: 0, // Initial indentation level</div><div class="line">    <span class="string">"indent_size"</span>: 2, // Indentation size</div><div class="line">    <span class="string">"indent_with_tabs"</span>: <span class="literal">false</span>, // Indent with tabs, overrides `indent_size` and `indent_char`</div><div class="line">    <span class="string">"jslint_happy"</span>: <span class="literal">false</span>, // If <span class="literal">true</span>, <span class="keyword">then</span> jslint-stricter mode is enforced</div><div class="line">    <span class="string">"keep_array_indentation"</span>: <span class="literal">false</span>, // Preserve array indentation</div><div class="line">    <span class="string">"keep_function_indentation"</span>: <span class="literal">false</span>, // Preserve <span class="keyword">function</span> indentation</div><div class="line">    <span class="string">"max_preserve_newlines"</span>: 0, // Maximum number of line breaks to be preserved <span class="keyword">in</span> one chunk (0 disables)</div><div class="line">    <span class="string">"preserve_newlines"</span>: <span class="literal">true</span>, // Whether existing line breaks should be preserved</div><div class="line">    <span class="string">"space_after_anon_function"</span>: <span class="literal">false</span>, // Should the space before an anonymous <span class="keyword">function</span><span class="string">'s parens be added, "function()" vs "function ()"</span></div><div class="line">    "space_before_conditional": true, // Should the space before conditional statement be added, "if(true)" vs "if (true)"</div><div class="line">    "space_in_empty_paren": false, // Add padding spaces within empty paren, "f()" vs "f( )"</div><div class="line">    "space_in_paren": false, // Add padding spaces within paren, ie. f( a, b )</div><div class="line">    "unescape_strings": false, // Should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"</div><div class="line">    "wrap_line_length": 0 // Lines should wrap at next opportunity after this number of characters (0 disables)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要的改动就是</p>
<ul>
<li>修改了”html”的”allowed_file_extensions”，增加了aspx和jsp的支持</li>
<li>修改了”css”的”selector_separator_newline”，个人觉得没必要每个选择器都要占一行</li>
<li>修改了”js”的”allowed_file_extensions”，增加了.csslintrc文件的支持</li>
<li>修改了”html”、”css”、”js”的”indent_size”，我的代码缩进为2个空格</li>
</ul>
<h3 id="HTML-CSS-JS-Prettify使用"><a href="#HTML-CSS-JS-Prettify使用" class="headerlink" title="HTML-CSS-JS Prettify使用"></a>HTML-CSS-JS Prettify使用</h3><p>使用Ctrl+Shift+H，优化当前代码文件。<br>使用js文件测试一下，优化前<br><img src="https://segmentfault.com/img/bVsDMo" alt="图片"></p>
<p>优化后<br><img src="https://segmentfault.com/img/bVsDMp" alt="图片"></p>
<p>js-beautify对css的格式化，有个问题是，会在注释下面插入一行空白字符</p>
<p>如下图，优化前<br><img src="https://segmentfault.com/img/bVsDMq" alt="图片"></p>
<p>优化后<br><img src="https://segmentfault.com/img/bVsDMr" alt="图片"></p>
<p><a href="http://frontenddev.org/article/sublime-does-text-three-plug-ins-html-and-css-js-prettify.html" target="_blank" rel="external">sublime text 3 插件：HTML-CSS-JS Prettify</a>文中给出了解决方法，大家可以参考</p>
<h2 id="我的快捷键配置汇总-首选项-gt-按键绑定-用户"><a href="#我的快捷键配置汇总-首选项-gt-按键绑定-用户" class="headerlink" title="我的快捷键配置汇总:(首选项&gt;按键绑定-用户):"></a>我的快捷键配置汇总:(首选项&gt;按键绑定-用户):</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[</div><div class="line">  &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+c"</span>], <span class="string">"command"</span>: <span class="string">"open_terminal"</span> &#125;,</div><div class="line">  &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+alt+c"</span>], <span class="string">"command"</span>: <span class="string">"open_terminal_project_folder"</span> &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"ctrl+alt+s"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"sublime_tmpl"</span>,</div><div class="line">    <span class="string">"args"</span>: &#123;<span class="string">"type"</span>: <span class="string">"js"</span>&#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"keys"</span>: [<span class="string">"alt+m"</span>],</div><div class="line">    <span class="string">"command"</span>: <span class="string">"markdown_preview"</span>,</div><div class="line">    <span class="string">"args"</span>: &#123;<span class="string">"target"</span>: <span class="string">"browser"</span>, <span class="string">"parser"</span>:<span class="string">"markdown"</span>&#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列---静态属性和原型方法]]></title>
      <url>http://meiminjun.github.io/2016/06/23/javacript%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="静态属性和原型方法"><a href="#静态属性和原型方法" class="headerlink" title="静态属性和原型方法"></a>静态属性和原型方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// 对象构造函数  </div><div class="line"><span class="keyword">function</span> A<span class="built_in">test</span>(name)&#123;  </div><div class="line">  //私有属性，只能在对象构造函数内部使用  </div><div class="line">  var className = <span class="string">"Atest"</span>;  </div><div class="line">  //公有属性,在对象实例化后调用  </div><div class="line">  this.name = name;  </div><div class="line">  //对象方法  </div><div class="line">  this.hello = <span class="function"><span class="title">function</span></span>()&#123;  </div><div class="line">    alert(this.name);  </div><div class="line">    alert(this.msg());//使用原型方法扩充的方法可以在类内部使用  </div><div class="line">    alert(this.sex);//使用原型方法扩充的属性可以在类内部使用  </div><div class="line">    alert(Atest.age);//静态属性调用时格式为[对象.静态属性]  </div><div class="line">  &#125;  </div><div class="line">&#125;  </div><div class="line">//类方法 (实际是静态方法直接调用) 位置：Person类的外部 语法格式：类名称.方法名称 = <span class="keyword">function</span>([参数...])&#123; 语句行; &#125;  </div><div class="line">Atest.Run = <span class="function"><span class="title">function</span></span>()&#123;  </div><div class="line">  alert(<span class="string">"我是类方法 Run"</span>);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//原型方法  </div><div class="line">Atest.prototype.msg = <span class="function"><span class="title">function</span></span>()&#123;  </div><div class="line">  alert(<span class="string">"我的名字是："</span>+this.name);//如果原型方法当作静态方法直接调用时，this.name无法被调用  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//公有静态属性 在类的外部  </div><div class="line">Atest.age = 20;//公有静态属性不能使用 【this.属性】，只能使用 【对象.属性】 调用  </div><div class="line"></div><div class="line">//原型属性，当作是类内部的属性使用【this.原型属性】，也可以当成公有静态属性使用【对象.prototype.原型属性】  </div><div class="line">Atest.prototype.sex = <span class="string">"男"</span>;  </div><div class="line"></div><div class="line">Atest.Run(); //类方法也是静态方法，可以直接使用 【对象.静态方法()】  </div><div class="line">Atest.prototype.msg();//原型方法当成静态方法使用时【对象.prototype.方法()】   </div><div class="line">alert(Atest.prototype.sex);//原型属性当作静态属性使用时【对象.prototype.方法()】  </div><div class="line">var a = new A<span class="built_in">test</span>(<span class="string">"zhangsan"</span>);//对象方法和原型方法需要实例化对象后才可以使用  </div><div class="line">a.hello();//对象方法必须实例化对象  </div><div class="line">a.msg();//原型方法必须实例化对象  </div><div class="line">alert(a.age);//错误，公有静态属性只能使用 【对象.属性】调用  </div><div class="line"></div><div class="line">//ps:尽量将方法定义为原型方法，原型方法避免了每次调用构造函数时对属性或方法的构造，节省空间,创建对象快.</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- String 之slice]]></title>
      <url>http://meiminjun.github.io/2016/06/23/javascript-slice%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="javascript-字符串中的slice-方法介绍和示例"><a href="#javascript-字符串中的slice-方法介绍和示例" class="headerlink" title="javascript 字符串中的slice 方法介绍和示例"></a>javascript 字符串中的slice 方法介绍和示例</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>slice() 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p>stringObject.slice(start,end)</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td style="text-align:right">要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</td>
</tr>
<tr>
<td>end</td>
<td style="text-align:right">紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</td>
</tr>
</tbody>
</table>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>一个新的字符串。包括字符串 stringObject 从 start 开始（包括 start）到 end 结束（<strong>不包括 end</strong>）为止的所有字符。</p>
<blockquote>
<p>注释：请注意，splice() 方法与 slice() 方法的作用是不同的，<strong>splice() 方法会直接对数组进行修改。影响原有数组</strong> </p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>String 对象的方法 slice()、substring() 和 substr() （不建议使用）都可返回字符串的指定部分。slice() 比 substring() 要灵活一些，因为它允许使用负数作为参数。slice() 与 substr() 有所不同，因为它用两个字符的位置来指定子串，而 substr() 则用字符位置和长度来指定子串。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 提取从位置 6 开始的所有字符</div><div class="line">var str=<span class="string">"Hello happy world!"</span></div><div class="line">document.write(str.slice(6));  // happy world!</div><div class="line"></div><div class="line">// 提取从位置 6 到位置 11 的所有字符</div><div class="line">var str=<span class="string">"Hello happy world!"</span></div><div class="line">document.write(str.slice(6,11)) // happy</div></pre></td></tr></table></figure>
<h1 id="javascript-数组中的slice-的用法"><a href="#javascript-数组中的slice-的用法" class="headerlink" title="javascript 数组中的slice 的用法"></a>javascript 数组中的slice 的用法</h1><h2 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>slice() 方法可从已有的数组中返回选定的元素。</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p>arrayObject.slice(start,end)</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td style="text-align:right">必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td>
</tr>
<tr>
<td>end</td>
<td style="text-align:right">可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td>
</tr>
</tbody>
</table>
<h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p>
<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p>
<p>提示和注释</p>
<p>注释：您可使用负值从数组的尾部选取元素。</p>
<p>注释：如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="传递一个参数"><a href="#传递一个参数" class="headerlink" title="传递一个参数"></a>传递一个参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</div><div class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span></div><div class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span></div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(arr + <span class="string">"&lt;br /&gt;"</span>) <span class="comment">// George,John,Thomas</span></div><div class="line"><span class="built_in">document</span>.write(arr.slice(<span class="number">1</span>) + <span class="string">"&lt;br /&gt;"</span>) <span class="comment">// John,Thomas</span></div><div class="line"><span class="built_in">document</span>.write(arr)   <span class="comment">// George,John,Thomas</span></div></pre></td></tr></table></figure>
<h3 id="传递两个参数"><a href="#传递两个参数" class="headerlink" title="传递两个参数"></a>传递两个参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var arr = new Array(6)</div><div class="line">arr[0] = <span class="string">"George"</span></div><div class="line">arr[1] = <span class="string">"John"</span></div><div class="line">arr[2] = <span class="string">"Thomas"</span></div><div class="line">arr[3] = <span class="string">"James"</span></div><div class="line">arr[4] = <span class="string">"Adrew"</span></div><div class="line">arr[5] = <span class="string">"Martin"</span></div><div class="line"></div><div class="line">document.write(arr + <span class="string">"&lt;br /&gt;"</span>)  </div><div class="line">// George,John,Thomas,James,Adrew,Martin</div><div class="line"></div><div class="line">document.write(arr.slice(2,4) + <span class="string">"&lt;br /&gt;"</span>)</div><div class="line">// Thomas,James</div><div class="line"></div><div class="line">document.write(arr)</div><div class="line">// George,John,Thomas,James,Adrew,Martin</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- Array 之splice]]></title>
      <url>http://meiminjun.github.io/2016/06/23/javascript-Array-splice%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="javascript-中的splice-方法介绍和示例"><a href="#javascript-中的splice-方法介绍和示例" class="headerlink" title="javascript 中的splice 方法介绍和示例"></a>javascript 中的splice 方法介绍和示例</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>javascript 中的 splice 方法很强大, splice() 方法用于插入、删除或替换数组的元素。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote>
<p>arrayObject.splice(index,howmany,element1,…..,elementX)</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td style="text-align:right">必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</td>
</tr>
<tr>
<td>howmany</td>
<td style="text-align:right">必需。规定应该删除多少元素。必须是数字，但可以是 “0”。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td>
</tr>
<tr>
<td>element1</td>
<td style="text-align:right">可选。规定要添加到数组的新元素。从 index 所指的下标处开始插入。</td>
</tr>
<tr>
<td>elementX</td>
<td style="text-align:right">可选。可向数组添加若干元素。</td>
</tr>
</tbody>
</table>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>如果从 arrayObject 中删除了元素，则返回的是含有<strong>被删除</strong>的元素的数组。</p>
<blockquote>
<p>注释：请注意，splice() 方法与 slice() 方法的作用是不同的，<strong>splice() 方法会直接对数组进行修改。影响原有数组</strong> </p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>删除：用于删除元素，两个参数，第一个参数（要删除第一项的位置），第二个参数（要删除的项数）</li>
<li>插入：向数组指定位置插入任意项元素。三个参数，第一个参数（其实位置），第二个参数（0），第三个参数（插入的项）</li>
<li>替换：向数组指定位置插入任意项元素，同时删除任意数量的项，三个参数。第一个参数（起始位置），第二个参数（删除的项数），第三个参数（插入任意数量的项）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var lang = [<span class="string">"php"</span>,<span class="string">"java"</span>,<span class="string">"javascript"</span>];</div><div class="line">//删除</div><div class="line">var removed = lang.splice(1,1);</div><div class="line">alert(lang); //php,javascript</div><div class="line">alert(removed); //java ,返回删除的项</div><div class="line">//插入(第二个元素为0的时候)</div><div class="line">var insert = lang.splice(0,0,<span class="string">"asp"</span>); //从第0个位置开始插入</div><div class="line">alert(insert); //返回空数组</div><div class="line">alert(lang); //asp,php,javascript</div><div class="line">//替换</div><div class="line">var replace = lang.splice(1,1,<span class="string">"c#"</span>,<span class="string">"ruby"</span>); //删除一项，插入两项</div><div class="line">alert(lang); //asp,c<span class="comment">#,ruby</span></div><div class="line">alert(replace); //php,返回删除的项</div></pre></td></tr></table></figure>
<blockquote>
<p>说明: splice 第二个参数为 0 代表插入 或者 大于0 的为删除</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[史上最强Sublime 笔记系列---我的常用配置]]></title>
      <url>http://meiminjun.github.io/2016/06/22/SublimeText-%E6%88%91%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1f56cg7zmfvj20hm08kdhc.jpg" alt=""></p>
<p>这篇文章主要讲的Sublime Text 3 的一些用户配置说明，方便使用者的个性化使用</p>
<ol>
<li><p><strong> <a href="/2016/06/24/SublimeText-常用快捷键/">史上最强Sublime 笔记系列—常用快捷键</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/23/SublimeText-常用插件和主题/">史上最强Sublime 笔记系列—精选插件和UI主题</a>(持续更新中。。。) </strong></p>
</li>
<li><p><strong> <a href="/2016/06/22/SublimeText-我的常用配置/">史上最强Sublime 笔记系列—我的常用配置</a>(持续更新中。。。)  </strong></p>
</li>
</ol>
<a id="more"></a>
<hr>
<h2 id="我的推荐字体（非常漂亮的几款字体）"><a href="#我的推荐字体（非常漂亮的几款字体）" class="headerlink" title="我的推荐字体（非常漂亮的几款字体）"></a>我的推荐字体（<strong>非常漂亮的几款字体</strong>）</h2><blockquote>
<ul>
<li>Microsoft YaHei Mono</li>
<li>monaco</li>
<li>Courier New</li>
<li>comic sans ms</li>
</ul>
</blockquote>
<h2 id="推荐UI主题配置（非常时尚的两款UI主题）："><a href="#推荐UI主题配置（非常时尚的两款UI主题）：" class="headerlink" title="推荐UI主题配置（非常时尚的两款UI主题）："></a>推荐UI主题配置（<strong>非常时尚的两款UI主题</strong>）：</h2><h3 id="1-Flatland（推荐）"><a href="#1-Flatland（推荐）" class="headerlink" title="1. Flatland（推荐）"></a>1. Flatland（推荐）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"color_scheme"</span>: <span class="string">"Packages/Theme - Flatland/Flatland Monokai.tmTheme"</span>,</div><div class="line"><span class="string">"theme"</span>: <span class="string">"Flatland Dark.sublime-theme"</span>,</div></pre></td></tr></table></figure>
<h3 id="2-Material"><a href="#2-Material" class="headerlink" title="2. Material"></a>2. Material</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"theme"</span>: <span class="string">"Material-Theme.sublime-theme"</span>,</div><div class="line"><span class="string">"color_scheme"</span>: <span class="string">"Packages/Material Theme/schemes/Material-Theme.tmTheme"</span>,</div></pre></td></tr></table></figure>
<h3 id="3-Seti"><a href="#3-Seti" class="headerlink" title="3. Seti"></a>3. Seti</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"theme"</span>: <span class="string">"Seti.sublime-theme"</span></div></pre></td></tr></table></figure>
<h2 id="我的配置详情-最美纯净版"><a href="#我的配置详情-最美纯净版" class="headerlink" title="我的配置详情(最美纯净版)"></a>我的配置详情(最美纯净版)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"default_line_ending"</span>: <span class="string">"unix"</span>, // 使用unix 风格</div><div class="line">    <span class="string">"draw_minimap_border"</span>: <span class="literal">true</span>, // 用于预览添加边框</div><div class="line">    // <span class="string">"font_face"</span>: <span class="string">"Courier New"</span>,</div><div class="line">    // <span class="string">"font_face"</span>:<span class="string">"comic sans ms"</span>,</div><div class="line">    <span class="string">"font_face"</span>:<span class="string">"monaco"</span>,</div><div class="line">    <span class="string">"font_size"</span>: 13.0,</div><div class="line">    <span class="string">"line_padding_bottom"</span>: 1,</div><div class="line">    <span class="string">"line_padding_top"</span>: 1,</div><div class="line">    <span class="string">"tab_size"</span>: 2,</div><div class="line">    <span class="string">"highlight_modified_tabs"</span>: <span class="literal">true</span>,  // 高亮未保存文件</div><div class="line">    <span class="string">"highlight_line"</span>: <span class="literal">true</span>, // 当前行高亮</div><div class="line">    <span class="string">"trim_trailing_white_space_on_save"</span>: <span class="literal">true</span>, // 保证在文件保存时，移除每行结尾多余空格</div><div class="line">    <span class="string">"update_check"</span>: <span class="literal">false</span>, // 禁止自动更新</div><div class="line">    <span class="string">"word_wrap"</span>: <span class="string">"true"</span> // 设置自动换行</div><div class="line">    <span class="string">"theme"</span>: <span class="string">"Flatland Dark.sublime-theme"</span>,</div><div class="line">    <span class="string">"color_scheme"</span>: <span class="string">"Packages/Theme - Flatland/Flatland Monokai.tmTheme"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用配置详情说明"><a href="#常用配置详情说明" class="headerlink" title="常用配置详情说明"></a>常用配置详情说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">trim_trailing_white_space_on_save，自动移除行尾多余空格，处女座更安心了。</div><div class="line"></div><div class="line">ensure_newline_at_eof_on_save，文件末尾自动保留一个空行，懂的人自然知道它的用处。</div><div class="line"></div><div class="line">font_face 设置字体。Microsoft YaHei Mono 是一款混合字体，专为代码优化，看起来很舒服。当然你也可以使用你自己喜欢的字体，或者删掉本行，使用默认字体。</div><div class="line"></div><div class="line">disable_tab_abbreviations 设置为 <span class="literal">true</span> ，禁用 Emmet 的 tab 键功能（请使用 ctrl+e），系统自带的 tab 功能还是可圈可点的。当然你也可以不设置它，以完全使用 Emmet 的 tab 补全功能。</div><div class="line"></div><div class="line">translate_tabs_to_spaces 很明白就是把代码 tab 对齐转换为空格对齐，</div><div class="line"></div><div class="line">tab_size 配合设置空格数。这个需求因人而异了，不喜欢可以去掉。</div><div class="line"></div><div class="line">draw_minimap_border，用于右侧代码预览时给所在区域加上边框，方便识别。</div><div class="line"></div><div class="line">save_on_focus_lost，窗口失焦立即保存文件，嘛嘛再也不用担心你忘记保存了。</div><div class="line"></div><div class="line">highlight_line，当前行高亮。</div><div class="line"></div><div class="line">word_wrap，设置自动换行。</div><div class="line"></div><div class="line">fade_fold_buttons，默认显示行号右侧的代码段闭合展开三角号。</div><div class="line"></div><div class="line">bold_folder_labels，侧边栏文件夹显示加粗，区别于文件。</div><div class="line"></div><div class="line">highlight_modified_tabs，高亮未保存文件。</div><div class="line"></div><div class="line">default_line_ending: “unix”，使用 unix 风格的换行符。</div><div class="line"></div><div class="line">auto_find_in_selection: <span class="literal">true</span> ，开启选中范围内搜索（而不是整个文档</div><div class="line"></div><div class="line">translate_tabs_to_spaces :<span class="literal">true</span>，Tab转空格</div><div class="line"></div><div class="line">word_separators:<span class="literal">true</span> , 词的分符隔定义，加入中文符号</div><div class="line"></div><div class="line">vintage_start_in_command_mode, 启动时，开启vim命令模式</div></pre></td></tr></table></figure>
<h2 id="sulimeText-的vim模式"><a href="#sulimeText-的vim模式" class="headerlink" title="sulimeText 的vim模式"></a>sulimeText 的vim模式</h2><p>sublime 默认是禁用vim模式的</p>
<blockquote>
<p>“ignored_packages”: [“Vintage”]</p>
</blockquote>
<p>开启vim模式要配置成：</p>
<blockquote>
<p>“ignored_packages”: [“”]</p>
</blockquote>
<p>在用户配置中：</p>
<blockquote>
<p>“vintage_start_in_command_mode”: true //启动时，开启vim命令模式</p>
</blockquote>
<p>在用户快捷键中添加配置(进入vim模式)：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"keys"</span>: [<span class="string">"j"</span>, <span class="string">"j"</span>],</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"exit_insert_mode"</span>,</div><div class="line">    <span class="attr">"context"</span>:</div><div class="line">    [</div><div class="line">        &#123; <span class="attr">"key"</span>: <span class="string">"setting.command_mode"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span> &#125;,</div><div class="line">        &#123; <span class="attr">"key"</span>: <span class="string">"setting.is_widget"</span>, <span class="attr">"operand"</span>: <span class="literal">false</span> &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体参考：<a href="http://www.sublimetext.com/docs/3/vintage.html" target="_blank" rel="external">http://www.sublimetext.com/docs/3/vintage.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[7月份要做的事情]]></title>
      <url>http://meiminjun.github.io/2016/06/22/7%E6%9C%88%E4%BB%BD-TODO/</url>
      <content type="html"><![CDATA[<h2 id="react-redux-的学习-4-10"><a href="#react-redux-的学习-4-10" class="headerlink" title="react + redux 的学习(4-10)"></a>react + redux 的学习(4-10)</h2><p>新建一个纯净的react+redux 环境<br><a href="https://github.com/chenbin92/react-redux-webpack-starter/issues/1?mType=Group" target="_blank" rel="external">https://github.com/chenbin92/react-redux-webpack-starter/issues/1?mType=Group</a></p>
<h3 id="入门"><a href="#入门" class="headerlink" title="入门:"></a>入门:</h3><p><a href="http://www.alloyteam.com/2015/09/react-redux/" target="_blank" rel="external">http://www.alloyteam.com/2015/09/react-redux/</a></p>
<h3 id="参考教程："><a href="#参考教程：" class="headerlink" title="参考教程："></a>参考教程：</h3><p><a href="http://www.cnblogs.com/lewis617/tag/redux/" target="_blank" rel="external">http://www.cnblogs.com/lewis617/tag/redux/</a></p>
<p><a href="http://cn.redux.js.org/docs/react-redux/quick-start.html" target="_blank" rel="external">http://cn.redux.js.org/docs/react-redux/quick-start.html</a></p>
<p><a href="https://github.com/1340641314/react-cnode" target="_blank" rel="external">https://github.com/1340641314/react-cnode</a></p>
<h2 id="新建一个论坛系统"><a href="#新建一个论坛系统" class="headerlink" title="新建一个论坛系统"></a>新建一个论坛系统</h2><p><a href="https://nswbmw.github.io/N-club/1/README.html" target="_blank" rel="external">https://nswbmw.github.io/N-club/1/README.html</a></p>
<h2 id="深入了解javascript-11-17"><a href="#深入了解javascript-11-17" class="headerlink" title="深入了解javascript (11-17)"></a>深入了解javascript (11-17)</h2><ul>
<li><p><a href="http://wiki.jikexueyuan.com/project/brief-talk-js/static-attributes-and-prototype-properties.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/brief-talk-js/static-attributes-and-prototype-properties.html</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects</a></p>
</li>
</ul>
<p><a href="http://hao.jser.com/" target="_blank" rel="external">http://hao.jser.com/</a></p>
<h2 id="计划用做一个关于sublimeText的PPT分享-18-24"><a href="#计划用做一个关于sublimeText的PPT分享-18-24" class="headerlink" title="计划用做一个关于sublimeText的PPT分享(18-24)"></a>计划用做一个关于sublimeText的PPT分享(18-24)</h2><p>利用<a href="https://github.com/ksky521/nodePPT" target="_blank" rel="external">nodePPT</a>制作</p>
<h2 id="gulp以及-webpack-gulp-整合"><a href="#gulp以及-webpack-gulp-整合" class="headerlink" title="gulp以及 webpack+gulp 整合"></a>gulp以及 webpack+gulp 整合</h2><p><a href="http://spencerdixon.com/blog/test-driven-react-tutorial.html" target="_blank" rel="external">http://spencerdixon.com/blog/test-driven-react-tutorial.html</a></p>
<h2 id="前端拓展"><a href="#前端拓展" class="headerlink" title="前端拓展"></a>前端拓展</h2><p><a href="https://segmentfault.com/a/1190000005875954" target="_blank" rel="external">https://segmentfault.com/a/1190000005875954</a></p>
<h2 id="react-router学习"><a href="#react-router学习" class="headerlink" title="react-router学习"></a>react-router学习</h2><p><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/05/react_router.html</a></p>
<p><a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="external">https://react-guide.github.io/react-router-cn/</a></p>
<p><a href="https://github.com/davezuko/react-redux-starter-kit" target="_blank" rel="external">https://github.com/davezuko/react-redux-starter-kit</a></p>
<h2 id="editor-config介绍"><a href="#editor-config介绍" class="headerlink" title="editor config介绍"></a>editor config介绍</h2><p><a href="http://www.alloyteam.com/2014/12/editor-config/" target="_blank" rel="external">http://www.alloyteam.com/2014/12/editor-config/</a></p>
<p>应用了editorconfig 的项目<br><a href="https://github.com/editorconfig/editorconfig/wiki/Projects-Using-EditorConfig" target="_blank" rel="external">https://github.com/editorconfig/editorconfig/wiki/Projects-Using-EditorConfig</a></p>
<h2 id="eslint-配置说明"><a href="#eslint-配置说明" class="headerlink" title="eslint 配置说明"></a>eslint 配置说明</h2><p><a href="https://github.com/y8n/ESLint-rules-docs-cn" target="_blank" rel="external">https://github.com/y8n/ESLint-rules-docs-cn</a></p>
<p><a href="http://eslint.cn/docs/rules/semi" target="_blank" rel="external">http://eslint.cn/docs/rules/semi</a></p>
<p><a href="http://ilioner.github.io/2016/05/21/%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8ESLint%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C.html" target="_blank" rel="external">http://ilioner.github.io/2016/05/21/%E5%A6%82%E4%BD%95%E6%84%89%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8ESLint%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C.html</a></p>
<h2 id="doctoc"><a href="#doctoc" class="headerlink" title="doctoc"></a>doctoc</h2><p>这是一个markdown生成目录的小工具</p>
<blockquote>
<p>doctoc test.md</p>
</blockquote>
<p>详情：<a href="https://github.com/thlorenz/doctoc#examples" target="_blank" rel="external">https://github.com/thlorenz/doctoc#examples</a></p>
<h2 id="进度详情："><a href="#进度详情：" class="headerlink" title="进度详情："></a>进度详情：</h2><ul>
<li>[x] react + redux + koa + webpack</li>
<li>[x] editor config</li>
<li>[x] eslint 配置说明</li>
<li>[x] doctoc生成目录</li>
<li>[ ] 计划用做nodePPT一个关于sublimeText的PPT分享</li>
<li>[ ] gulp以及 webpack+gulp 整合</li>
<li>[ ] 新建一个论坛系统</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 笔记]]></title>
      <url>http://meiminjun.github.io/2016/06/21/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="优秀的在线MarkDown-网站"><a href="#优秀的在线MarkDown-网站" class="headerlink" title="优秀的在线MarkDown 网站"></a>优秀的在线MarkDown 网站</h1><h2 id="1-https-www-zybuluo-com-mdeditor"><a href="#1-https-www-zybuluo-com-mdeditor" class="headerlink" title="1. https://www.zybuluo.com/mdeditor"></a>1. <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">https://www.zybuluo.com/mdeditor</a></h2><h2 id="2-http-mahua-jser-me"><a href="#2-http-mahua-jser-me" class="headerlink" title="2. http://mahua.jser.me/"></a>2. <a href="http://mahua.jser.me/" target="_blank" rel="external">http://mahua.jser.me/</a></h2><h1 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown"></a>什么是Markdown</h1><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> </p>
<p>在此，我们总结 Markdown 的优点如下：</p>
<ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li>
<li>让你专注于文字而不是排版。</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li>
<li>Markdown 的标记语法有极好的可读性</li>
</ul>
<a id="more"></a>
<h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><h3 id="1-加粗"><a href="#1-加粗" class="headerlink" title="1. 加粗"></a>1. <strong>加粗</strong></h3><p><strong>源码：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**加粗**</div></pre></td></tr></table></figure>
<h3 id="2-引用跳转"><a href="#2-引用跳转" class="headerlink" title="2. 引用跳转"></a>2. 引用跳转</h3><p><a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></p>
<p><strong>源码：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown<span class="comment">#13-待办事宜-todo-列表)</span></div></pre></td></tr></table></figure>
<h3 id="3-添加todolist"><a href="#3-添加todolist" class="headerlink" title="3. 添加todolist"></a>3. 添加todolist</h3><ul>
<li>[ ] 添加一个npm 下载地址</li>
<li>[x] Mars</li>
</ul>
<p><strong>源码：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- [ ] 添加一个npm 下载地址</div><div class="line">- [x] Mars</div></pre></td></tr></table></figure>
<h3 id="4-引用图片"><a href="#4-引用图片" class="headerlink" title="4. 引用图片"></a>4. 引用图片</h3><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p><strong>源码：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)</div></pre></td></tr></table></figure>
<h3 id="5-绘制表格"><a href="#5-绘制表格" class="headerlink" title="5. 绘制表格"></a>5. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<p><strong>源码：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">| 项目        | 价格   |  数量  |</div><div class="line">| --------   | -----:  | :----:  |</div><div class="line">| 计算机     | \<span class="variable">$1600</span> |   5     |</div><div class="line">| 手机        |   \<span class="variable">$12</span>   |   12   |</div><div class="line">| 管线        |    \<span class="variable">$1</span>    |  234  |</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- 设计模式 之单例模式]]></title>
      <url>http://meiminjun.github.io/2016/06/11/javascript-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="javascript设计模式之单例模式"><a href="#javascript设计模式之单例模式" class="headerlink" title="javascript设计模式之单例模式"></a>javascript设计模式之单例模式</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>在传统开发工程师眼里，单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在JavaScript里，实现单例的方式有很多种，其中最简单的一个方式是使用对象字面量的方法，其字面量里可以包含大量的属性和方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var mySingleton = &#123;    </div><div class="line">  property1: <span class="string">"something"</span>,</div><div class="line">  property2: <span class="string">"something else"</span>,</div><div class="line">  method1: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">      console.log(<span class="string">'hello world'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果以后要扩展该对象，你可以添加自己的私有成员和方法，然后使用闭包在其内部封装这些变量和函数声明。只暴露你想暴露的public成员和方法，样例代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var mySingleton = <span class="function"><span class="title">function</span></span>() &#123; /* 这里声明私有变量和方法 */</div><div class="line">  var privateVariable = <span class="string">'something private'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">function</span> <span class="function"><span class="title">showPrivate</span></span>() &#123;</div><div class="line">    console.log(privateVariable);</div><div class="line">  &#125; </div><div class="line">  /* 公有变量和方法（可以访问私有变量和方法） */</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    publicMethod: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">      showPrivate();</div><div class="line">    &#125;,</div><div class="line">    publicVar: <span class="string">'the public can see this!'</span></div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line">var single = mySingleton();</div><div class="line">single.publicMethod(); // 输出 <span class="string">'something private'</span></div><div class="line">console.log(single.publicVar); // 输出 <span class="string">'the public can see this!'</span></div></pre></td></tr></table></figure>
<h2 id="如何拥有私有成员的单体"><a href="#如何拥有私有成员的单体" class="headerlink" title="如何拥有私有成员的单体"></a>如何拥有私有成员的单体</h2><h3 id="下划线标示法"><a href="#下划线标示法" class="headerlink" title="下划线标示法"></a>下划线标示法</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">namespace</span> = &#123;&#125;;</div><div class="line"><span class="keyword">namespace</span>.DataParser = &#123;</div><div class="line">  _stripWhitespace:<span class="function"><span class="keyword">function</span><span class="params">(str)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(/s+/,<span class="string">''</span>);</div><div class="line">  &#125;,</div><div class="line">  _stringSplit:funtion(str,delimiter) &#123;</div><div class="line">    <span class="keyword">return</span> str.split(delimiter);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//共有方法</span></div><div class="line">  stringToArray:<span class="function"><span class="keyword">function</span><span class="params">(str,delimiter,stripWs)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(stripWs) &#123;</div><div class="line">      str = <span class="keyword">this</span>._stringWhitespace(str);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> outputArray = <span class="keyword">this</span>._stringSplit(str,delimiter);</div><div class="line">    <span class="keyword">return</span> outputArray;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h3><p>单体只会被实例化一次，每个方法和属性都只会创建一次，所以你可以把他们都声明在构造函数内部，例如：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">namespace</span> = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 1、最简单的单例</span></div><div class="line">namspace.singeton = &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2、现在我们用一个在定义之后立即执行的函数创造单体</span></div><div class="line"><span class="keyword">namespace</span>.singleton = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;&#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>上述的1、2两个例子中创建的namespace.singeton 完全相同，但是要注意的是第二个例子的匿名函数加了一个括号，这代表着，立即执行返回一个对象给namespace.singleton</p>
<p>有些程序员喜欢在那个匿名函数中在套上一对圆括号，以表示会在声明之后立即执行。这在创建单体较为庞大的时候尤其重要，因为你只要一眼就能看出该函数是用来创建一个闭包。格外加上圆括号，就变成下面这个样子：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span>.singleton = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;&#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 你可以把公用成员添加到单体返回的对象里面</span></div><div class="line"><span class="keyword">namespace</span>.singleton = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 私有成员</span></div><div class="line">  <span class="keyword">var</span> _priviteName = <span class="string">"dfdfasfd"</span>;</div><div class="line">  <span class="keyword">var</span> _priviteMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> _priviteName;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 公用成员</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    publiceAttribute:<span class="literal">true</span>,</div><div class="line">    publiceAttribute2:<span class="number">1</span>,</div><div class="line">    publiceMenthod:<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &#125;)()</div></pre></td></tr></table></figure></p>
<p><strong> 包装函数创建了一个用来正真添加私有成员的闭包，防止程序员调用到私有成员</strong><br>任何声明在这个匿名函数中（但不是那个字面量中）的变量或者函数都只能被在同一个闭包中声明的其他函数访问。这个闭包在匿名函数执行后依然存在，所以在其中声明的函数和变量总能从匿名函数所返回的对象内部（并且只能从内部）访问</p>
<p>相比前者，后者不必再用this.或者namespace.singleton 去访问对象中发成员了</p>
<h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>前面所讲的单体模式都有一个共同特点：单体对象都是在脚本加载完成之后创建出来的。对于资源密集型或者配置开销很大的单体，也许更加合理的方式是将实例化推迟到需要的时候，这种技术被称为惰性加载，它通常用于那些比较大量数据的单体。</p>
<p>我们如何将普通的闭包单体修改为惰性单体呢？</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">namespace</span> = &#123;&#125;;</div><div class="line"><span class="keyword">namespace</span>.singleton = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 第一步，将单体的所有代码移动到一个名为constructor的方法中</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> _priviteName = <span class="string">"dfdfasfd"</span>;</div><div class="line">    <span class="keyword">var</span> _priviteMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> _priviteName;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="comment">// 公用成员</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    publiceAttribute:<span class="literal">true</span>,</div><div class="line">    publiceAttribute2:<span class="number">1</span>,</div><div class="line">    publiceMenthod:<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这个方法不能从外部访问，这是一件好事，因为我们可以完全控制其调用时机。公用方法getInstance就是来实现这种控制的。为了使其成为公用方法，只需将其放到一个对象字面量中并返回该对象即可：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">namespace</span> = &#123;&#125;;</div><div class="line"><span class="keyword">namespace</span>.singleton = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 第一步，将单体的所有代码移动到一个名为constructor的方法中</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> _priviteName = <span class="string">"dfdfasfd"</span>;</div><div class="line">    <span class="keyword">var</span> _priviteMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> _priviteName;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="comment">// 公用成员</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 第二步编写getInstance方法</span></div><div class="line">    getInstance: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>现在开始编写控制单体类实例化时机的代码。它需要做两件事情。第一，它必须知道该类是否已经被示例化过。第二，如果该类已经实例化，那么它需要掌握其实例的情况，以便能返回这个实例。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">namespace</span> = &#123;&#125;;</div><div class="line"><span class="keyword">namespace</span>.singleton = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">var</span> instance; </div><div class="line"><span class="comment">// 第一步，将单体的所有代码移动到一个名为constructor的方法中</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> _priviteName = <span class="string">"dfdfasfd"</span>;</div><div class="line">    <span class="keyword">var</span> _priviteMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> _priviteName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      getName:<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"23123"</span></div><div class="line">      &#125;,</div><div class="line">      publiceMethod2:<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _priviteMethod()</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="comment">// 公用成员</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// 第二步编写getInstance方法</span></div><div class="line">    getInstance: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(!instance) &#123;</div><div class="line">        instance = Constructor();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack 开发笔记---傻瓜式入门教程]]></title>
      <url>http://meiminjun.github.io/2016/05/05/webpack%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Webpack傻瓜式指南"><a href="#Webpack傻瓜式指南" class="headerlink" title="Webpack傻瓜式指南"></a>Webpack傻瓜式指南</h1><p><img src="/images/blogImg/524ee3f84a1742cbc4de3e2ff95ce983_b.png" alt="图片"></p>
<p>Webpack最近很热，满屏幕都是React＋Webpack，官方文档写的不太好，好多点都没有解释的详细，所以我参考了几篇文章，写一篇傻瓜式指南。本文适合第一次接触webpack的朋友，如果是老鸟，就不用看了。这是系列的第一篇，主要讲他最基本的用法。</p>
<a id="more"></a>
<hr>
<p>webpack简单点来说就就是一个配置文件，所有的魔力都是在这一个文件中发生的。 这个配置文件主要分为三大块</p>
<blockquote>
<ul>
<li>entry 入口文件 让webpack用哪个文件作为项目的入口</li>
<li>output 出口 让webpack把处理完成的文件放在哪里</li>
<li>module 模块 要用什么不同的模块来处理各种类型的文件</li>
</ul>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先装好node和npm，因为webpack是一个基于node的项目。然后</p>
<blockquote>
<p>npm install -g webpack</p>
</blockquote>
<h2 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h2><p>建一个文件夹，然后新建一个package.json的文件在项目根目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir webpack</div><div class="line"><span class="built_in">cd</span> webpack</div><div class="line">npm init</div><div class="line"><span class="comment"># 一直点回车 如果懒得填一些信息</span></div></pre></td></tr></table></figure>
<p>如果你使用git管理你的这个项目的话，建议你新建一个.gitignore文件，不要让git提交一些node依赖的模块， 你也可以参考github的例子 gitignore/Node.gitignore at master · github/gitignore · GitHub</p>
<p>我们这里一下文件不建议提交</p>
<blockquote>
<p>node_modules</p>
</blockquote>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>现在项目里面就有一个package.json， 我们多加一点东西，慢慢丰富它的内容。</p>
<ul>
<li>/app<ul>
<li>index.js</li>
<li>sub.js</li>
</ul>
</li>
<li>package.json</li>
<li>webpack.config.js</li>
</ul>
<p>添加了两个js文件，添加了最重要的webpack的配置文件，我们还是从非常简单的hello world开始玩起，webpack原生直接支持AMD和CommonJS两种格式，如果你想使用ES6的风格，这点以后再提。</p>
<h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><p>sub.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//我们这里使用CommonJS的风格</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">generateText</span></span>() &#123;</div><div class="line">  var element = document.createElement(<span class="string">'h2'</span>);</div><div class="line">  element.innerHTML = <span class="string">"Hello h2 world"</span>;</div><div class="line">  <span class="built_in">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = generateText;</div></pre></td></tr></table></figure></p>
<p>index.js</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var sub = require(<span class="string">'./sub'</span>);</div><div class="line">var app  = document.createElement(<span class="string">'div'</span>);</div><div class="line">app.innerHTML = <span class="string">'&lt;h1&gt;Hello World&lt;/h1&gt;'</span>;</div><div class="line">app.appendChild(sub());</div><div class="line">document.body.appendChild(app);</div></pre></td></tr></table></figure>
<p>代码写完了，完成一个很简单的功能，新建一个单独的module，并且在另外一个module里面引用他，最后会在页面里面输出两个标题。</p>
<h2 id="配置Webpack"><a href="#配置Webpack" class="headerlink" title="配置Webpack"></a>配置Webpack</h2><p>现在开始配置webpack，目标是把这两个js文件合并成一个文件. 我们可以自己在build文件夹里面手动建一个index.html文件夹，然后再把合并以后的js引用在里面，但是这样有些麻烦，所以我们这里安装一个plugin，可以自动快速的帮我们生成HTML。</p>
<blockquote>
<p>npm install html-webpack-plugin –save-dev</p>
</blockquote>
<p>好 有了这个插件 开始写config文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var path = require(<span class="string">'path'</span>);</div><div class="line">var HtmlwebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">//定义了一些文件夹的路径</div><div class="line">var ROOT_PATH = path.resolve(__dirname);</div><div class="line">var APP_PATH = path.resolve(ROOT_PATH, <span class="string">'app'</span>);</div><div class="line">var BUILD_PATH = path.resolve(ROOT_PATH, <span class="string">'build'</span>);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  //项目的文件夹 可以直接用文件夹名称 默认会找index.js 也可以确定是哪个文件名字</div><div class="line">  entry: APP_PATH,</div><div class="line">  //输出的文件名 合并以后的js会命名为bundle.js</div><div class="line">  output: &#123;</div><div class="line">    path: BUILD_PATH,</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  //添加我们的插件 会自动生成一个html文件</div><div class="line">  plugins: [</div><div class="line">    new HtmlwebpackPlugin(&#123;</div><div class="line">      title: <span class="string">'Hello World app'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后在项目根目录运行<br>webpack</p>
<p>终端显示一堆信息，然后告诉你成功了。</p>
<blockquote>
<p>你可以使用webpack –help看看一些运行的时候可选的参数</p>
</blockquote>
<p>你会发现多出来一个build文件夹，直接点开里面的html文件，你会发现我们可爱的“hello world”已经插入到页面了。我们的任务完成了，成功生成html，合并js，html引入了js，js被执行了。</p>
<h2 id="配置webpack-dev-server"><a href="#配置webpack-dev-server" class="headerlink" title="配置webpack-dev-server"></a>配置webpack-dev-server</h2><p>上面任务虽然完成了，但是我们要不断运行程序然后查看页面，所以最好新建一个开发服务器，可以serve我们pack以后的代码，并且当代码更新的时候自动刷新浏览器。</p>
<p>安装webpack-dev-server</p>
<blockquote>
<p>npm install webpack-dev-server –save-dev</p>
</blockquote>
<p>上面任务虽然完成了，但是我们要不断运行程序然后查看页面，所以最好新建一个开发服务器，可以serve我们pack以后的代码，并且当代码更新的时候自动刷新浏览器。</p>
<p>安装webpack-dev-server</p>
<blockquote>
<p>npm install webpack-dev-server –save-dev<br>安装完毕后 在config中添加配置</p>
</blockquote>
<p>安装完毕后 在config中添加配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  ....</div><div class="line">  devServer: &#123;</div><div class="line">    <span class="built_in">history</span>ApiFallback: <span class="literal">true</span>,</div><div class="line">    hot: <span class="literal">true</span>,</div><div class="line">    inline: <span class="literal">true</span>,</div><div class="line">    progress: <span class="literal">true</span>,</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后再package.json里面配置一下运行的命令,npm支持自定义一些命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">       <span class="string">"start"</span>: <span class="string">"webpack-dev-server --hot --inline"</span></div><div class="line">   &#125;,</div></pre></td></tr></table></figure></p>
<p>好了，万事具备了，在项目根目录下输入npm start,一堆花花绿绿的信息后server已经起来了，在浏览器里面输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 发现伟大的hello world出现了，在js里面随便修改一些输出然后保存, boom!浏览器自动刷新，新的结果出现了。</p>
<blockquote>
<p>拓展阅读 如果你的服务器端使用的是express框架，你还可以直接安装express的middleware，webpack配合express，很好用。</p>
<p>npm install webpack-dev-middleware –save-dev</p>
</blockquote>
<h2 id="添加CSS样式"><a href="#添加CSS样式" class="headerlink" title="添加CSS样式"></a>添加CSS样式</h2><p>现在来添加一些样式，webpack使用loader的方式来处理各种各样的资源，比如说样式文件，我们需要两种loader，css-loader 和 style－loader，css-loader会遍历css文件，找到所有的url(…)并且处理。style-loader会把所有的样式插入到你页面的一个style tag中。</p>
<p>安装我们的loader</p>
<blockquote>
<p>npm install css-loader style-loader –save-dev</p>
</blockquote>
<p>配置loader，在webpack.config.js中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">   <span class="built_in">history</span>ApiFallback: <span class="literal">true</span>,</div><div class="line">   hot: <span class="literal">true</span>,</div><div class="line">   inline: <span class="literal">true</span>,</div><div class="line">   progress: <span class="literal">true</span>,</div><div class="line"> &#125;,</div><div class="line"> ...</div><div class="line"> module: &#123;</div><div class="line">   loaders: [</div><div class="line">     &#123;</div><div class="line">       <span class="built_in">test</span>: /\.css$/,</div><div class="line">       loaders: [<span class="string">'style'</span>, <span class="string">'css'</span>],</div><div class="line">       include: APP_PATH</div><div class="line">     &#125;</div><div class="line">   ]</div><div class="line"> &#125;,</div><div class="line"> ...</div><div class="line"> plugins: [</div><div class="line">   new HtmlwebpackPlugin(&#123;</div><div class="line">     title: <span class="string">'Hello World app'</span></div><div class="line">   &#125;)</div><div class="line"> ]</div></pre></td></tr></table></figure></p>
<p>看loaders的书写方式，test里面包含一个正则，包含需要匹配的文件，loaders是一个数组，包含要处理这些程序的loaders，这里我们用了css和style，注意loaders的处理顺序是从右到左的，这里就是先运行css-loader然后是style-loader.</p>
<p>新建一个样式文件 main.css<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">h1 &#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>记得在入口文件index.js中引用</p>
<blockquote>
<p>require(‘./main.css’);</p>
</blockquote>
<p>然后发现标题变成红色的了，webpack的理念是基于项目处理的，把对应的文件格式给对应的loader处理，然后你就不用管了，它会决定怎么压缩，编译。</p>
<p>那现在想使用一些有爱的css预编译程序，来点sass吧。 你可能已经想到了，再来个loader就行啦，确实是这样简单。</p>
<blockquote>
<p>npm install sass-loader –save-dev</p>
</blockquote>
<p>稍微修改一下config，删掉我们先前添加的css规则，加上下面的loader<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="built_in">test</span>: /\.scss$/,</div><div class="line">      loaders: [<span class="string">'style'</span>, <span class="string">'css'</span>, <span class="string">'sass'</span>],</div><div class="line">      include: APP_PATH</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<p>添加两个sass文件，variables.scss和main.scss</p>
<p>variables.scss<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$red: red;</div></pre></td></tr></table></figure></p>
<p>main.scss<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"./variables.scss"</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">color</span>: $red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在index.js中引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">'./main.scss'</span>);</div></pre></td></tr></table></figure></p>
<p>然后发现标题如愿变红，相当简单吧。</p>
<h2 id="处理图片和其他静态文件"><a href="#处理图片和其他静态文件" class="headerlink" title="处理图片和其他静态文件"></a>处理图片和其他静态文件</h2><p>这个和其他一样，也许你也已经会玩了。安装loader，处理文件。诸如图片，字体等等，不过有个神奇的地方它可以根据你的需求将一些图片自动转成base64编码的，为你减轻很多的网络请求。</p>
<p>安装url-loader</p>
<blockquote>
<p>npm install url-loader –save-dev</p>
</blockquote>
<p>配置config文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="built_in">test</span>: /\.(png|jpg)$/,</div><div class="line">      loader: <span class="string">'url?limit=40000'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>注意后面那个limit的参数，当你图片大小小于这个限制的时候，会自动启用base64编码图片。<br>下面举个栗子。<br>新建一个imgs文件夹，往里面添加一张崔叔的照片。在scss文件中添加如下的东西。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"./variables.scss"</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">color</span>: $red;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'./imgs/avatar.jpg'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>npm start, 然后查看图片的url，发现神奇。<br><img src="/images/blogImg/8b3637b909d05a97a3a26070438f071d_r.png" alt="图片"></p>
<h2 id="添加第三方库"><a href="#添加第三方库" class="headerlink" title="添加第三方库"></a>添加第三方库</h2><p>有的时候还想来点jquery，moment，undersocre之类的库，webpack可以非常容易的做到这一点，有谣言说Bower即将停止开发了, 作者推荐都使用npm来管理依赖。那么我们现在安装在我们的app中添加jquery和moment的支持。</p>
<blockquote>
<p>npm install jquery moment –save-dev</p>
</blockquote>
<p>在js中引用<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var <span class="function"><span class="keyword">sub</span> = <span class="title">require</span></span>('./sub');</div><div class="line">var $ = <span class="keyword">require</span>(<span class="string">'jquery'</span>);</div><div class="line">var moment = <span class="keyword">require</span>(<span class="string">'moment'</span>);</div><div class="line">var app  = document.createElement(<span class="string">'div'</span>);</div><div class="line">app.innerHTML = <span class="string">'&lt;h1&gt;Hello World it&lt;/h1&gt;'</span>;</div><div class="line">document.body.appendChild(app);</div><div class="line">app.appendChild(<span class="function"><span class="keyword">sub</span></span>());</div><div class="line">$(<span class="string">'body'</span>).append(<span class="string">'&lt;p&gt;look at me! now is '</span> + moment().format() + <span class="string">'&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure></p>
<p>看看浏览器，成功！ jquery和moment现在都起作用了！</p>
<h2 id="添加ES6的支持"><a href="#添加ES6的支持" class="headerlink" title="添加ES6的支持"></a>添加ES6的支持</h2><p>如果现在你的项目还没有对ES6的语法支持，那就有点没有逼格了，其实大家都知道这个也很简单，因为我们有伟大的Babel</p>
<p>首先 装各种loader</p>
<blockquote>
<p>npm install babel-loader babel-preset-es2015 –save-dev</p>
</blockquote>
<p>配置我们的config文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">      &#123;</div><div class="line">        <span class="attribute">test</span>: /\.jsx?$/,</div><div class="line">        loader: <span class="string">'babel'</span>,</div><div class="line">        include: APP_PATH,</div><div class="line">        query: &#123;</div><div class="line">          presets: [<span class="string">'es2015'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>es2015这个参数是babel的plugin，可以支持各种最新的es6的特性，具体的情况看这个链接。<br>现在我们可以改掉CommonJS风格的文件了。</p>
<h3 id="sub-js"><a href="#sub-js" class="headerlink" title="sub.js"></a>sub.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'h2'</span>);</div><div class="line">  element.innerHTML = <span class="string">"Hello h2 world hahaha"</span>;</div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'./main.scss'</span>;</div><div class="line"><span class="keyword">import</span> generateText <span class="keyword">from</span> <span class="string">'./sub'</span>;</div><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</div><div class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> app  = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">const</span> myPromise = <span class="built_in">Promise</span>.resolve(<span class="number">42</span>);</div><div class="line">myPromise.then(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</div><div class="line">  $(<span class="string">'body'</span>).append(<span class="string">'&lt;p&gt;promise result is '</span> + number + <span class="string">' now is '</span> + moment().format() + <span class="string">'&lt;/p&gt;'</span>);</div><div class="line">&#125;);</div><div class="line">app.innerHTML = <span class="string">'&lt;h1&gt;Hello World it&lt;/h1&gt;'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(app);</div><div class="line">app.appendChild(generateText());</div></pre></td></tr></table></figure>
<p>我们上面测试了import, export，const，let，promise等一系列es6的特性。</p>
<p>最后完美的输出界面。<br><img src="/images/blogImg/bd37ab4ccfa3ea7f3dc624e2e7c8303f_b.png" alt="图片"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一部分到这里结束，经过一系列例子，你应该能够了解webpack最基本的用法了吧。是否已经喜欢上这种简洁的配置了？下一部分我们会继续讨论一些webpack更高级的用法。</p>
<h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><p>webpack-dev-server –content-base test/中的–content-base指定html等静态资源的位置<br>webpack.config.js中的output.publicPath指定webpack模块打包后在服务器的路径<br>webpack-dev-server命令行接口</p>
<p>所有的webpack命令选项对webpack-dev-server命令都有效，但是没有默认的output参数。除此之外，webpack-dev-server还有一些额外的选项: </p>
<ul>
<li>–content-base: 可以是文件、目录或者url，表示静态资源的基础路径 </li>
<li>–quiet: 布尔值，控制是否要在控制台输出所有信息 </li>
<li>–colors: 为控制台输出信息增加一些颜色 </li>
<li>–no-info: 禁止输出一些无聊的信息？ </li>
<li>–host: 主机名或ip地址 </li>
<li>–port: 端口号 </li>
<li>–inline: 布尔值，表示是否要将webpack-dev-server runtime集成到模块打包文件里，可以实现浏览器与服务器的通信 </li>
<li>–hot: 布尔值，表示增加HotModuleReplacementPlugin插件，且将服务器切换到热模式中。注意点：不要再额外添加HotModuleReplacementPlugin </li>
<li>–https: 布尔值，表示webpack-dev-server是否开启HTTPS协议</li>
</ul>
<p>深入阅读，请参考：</p>
<p><a href="http://www.ido321.com/1646.html" target="_blank" rel="external">http://www.ido321.com/1646.html</a></p>
<p><a href="http://www.infoq.com/cn/articles/react-and-webpack" target="_blank" rel="external">http://www.infoq.com/cn/articles/react-and-webpack</a></p>
<p><a href="http://blog.csdn.net/zhbhun/article/details/47208885" target="_blank" rel="external">http://blog.csdn.net/zhbhun/article/details/47208885</a></p>
<p><a href="http://blog.csdn.net/zhbhun/article/details/47208885" target="_blank" rel="external">http://blog.csdn.net/zhbhun/article/details/47208885</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈javacript 笔记系列--- 代码规范]]></title>
      <url>http://meiminjun.github.io/2016/04/01/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="前端代码规范"><a href="#前端代码规范" class="headerlink" title="前端代码规范"></a>前端代码规范</h1><h2 id="es5"><a href="#es5" class="headerlink" title="es5"></a>es5</h2><p><a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html</a></p>
<h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><p>各国外国大厂用的es6规范：</p>
<p><a href="https://github.com/niubai/javascript" target="_blank" rel="external">https://github.com/niubai/javascript</a></p>
<h2 id="各个开源的代码规范的editor-config文件"><a href="#各个开源的代码规范的editor-config文件" class="headerlink" title="各个开源的代码规范的editor-config文件"></a>各个开源的代码规范的editor-config文件</h2><p>editor-config:</p>
<p><a href="http://www.alloyteam.com/2014/12/editor-config/" target="_blank" rel="external">http://www.alloyteam.com/2014/12/editor-config/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript之call、apply的使用]]></title>
      <url>http://meiminjun.github.io/2016/03/18/javascript-call-apply/</url>
      <content type="html"><![CDATA[<h2 id="call与apply的区别"><a href="#call与apply的区别" class="headerlink" title="call与apply的区别"></a>call与apply的区别</h2><hr>
<p>call 与 apply 的用法是基本一致,只是调用是不一样:<br>call的第二个参数为”字符串”<br>apply 的第二个参数为”数组”</p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">  &lt;title&gt;<span class="built_in">test</span>&lt;/title&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">Animal</span></span>()&#123;</div><div class="line">        this.name = <span class="string">"Animal"</span>;</div><div class="line">        this.showName = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            alert(this.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">Cat</span></span>()&#123;</div><div class="line">        this.name = <span class="string">"Cat"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var animal = new Animal();</div><div class="line">    var cat = new Cat();</div><div class="line"></div><div class="line">    //通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。</div><div class="line">    //输入结果为<span class="string">"Cat"</span></div><div class="line">    animal.showName.call(cat,<span class="string">""</span>);</div><div class="line">    //animal.showName.apply(cat,[]);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>call 的意思是把 animal 的方法放到cat上执行，原来cat是没有showName() 方法，现在是把animal 的showName()方法放到 cat上来执行，所以this.name 应该是 Cat</p>
</blockquote>
<h2 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">  &lt;title&gt;<span class="built_in">test</span>&lt;/title&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    <span class="keyword">function</span> Person(name)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.showName = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            alert(this.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">function</span> Student(name)&#123;</div><div class="line">        // 简单继承</div><div class="line">        Person.call(this, name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var student = new Student(<span class="string">"学生"</span>);</div><div class="line">    student.showName();</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p> Person.call(this) 的意思就是使用 Person对象代替this对象，那么 Student中不就有Person的所有属性和方法了吗，Student对象就能够直接调用Person的方法以及属性了.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript之常用DOM操作]]></title>
      <url>http://meiminjun.github.io/2016/01/05/javascript-dom/</url>
      <content type="html"><![CDATA[<p>这里主要讲一下开发中经常用到的一些javascript 原生操作dom的方法</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>() &#123;</div><div class="line">          var str = document.getElementById(<span class="string">"p1"</span>).innerHTML;</div><div class="line">          alert(str);        //弹出    我是第一个P</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">         &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">         &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="document-getElementsByName-根据name获取元素节点"><a href="#document-getElementsByName-根据name获取元素节点" class="headerlink" title="document.getElementsByName()    根据name获取元素节点"></a>document.getElementsByName()    根据name获取元素节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>() &#123;</div><div class="line">          var username = document.getElementsByName(<span class="string">"userName"</span>)[0].value;</div><div class="line">          alert(username);    //输出userName里输入的值</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span>&gt;</div><div class="line">            我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span>&gt;</div><div class="line">            我是第二个P&lt;/p&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> value=<span class="string">"请输入值"</span> name=<span class="string">"userName"</span> /&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"确定"</span> onclick=<span class="string">"fun1()"</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="document-getElementsByTagName-根据HTML标签名获取元素节点，注意getElements-的选择器返回的是一个NodeList对象，能根据索引号选择其中1个，可以遍历输出。"><a href="#document-getElementsByTagName-根据HTML标签名获取元素节点，注意getElements-的选择器返回的是一个NodeList对象，能根据索引号选择其中1个，可以遍历输出。" class="headerlink" title="document.getElementsByTagName()    根据HTML标签名获取元素节点，注意getElements*的选择器返回的是一个NodeList对象，能根据索引号选择其中1个，可以遍历输出。"></a>document.getElementsByTagName()    根据HTML标签名获取元素节点，注意getElements<em>*</em>的选择器返回的是一个NodeList对象，能根据索引号选择其中1个，可以遍历输出。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        var str = document.getElementsByTagName(<span class="string">"p"</span>)[1].innerHTML;</div><div class="line">        alert(str);        //输出  我是第二个P，因为获取的是索引为1的P，索引从0开始</div><div class="line"></div><div class="line">        var arr = document.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">        <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">            alert(arr[i].innerHTML);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var node = document.getElementById(<span class="string">"div1"</span>);</div><div class="line">        var node1 = document.getElementsByTagName(<span class="string">"p"</span>)[1];    //从获取到的元素再获取</div><div class="line">           alert(node1.innerHTML);</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">       &lt;p id=<span class="string">"p1"</span>&gt;</div><div class="line">           我是第一个P&lt;/p&gt;</div><div class="line">       &lt;p id=<span class="string">"p2"</span>&gt;</div><div class="line">           我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="document-getElementsByClassName-根据class获取元素节点"><a href="#document-getElementsByClassName-根据class获取元素节点" class="headerlink" title="document.getElementsByClassName()    根据class获取元素节点"></a>document.getElementsByClassName()    根据class获取元素节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        var node = document.getElementsByClassName(<span class="string">"class1"</span>)[0];</div><div class="line">        alert(node.innerHTML);</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt;</div><div class="line">                我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span> class=<span class="string">"class2"</span>&gt;</div><div class="line">                我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="javascript中的CSS选择器"><a href="#javascript中的CSS选择器" class="headerlink" title="javascript中的CSS选择器"></a>javascript中的CSS选择器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">document.querySelector()    //根据CSS选择器的规则，返回第一个匹配到的元素</div><div class="line">document.querySelectorAll()    //根据CSS选择器的规则，返回所有匹配到的元素</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        var node = document.querySelector(<span class="string">"#div1 &gt; p"</span>);</div><div class="line">        alert(node.innerHTML);                //输出  我是第一个P</div><div class="line"></div><div class="line">        var node1 = document.querySelector(<span class="string">".class2"</span>);</div><div class="line">        alert(node1.innerHTML);                //输出  我是第二个P</div><div class="line"></div><div class="line">        var nodelist = document.querySelectorAll(<span class="string">"p"</span>);</div><div class="line">        alert(nodelist[0].innerHTML + <span class="string">" - "</span> + nodelist[1].innerHTML);    //输出  我是第一个P - 我是第二个P</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt;</div><div class="line">                我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span> class=<span class="string">"class2"</span>&gt;</div><div class="line">                我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="文档结构和遍历"><a href="#文档结构和遍历" class="headerlink" title="文档结构和遍历"></a>文档结构和遍历</h2><ul>
<li>作为节点数的文档</li>
</ul>
<ol>
<li>parentNode    获取该节点的父节点</li>
<li>childNodes    获取该节点的子节点数组</li>
<li>firstChild    获取该节点的第一个子节点</li>
<li>lastChild    获取该节点的最后一个子节点</li>
<li>nextSibling    获取该节点的下一个兄弟元素</li>
<li>previoursSibling    获取该节点的上一个兄弟元素</li>
<li>nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点</li>
<li>nodeVlue    Text节点或Comment节点的文本内容</li>
<li>nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示</li>
</ol>
<blockquote>
<p><strong>注意，以上6个方法连元素节点也算一个节点。</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">         var node1 = document.querySelector(<span class="string">".class2"</span>);</div><div class="line">         alert(node1.parentNode.innerHTML); //输出  &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt;我是第一个P&lt;/p&gt;&lt;p id=<span class="string">"p2"</span> class=<span class="string">"class2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line"></div><div class="line">         var nodelist = document.getElementById(<span class="string">"div1"</span>);</div><div class="line">         var arr = nodelist.childNodes;</div><div class="line">         alert(arr[1].innerHTML + <span class="string">" - "</span> + arr[3].innerHTML); //输出    我是第一个P - 我是第二个P 为什么是1，3呢？因为本方法文本节点也会获取，也就是说0,2,4是文本节点</div><div class="line"></div><div class="line">         var node = document.getElementById(<span class="string">"div2"</span>);</div><div class="line">         <span class="keyword">for</span> (var i = 0; i &lt; node.childNodes.length; i++) &#123;</div><div class="line">             <span class="keyword">if</span> (node.childNodes[i].nodeType == 1) &#123;</div><div class="line">                 alert(node.childNodes[i].innerHTML);</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (node.childNodes[i].nodeType == 3) &#123;</div><div class="line">                 alert(node.childNodes[i].nodeValue);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt;</div><div class="line">                我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span> class=<span class="string">"class2"</span>&gt;</div><div class="line">                我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div id=<span class="string">"div2"</span>&gt;</div><div class="line">          文本1</div><div class="line">          &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt;</div><div class="line">              我是第一个P&lt;/p&gt;</div><div class="line">          文本2</div><div class="line">          &lt;p id=<span class="string">"p2"</span> class=<span class="string">"class2"</span>&gt;</div><div class="line">              我是第二个P&lt;/p&gt;</div><div class="line">          文本3</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li>作为元素树的文档    </li>
</ul>
<ol>
<li>firstElementChild        第一个子元素节点</li>
<li>lastElementChild        最后一个子元素节点</li>
<li>nextElementSibling        下一个兄弟元素节点</li>
<li>previousElementSibling    前一个兄弟元素节点</li>
<li>childElementCount        子元素节点个数量</li>
</ol>
<blockquote>
<p><strong>注意，此5个方法文本节点不算进去</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">         var node = document.getElementById(<span class="string">"div1"</span>);</div><div class="line">         var node1 = node.firstElementChild;</div><div class="line">         var node2 = node.lastElementChild;</div><div class="line"></div><div class="line">         alert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点</div><div class="line">         alert(node1.innerHTML);         //输出 我是第一个P</div><div class="line">         alert(node2.innerHTML);         //输出 我是第二个P</div><div class="line">         alert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)</div><div class="line">         alert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt;</div><div class="line">          我是第一个P&lt;/p&gt;</div><div class="line">      &lt;p id=<span class="string">"p2"</span> class=<span class="string">"class2"</span>&gt;</div><div class="line">          我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="javascript操作HTML属性"><a href="#javascript操作HTML属性" class="headerlink" title="javascript操作HTML属性"></a>javascript操作HTML属性</h2><h3 id="属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class-lable中的for在javascript中变为htmlFor-className。"><a href="#属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class-lable中的for在javascript中变为htmlFor-className。" class="headerlink" title="属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。"></a>属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">          var nodeText = document.getElementById(<span class="string">"input1"</span>);</div><div class="line">          alert(nodeText.value);        //输出 我是一个文本框</div><div class="line">          var nodeImg = document.getElementById(<span class="string">"img1"</span>);</div><div class="line">          alert(nodeImg.alt);            //输出 我是一张图片</div><div class="line">          var nodeP = document.getElementById(<span class="string">"p1"</span>);</div><div class="line">          alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span> class=<span class="string">"class1"</span>&gt; 我是第一个P&lt;/p&gt;</div><div class="line">        &lt;img src=<span class="string">"123.jpg"</span> alt=<span class="string">"我是一张图片"</span> id=<span class="string">"img1"</span> /&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> value=<span class="string">"我是一个文本框"</span> id=<span class="string">"input1"</span> /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="属性的设置，此处同样要注意的是保留字"><a href="#属性的设置，此处同样要注意的是保留字" class="headerlink" title="属性的设置，此处同样要注意的是保留字"></a>属性的设置，此处同样要注意的是保留字</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>() &#123;</div><div class="line">          document.getElementById(<span class="string">"img1"</span>).src = <span class="string">"1small.jpg"</span>;        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。</div><div class="line">      &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;img src=<span class="string">"1big.jpg"</span> alt=<span class="string">"我是一张图片"</span> class=<span class="string">"imgClass"</span> id=<span class="string">"img1"</span> onclick=<span class="string">"fun1()"</span> /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="非标准HTML属性"><a href="#非标准HTML属性" class="headerlink" title="非标准HTML属性"></a>非标准HTML属性</h3><p>getAttribute();    // 注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。<br>setAttribute();</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>() &#123;</div><div class="line">            document.getElementById(<span class="string">"img1"</span>).setAttribute(<span class="string">"src"</span>, <span class="string">"1small.jpg"</span>);</div><div class="line">            alert(document.getElementById(<span class="string">"img1"</span>).getAttribute(<span class="string">"class"</span>));</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;img src=<span class="string">"1big.jpg"</span> alt=<span class="string">"我是一张图片"</span> class=<span class="string">"imgClass"</span> id=<span class="string">"img1"</span> onclick=<span class="string">"fun1()"</span> /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="Attr节点的属性"><a href="#Attr节点的属性" class="headerlink" title="Attr节点的属性"></a>Attr节点的属性</h3><p>attributes属性  非Element对象返回null，Element一半返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。<br>如:document.getElementById(“img1”)[0];<br>   document.getElementById(“img1”).src;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">fun1</span></span>() &#123;</div><div class="line">            alert(document.getElementById(<span class="string">"img1"</span>).attributes[0].name);    //输出  onclick    注意，通过索引器访问是写在右面在排前面，从0开始</div><div class="line">            alert(document.getElementById(<span class="string">"img1"</span>).attributes.src.value);    //输出1big.jpg</div><div class="line">            document.getElementById(<span class="string">"img1"</span>).attributes.src.value = <span class="string">"1small.jpg"</span>;    //点击后改变src属性，实现了点击大图变小图效果</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;img src=<span class="string">"1big.jpg"</span> alt=<span class="string">"我是一张图片"</span> class=<span class="string">"imgClass"</span> id=<span class="string">"img1"</span> onclick=<span class="string">"fun1()"</span> /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="元素的内容"><a href="#元素的内容" class="headerlink" title="元素的内容"></a>元素的内容</h2><h3 id="innerText、textContent"><a href="#innerText、textContent" class="headerlink" title="innerText、textContent"></a>innerText、textContent</h3><p>innerText与textContent的区别，当文本为空时，innerText是””，而textContent是undefined</p>
<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">          alert(document.getElementById(<span class="string">"p1"</span>).innerText);  //注意火狐浏览器不支持innerText</div><div class="line">          alert(document.getElementById(<span class="string">"p1"</span>).textContent);    //基本都支持textContent</div><div class="line">          document.getElementById(<span class="string">"p1"</span>).textContent = <span class="string">"我是p1，javascript改变了我"</span>;    //设置文档Text</div><div class="line">          alert(document.getElementById(<span class="string">"p2"</span>).textContent);</div><div class="line">          alert(document.getElementById(<span class="string">"p2"</span>).innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span>&gt;我是第&lt;b&gt;二&lt;/b&gt;个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="创建，插入，删除节点"><a href="#创建，插入，删除节点" class="headerlink" title="创建，插入，删除节点"></a>创建，插入，删除节点</h2><h3 id="document-createTextNode-创建一个文本节点"><a href="#document-createTextNode-创建一个文本节点" class="headerlink" title="document.createTextNode()    创建一个文本节点"></a>document.createTextNode()    创建一个文本节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">          var textNode = document.createTextNode(<span class="string">"&lt;p&gt;我是一个javascript新建的节点&lt;/p&gt;"</span>);</div><div class="line">          document.getElementById(<span class="string">"div1"</span>).appendChild(textNode);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">      &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">  &lt;!-- 执行完成后HTML代码变为：</div><div class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">      &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">      我是一个javascript新建的节点</div><div class="line">  &lt;/div&gt;</div><div class="line">  --&gt;</div></pre></td></tr></table></figure>
<h3 id="document-createElement-创建一个元素节点"><a href="#document-createElement-创建一个元素节点" class="headerlink" title="document.createElement()    创建一个元素节点"></a>document.createElement()    创建一个元素节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">          var pNode = document.createElement(<span class="string">"p"</span>);</div><div class="line">          pNode.textContent = <span class="string">"新建一个P节点"</span>;</div><div class="line">          document.getElementById(<span class="string">"div1"</span>).appendChild(pNode);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">      &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">  &lt;!-- 执行完成后HTML代码变为：</div><div class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">      &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">      &lt;p&gt;新建一个P节点&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  --&gt;</div></pre></td></tr></table></figure>
<h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><p> appendChild()    //将一个节点插入到调用节点的最后面<br> insertBefore()    //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，则跟appendChild一样，放在最后。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            var pNode1 = document.createElement(<span class="string">"p"</span>);</div><div class="line">            pNode1.textContent = <span class="string">"insertBefore插入的节点"</span>;</div><div class="line">            var pNode2 = document.createElement(<span class="string">"p"</span>);</div><div class="line">            pNode2.textContent = <span class="string">"appendChild插入的节点"</span>;</div><div class="line">            document.getElementById(<span class="string">"div1"</span>).appendChild(pNode2);</div><div class="line">            document.getElementById(<span class="string">"div1"</span>).insertBefore(pNode1,document.getElementById(<span class="string">"p1"</span>));</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">       &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">     &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">  &lt;!-- 执行完成后HTML代码变为：</div><div class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">       &lt;p&gt;insertBefore插入的节点&lt;/p&gt;</div><div class="line">       &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">       &lt;p&gt;appendChild插入的节点&lt;/p&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">  --&gt;</div></pre></td></tr></table></figure>
<h2 id="删除和替换节点。"><a href="#删除和替换节点。" class="headerlink" title="删除和替换节点。"></a>删除和替换节点。</h2><h3 id="removeChild-由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。"><a href="#removeChild-由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。" class="headerlink" title="removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。"></a>removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            var div1 = document.getElementById(<span class="string">"div1"</span>);</div><div class="line">            div1.removeChild(document.getElementById(<span class="string">"p2"</span>));</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div><div class="line">  &lt;!-- 执行完成后HTML代码变为：</div><div class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;    //注意到第二个P元素已经被移除了</div><div class="line">  &lt;/div&gt;</div><div class="line">  --&gt;</div></pre></td></tr></table></figure>
<h3 id="replaceChild-删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点"><a href="#replaceChild-删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点" class="headerlink" title="replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点"></a>replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            var div1 = document.getElementById(<span class="string">"div1"</span>);</div><div class="line">            var span1 = document.createElement(<span class="string">"span"</span>);</div><div class="line">            span1.textContent = <span class="string">"我是一个新建的span"</span>;</div><div class="line">            div1.replaceChild(span1,document.getElementById(<span class="string">"p2"</span>));</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">        &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">        &lt;p id=<span class="string">"p2"</span>&gt;我是第二个P&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">  &lt;!-- 执行完成后HTML代码变为：</div><div class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</div><div class="line">      &lt;p id=<span class="string">"p1"</span>&gt;我是第一个P&lt;/p&gt;</div><div class="line">      &lt;span&gt;我是一个新建的span&lt;/span&gt;    //留意到p2节点已经被替换为span1节点了</div><div class="line">  &lt;/div&gt;</div><div class="line">  --&gt;</div></pre></td></tr></table></figure>
<h2 id="javascript操作元素CSS"><a href="#javascript操作元素CSS" class="headerlink" title="javascript操作元素CSS"></a>javascript操作元素CSS</h2><p>通过元素的style属性可以随意读取和设置元素的CSS样式，例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">            alert(document.getElementById(<span class="string">"div1"</span>).style.backgroundColor);</div><div class="line">            document.getElementById(<span class="string">"div1"</span>).style.backgroundColor = <span class="string">"yellow"</span>;</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"div1"</span> style=<span class="string">"width:100px; height:100px; background-color:red"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript之闭包]]></title>
      <url>http://meiminjun.github.io/2016/01/05/javascript-%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<ol>
<li>闭包最常用的方式就是返回一个内联函数（何为内联函数？就是在函数内部声明的函数）；</li>
<li>在JavaScript中有作用域和执行环境的问题，在函数内部的变量在函数外部是无法访问的，在函数内部却可以得到全局变量。由于种种原因，我们有时候需要得到函数内部的变量，可是用常规方法是得不到的，这时我们就可以创建一个闭包，用来在外部访问这个变量。</li>
<li>闭包的用途 主要就是上一点提到的读取函数内部变量，还有一个作用就是可以使这些变量一直保存在内存中。</li>
<li>使用闭包要注意，由于变量被保存在内存中，所以会对内存造成消耗，所以不能滥用闭包。解决方法是 在退出函数之前，将不使用的局部变量全部删除。</li>
</ol>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;闭包&lt;/title&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> id=<span class="string">'btn'</span> value=<span class="string">"点击我"</span>&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        // 闭包</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>()&#123;</div><div class="line">          　　var n = 999;</div><div class="line">          　　<span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</div><div class="line">           　　 alert(n+=1);</div><div class="line">         　　 &#125;</div><div class="line">         　　 <span class="built_in">return</span> f1;</div><div class="line">        　　&#125;</div><div class="line">        　　var result = f();</div><div class="line">        　　result(); // 1000</div><div class="line">        　　result(); // 1001</div><div class="line">        　　result(); // 1002</div><div class="line"></div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>通过将一个方法或者属性声明为私用的，可以让对象的实现细节对其他对象保密以降低对象之间的耦合程度，可以保持数据的完整性并对其修改方式加以约束，这样可以是代码更可靠，更易于调试。封装是面向对象的设计的基石。</p>
<p>尽管JavaScript是一门面向对象的语言，可它并不具备将成员声明为公用或私用的任何内部机制，所以我们只能自己想办法实现这种特性。下面还是通过一套完整的代码去分析，介绍什么是私有属性和方法，什么是特权属性和方法，什么是公有属性和方法，什么是公有静态属性和方法。</p>
<p><strong>私有属性和方法：</strong><br>函数有作用域，在函数内用var 关键字声明的变量在外部无法访问，私有属性和方法本质就是你希望在对象外部无法访问的变量。<br><strong>特权属性和方法：</strong><br>创建属性和方法时使用的this关键字，因为这些方法定义在构造器的作用域中，所以它们可以访问到私有属性和方法；只有那些需要直接访问私有成员的方法才应该被设计为特权方法。<br><strong>共有属性和方法：</strong><br>直接链在prototype上的属性和方法，不可以访问构造器内的私有成员，可以访问特权成员，子类会继承所有的共有方法。<br><strong>共有静态属性和方法：</strong><br>最好的理解方式就是把它想象成一个命名空间，实际上相当于把构造器作为命名空间来使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信开发-朋友、朋友圈分享]]></title>
      <url>http://meiminjun.github.io/2015/12/27/wxProject/</url>
      <content type="html"><![CDATA[<p>先看个效果图：<br><img src="/images/blogImg/weixin1227_1.jpg" alt="微信分享"></p>
<p>目前来说，对于前端开发者来说想要自定义来让分享出去的文章有图标和标题有两种方式，一种是通过微信提供的sdk进行开发，另外一种是通过一些小方法来达到同样目的，下面就向大家介绍一下：</p>
<a id="more"></a>
<h1 id="不通过微信sdk的方式巧妙解决方式"><a href="#不通过微信sdk的方式巧妙解决方式" class="headerlink" title="不通过微信sdk的方式巧妙解决方式:"></a>不通过微信sdk的方式巧妙解决方式:</h1><p>以图片中第一个分享为例，标题为“微信标题测试”,代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 在你的html中的title</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;!-- ** 此处就是你的标题 ** --&gt;</div><div class="line">		&lt;title&gt;微信标题测试&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;!-- ** 此处就是你的图标，但是图片大小一定要大于等于300*300 才会有显示 ** --&gt;</div><div class="line">		&lt;img src=<span class="string">"http://sandbox.runjs.cn/uploads/rs/438/v2eacmoa/2.png"</span>&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>几点注意的地方:</p>
<ul>
<li>img标签一定要尽量靠近body标签，否则无效果</li>
<li>如果当你的文章中木有图片你将咋办呢？我是这样解决的：将图片宽度width=”0%”，就可以了</li>
</ul>
<blockquote>
<p><code>这个方式不好的地方在于,无法自定义内容，导致分享出去的内容框中是个链接</code></p>
</blockquote>
<h1 id="通过官方sdk进行分享"><a href="#通过官方sdk进行分享" class="headerlink" title="通过官方sdk进行分享"></a>通过官方sdk进行分享</h1><h2 id="第一步：微信公众号中设置绑定域名，只有绑定的域名下的网页才可以调用微信官方的js，否则会报错，目前域名可以绑定3个（绑定步骤如下）"><a href="#第一步：微信公众号中设置绑定域名，只有绑定的域名下的网页才可以调用微信官方的js，否则会报错，目前域名可以绑定3个（绑定步骤如下）" class="headerlink" title="第一步：微信公众号中设置绑定域名，只有绑定的域名下的网页才可以调用微信官方的js，否则会报错，目前域名可以绑定3个（绑定步骤如下）"></a>第一步：微信公众号中设置绑定域名，只有绑定的域名下的网页才可以调用微信官方的js，否则会报错，目前域名可以绑定3个（绑定步骤如下）</h2><ol>
<li><strong> 进入公众号，点击左边主菜单栏“设置”→“公众号设置” </strong><br><img src="/images/blogImg/weixin1227_2.jpg" alt="微信分享"></li>
<li><strong> 然后点击上方的“功能设置” </strong><br><img src="/images/blogImg/weixin1227_3.jpg" alt="微信分享"></li>
</ol>
<h2 id="第二步：在自己的网页中引入微信官方js：http-res-wx-qq-com-open-js-jweixin-1-0-0-js"><a href="#第二步：在自己的网页中引入微信官方js：http-res-wx-qq-com-open-js-jweixin-1-0-0-js" class="headerlink" title="第二步：在自己的网页中引入微信官方js：http://res.wx.qq.com/open/js/jweixin-1.0.0.js"></a>第二步：在自己的网页中引入微信官方js：<a href="http://res.wx.qq.com/open/js/jweixin-1.0.0.js" target="_blank" rel="external">http://res.wx.qq.com/open/js/jweixin-1.0.0.js</a></h2><blockquote>
<p>如果你的页面启用了https，务必引入 <a href="https://res.wx.qq.com/open/js/jweixin-1.0.0.js" target="_blank" rel="external">https://res.wx.qq.com/open/js/jweixin-1.0.0.js</a> ，否则将无法在iOS9.0以上系统中成功使用JSSDK</p>
<h2 id="第三步：在页面添加配置信息和js代码"><a href="#第三步：在页面添加配置信息和js代码" class="headerlink" title="第三步：在页面添加配置信息和js代码"></a>第三步：在页面添加配置信息和js代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">wx.config(&#123;</div><div class="line">            <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class="line">            appId: <span class="string">'wxb5f2540cff5*****'</span>, <span class="comment">// 必填，公众号的唯一标识</span></div><div class="line">            timestamp:<span class="string">'1414587457'</span> , <span class="comment">// 必填，生成签名的时间戳</span></div><div class="line">            nonceStr: <span class="string">'Wm3WZYTPz0wzccnW'</span>, <span class="comment">// 必填，生成签名的随机串</span></div><div class="line">            signature: <span class="string">'0f9de62fce790f9a083d5c99e95740ceb90c27ed'</span>,<span class="comment">// 必填，签名</span></div><div class="line">            jsApiList: [<span class="string">'onMenuShareAppMessage'</span>] <span class="comment">// 必填，需要使用的JS接口列表</span></div><div class="line">        &#125;);</div><div class="line">        wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            wx.onMenuShareAppMessage(&#123;</div><div class="line">                <span class="attr">title</span>: <span class="string">'测试标题'</span>, <span class="comment">// 分享标题</span></div><div class="line">                desc: <span class="string">'测试描述'</span>, <span class="comment">// 分享描述</span></div><div class="line">                link: <span class="string">'http://zicp.zicp.net/ycdh_real/mobile/productInfo?id=1e72e158-f3f5-46df-8385-7fe1059e142f'</span>, <span class="comment">// 分享链接</span></div><div class="line">                imgUrl: <span class="string">'http://sandbox.runjs.cn/uploads/rs/438/v2eacmoa/2.png'</span>, <span class="comment">// 分享图标</span></div><div class="line">                type: <span class="string">'link'</span>, <span class="comment">// 分享类型,music、video或link，不填默认为link</span></div><div class="line">                dataUrl: <span class="string">''</span>, <span class="comment">// 如果type是music或video，则要提供数据链接，默认为空</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    alert(<span class="string">"分享成功！"</span>);</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">cancel</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="comment">// 用户取消分享后执行的回调函数</span></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            wx.error(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line"></div><div class="line">                <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败</span></div><div class="line"></div><div class="line">            &#125;);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</blockquote>
<p>这里重点说一下配置参数中的signature(签名)<br>获取签名的步骤：</p>
<ol>
<li>首先通过公众号的AppID(应用ID)和AppSecret(应用密钥)得到access_token，具体方法 <a href="http://mp.weixin.qq.com/wiki/11/0e4b294685f817b95cbed85ba5e82b8f.html" target="_blank" rel="external">获取access_token方法</a></li>
<li><p>通过上一步得到的access_token得到api_ticket，具体方法：<br>调用接口<a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a><br>返回json格式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"errcode"</span>:<span class="number">0</span>,</div><div class="line">	<span class="string">"errmsg"</span>:<span class="string">"ok"</span>,</div><div class="line">	<span class="string">"ticket"</span>:<span class="string">"sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg"</span>,</div><div class="line">	<span class="string">"expires_in"</span>:<span class="number">7200</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过前两步的到的jsapi_ticket获取签名signature</p>
</li>
</ol>
<ul>
<li>noncestr=Wm3WZYTPz0wzccnW        // 可以自定义</li>
<li>jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg</li>
<li>timestamp=1414587457     // 时间戳</li>
<li>url=<a href="http://mp.weixin.qq.com?params=value" target="_blank" rel="external">http://mp.weixin.qq.com?params=value</a><ul>
<li>对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串string1：<br>　　string1=jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg&amp;noncestr=Wm3WZYTPz0wzccnW&amp;timestamp=1414587457&amp;url=<a href="http://mp.weixin.qq.com?params=value" target="_blank" rel="external">http://mp.weixin.qq.com?params=value</a></li>
<li>对string1进行sha1签名，得到signature：<br>signature=sha1(string1);<br>　　经过上述算法得出 signature=0f9de62fce790f9a083d5c99e95740ceb90c27ed</li>
</ul>
</li>
</ul>
<p>注意事项：</p>
<blockquote>
<p>签名用的noncestr和timestamp必须与wx.config中的nonceStr和timestamp相同。<br>签名用的url必须是调用JS接口页面的完整URL。<br><code>出于安全考虑，开发者必须在服务器端实现签名的逻辑。</code></p>
</blockquote>
<p>微信官方推出了 JS 接口签名校验工具 <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign" target="_blank" rel="external">地址</a></p>
<p>到这为止微信分享就完成了，上述只是分享给好友，分享到朋友圈和这个类似，结合SDK官方文档照着写就可以了，分享效果出来了，看下图<br><img src="/images/blogImg/weixin1227_4.png" alt="微信分享"></p>
<hr>
<p>微信JS-SDK文档：<a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="external">http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客搭建]]></title>
      <url>http://meiminjun.github.io/2015/12/20/My-New-test/</url>
      <content type="html"><![CDATA[<p>作为第一篇博客，我就写一些这个博客是怎么制作的吧！<br><img src="/images/blogImg/hexo-github.png" alt="这个是个图片"></p>
<h2 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么?"></a><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是什么?</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<blockquote>
<p>向这个团队表示一下感谢！感谢！感谢！    ————重要的事吼三遍</p>
</blockquote>
<h2 id="Hexo有哪些特点？"><a href="#Hexo有哪些特点？" class="headerlink" title="Hexo有哪些特点？"></a>Hexo有哪些特点？</h2><ul>
<li><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><blockquote>
<p><strong>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</strong></p>
</blockquote>
</li>
<li><h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><blockquote>
<p><strong>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</strong></p>
</blockquote>
</li>
<li><h3 id="超级方便的一键部署"><a href="#超级方便的一键部署" class="headerlink" title="超级方便的一键部署"></a>超级方便的一键部署</h3><blockquote>
<p><strong>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</strong></p>
</blockquote>
</li>
<li><h3 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h3><blockquote>
<p><strong>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</strong></p>
</blockquote>
</li>
</ul>
<hr>
<a id="more"></a>
<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul>
<li><a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/downloads" target="_blank" rel="external">Git</a></li>
</ul>
<h1 id="开始我们的安装之旅："><a href="#开始我们的安装之旅：" class="headerlink" title="开始我们的安装之旅："></a>开始我们的安装之旅：</h1><h2 id="第一步-建立一个自己域名的仓库"><a href="#第一步-建立一个自己域名的仓库" class="headerlink" title="第一步-建立一个自己域名的仓库"></a>第一步-建立一个自己域名的仓库</h2><p>在github上，建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】<br>按以下步骤：<br><img src="/images/blogImg/github1.png" alt=""><br><img src="/images/blogImg/github2.png" alt=""><br><img src="/images/blogImg/github3.png" alt=""><br><img src="/images/blogImg/github4.png" alt=""><br><img src="/images/blogImg/github5.png" alt=""><br><img src="/images/blogImg/github6.png" alt=""></p>
<h3 id="参考地址：http-blog-csdn-net-renfufei-article-details-37725057"><a href="#参考地址：http-blog-csdn-net-renfufei-article-details-37725057" class="headerlink" title="参考地址：http://blog.csdn.net/renfufei/article/details/37725057/"></a>参考地址：<a href="http://blog.csdn.net/renfufei/article/details/37725057/" target="_blank" rel="external">http://blog.csdn.net/renfufei/article/details/37725057/</a></h3><h2 id="第二步-安装hexo"><a href="#第二步-安装hexo" class="headerlink" title="第二步(安装hexo)"></a>第二步(安装hexo)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g </div><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install</div><div class="line">hexo server //开启服务器，然后访问http://localhost:4000/</div></pre></td></tr></table></figure>
<p>然后访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br><img src="http://blog.fens.me/wp-content/uploads/2014/05/hexo-web.png" alt=""></p>
<h2 id="第三步-安装git插件"><a href="#第三步-安装git插件" class="headerlink" title="第三步-安装git插件"></a>第三步-安装git插件</h2><p>安装hexo 的 git 插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<h2 id="第四步-配置"><a href="#第四步-配置" class="headerlink" title="第四步-配置"></a>第四步-配置</h2><p>在跟目录下,找到配置文件_config.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com/meiminjun/meiminjun.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>Tips:</p>
<ul>
<li><code>配置的时候“：”后面空一格，否则无法提交到github</code>(<strong>重点</strong>)</li>
<li>网上很多都是用ssh进行的，其实搞起来还是挺麻烦的，自己有兴趣的可以玩玩！</li>
</ul>
<p>提供一下以ssh配置的方式安装的参考：</p>
<p><a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html</a></p>
<p><a href="http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html</a></p>
<p>如果要配置主题和插件的话:<br>Plugins: <a href="http://hexo.io/plugins/" target="_blank" rel="external">http://hexo.io/plugins/</a><br>Themes: <a href="http://hexo.io/themes/" target="_blank" rel="external">http://hexo.io/themes/</a></p>
<h2 id="第五步-命令行-重点来了"><a href="#第五步-命令行-重点来了" class="headerlink" title="第五步-命令行(重点来了)"></a>第五步-命令行(重点来了)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"My New Post"</span>	// 创建文章(在./<span class="built_in">source</span>/_posts/)</div><div class="line">hexo new post wexinSdk // 新建一个布局为post(在scaffolds中)的名字为“wexinSdk”的文章</div><div class="line">hexo new page pageTest // 新建一个pageTest的目录</div><div class="line">hexo publish [layout] &lt;title&gt;   // 新建一个草稿</div><div class="line">hexo generate // 生成文章</div><div class="line">hexo server // 开启服务器 </div><div class="line">hexo deploy  // 发布到github</div></pre></td></tr></table></figure>
<p>hexo支持简单命令格式,每次发布前的三个步骤：</p>
<blockquote>
<ul>
<li>hexo g    // 生成文章</li>
<li>hexo s    // 开启本地服务器预览(可选，方便本地预览)</li>
<li>hexo d    // 发布到github,然后在进入到.gitignore文件夹中去手动提交到自己名字的github</li>
</ul>
</blockquote>
<p>Tip:</p>
<ol>
<li>如果不行进入到.gitignore文件夹中去手动提交github</li>
<li>后面添加 – debug 可看报错信息</li>
</ol>
<p>参考：<br><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="external">http://blog.fens.me/hexo-blog-github/</a></p>
<p><a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a></p>
<h2 id="有问题？"><a href="#有问题？" class="headerlink" title="有问题？"></a>有问题？</h2><p>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>
<ul>
<li>邮件(251222845@qq.com, 把#换成@)</li>
<li>QQ: 251222845</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://meiminjun.github.io/2015/11/20/hello-world/</url>
      <content type="html"><![CDATA[<h1 id="为什么我要开一个博客？"><a href="#为什么我要开一个博客？" class="headerlink" title="为什么我要开一个博客？"></a>为什么我要开一个博客？</h1><p>浑浑噩噩、起起伏伏毕业快三年了！<br>我的主要目的是“<strong>记录一些生活中、学习中所总结的一些经验与大家分享一下</strong>” ,还一个目的就是“<strong>抑制一下自己玩游戏(撸啊撸)和玩手机的冲动，让自己整理一下思绪</strong>(<code>给自己打打鸡血</code>)”</p>
<blockquote>
<p>还有一个目的：“成为一个万人敬仰的技术大神，哈哈！”</p>
</blockquote>
<h1 id="大概多久会更新一次-这次我他妈，要认认真真的先写三年-怀孕怀久了肯定都知道我是个人才的，哈哈-？"><a href="#大概多久会更新一次-这次我他妈，要认认真真的先写三年-怀孕怀久了肯定都知道我是个人才的，哈哈-？" class="headerlink" title="大概多久会更新一次(这次我他妈，要认认真真的先写三年,怀孕怀久了肯定都知道我是个人才的，哈哈)？"></a>大概多久会更新一次(这次我他妈，要认认真真的先写三年,<code>怀孕怀久了肯定都知道我是个人才的，哈哈</code>)？</h1><p>我今年给自己设定的目标是每周写两篇，在我自己的技术和经验范围内，每篇尽量都会保持一下“<a href="http://baike.baidu.com/link?url=GccLM3cJvlY-gbSVfZzFf_MbuxrbhFMfGutrnYGLMK7CzXae1IAN20BiVGXEjcXsvYCGXIpEOGSgygh3lZAcEq" target="_blank" rel="external">高逼格</a>，幽默有趣”<br>前面几个月，我可能会相对比较“<strong>闷</strong>”(<code>我是个慢热型选手</code>)，但是，随着时间推移，写的多了，我相信自己会写的越来越<strong>好</strong>滴！</p>
<h1 id="博客内容大概会写一些什么内容呢？"><a href="#博客内容大概会写一些什么内容呢？" class="headerlink" title="博客内容大概会写一些什么内容呢？"></a>博客内容大概会写一些什么内容呢？</h1><p>大家都知道，哥是个技术出身的(<code>估计能看到我博客的，估计都是搞技术的</code>)，博客内容肯定不会排除自身技术领域，我X(操)，突然脑子里想了好多想跟大家分享的内容。<br>大方向：<strong>“技术”、“经济”、“爱好”、“生活”</strong></p>
<blockquote>
<ul>
<li><p>技术（程序开发领域）</p>
<ul>
<li>javascript(重点)</li>
<li>javascript-es6(持续跟进)</li>
<li>各种类似webapp开发领域<ul>
<li>基于cordova混合开发</li>
<li>基于react的app开发</li>
<li>基于senchatouch的app开发</li>
</ul>
</li>
</ul>
</li>
<li><p>各种自己的采坑之旅(自己遇到过bug的解决方式)</p>
<ul>
<li>后端开发领域</li>
<li>nodejs开发</li>
</ul>
</li>
<li><p>经济(个人的理财相关)</p>
<ul>
<li>基金(目前有一些投资，微赚中。。)</li>
</ul>
</li>
<li><p>爱好</p>
<ul>
<li>游戏</li>
</ul>
</li>
<li><p>生活</p>
<ul>
<li>生活常识</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>Tips:</strong><code>暂时先安排这么多，后期可能随时会增加</code></p>
<p>好了，打完收工！(一位同事的口头禅)</p>
]]></content>
    </entry>
    
  
  
</search>
